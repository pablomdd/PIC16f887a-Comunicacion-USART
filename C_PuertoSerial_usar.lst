

HI-TECH Software PIC PRO Macro Assembler V9.82 build 9453 
                                                                                               Mon Nov 25 20:21:29 2019

HI-TECH Software Omniscient Code Generator (PRO mode) build 9453
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,delta=2
    12                           	psect	text353,local,class=CODE,delta=2
    13                           	psect	text357,local,class=CODE,delta=2
    14                           	psect	text359,local,class=CODE,delta=2
    15                           	psect	text360,local,class=CODE,delta=2
    16                           	psect	text361,local,class=CODE,delta=2
    17                           	psect	text369,local,class=CODE,delta=2
    18                           	psect	text371,local,class=CODE,delta=2
    19                           	psect	pa_nodes,global,class=CODE,delta=2
    20                           	dabs	1,0x7E,2
    21  000A                     	;#
    22                           
    23                           	psect	config
    24  2007  E0D4               	dw	57556	;#
    25  2008  FFFF               	dw	65535	;#
    26                           
    27                           	psect	strings
    28  0003                     __pstrings:	
    29  0003                     stringtab:	
    30                           ;	global	stringdir,stringtab,__stringbase
    31                           
    32                           
    33                           ;	String table - string pointers are 1 byte each
    34  0003  1BFF               	btfsc	btemp+1,7
    35  0004  280D               	ljmp	stringcode
    36  0005  1383               	bcf	3,7
    37  0006  187F               	btfsc	btemp+1,0
    38  0007  1783               	bsf	3,7
    39  0008  0800               	movf	0,w
    40  0009  0A84               	incf	4,f
    41  000A  1903               	skipnz
    42  000B  0AFF               	incf	btemp+1,f
    43  000C  0008               	return
    44  000D                     stringcode:	
    45  000D                     stringdir:	
    46  000D  3000               	movlw	high stringdir
    47  000E  008A               	movwf	10
    48  000F  0804               	movf	4,w
    49  0010  0A84               	incf	4,f
    50  0011  0782               	addwf	2,f
    51  0012                     __stringbase:	
    52  0012  3400               	retlw	0
    53  0013                     _dpowers:	
    54  0013  3401               	retlw	1
    55  0014  3400               	retlw	0
    56  0015  340A               	retlw	10
    57  0016  3400               	retlw	0
    58  0017  3464               	retlw	100
    59  0018  3400               	retlw	0
    60  0019  34E8               	retlw	232
    61  001A  3403               	retlw	3
    62  001B  3410               	retlw	16
    63  001C  3427               	retlw	39
    64  001F                     _ADCON0	set	31
    65  001E                     _ADRESH	set	30
    66  0017                     _CCP1CON	set	23
    67  001D                     _CCP2CON	set	29
    68  0015                     _CCPR1L	set	21
    69  0006                     _PORTB	set	6
    70  0008                     _PORTD	set	8
    71  001A                     _RCREG	set	26
    72  0018                     _RCSTA	set	24
    73  0001                     _TMR0	set	1
    74  0019                     _TXREG	set	25
    75  00F9                     _GO_DONE	set	249
    76  0065                     _RCIF	set	101
    77  0046                     _RD6	set	70
    78  0047                     _RD7	set	71
    79  0049                     _RE1	set	73
    80  005A                     _T0IF	set	90
    81  0090                     _T2CKPS0	set	144
    82  0091                     _T2CKPS1	set	145
    83  0092                     _TMR2ON	set	146
    84  0064                     _TXIF	set	100
    85  009F                     _ADCON1	set	159
    86  009E                     _ADRESL	set	158
    87  0081                     _OPTION_REG	set	129
    88  008F                     _OSCCON	set	143
    89  0092                     _PR2	set	146
    90  0099                     _SPBRG	set	153
    91  0085                     _TRISA	set	133
    92  0086                     _TRISB	set	134
    93  0087                     _TRISC	set	135
    94  0088                     _TRISD	set	136
    95  0089                     _TRISE	set	137
    96  0098                     _TXSTA	set	152
    97  043E                     _TRISC6	set	1086
    98  043F                     _TRISC7	set	1087
    99  0188                     _ANSEL	set	392
   100  0189                     _ANSELH	set	393
   101  0187                     _BAUDCTL	set	391
   102  0005                     _PORTA	set	5
   103  001D                     STR_2:	
   104  001D  3450               	retlw	80	;'P'
   105  001E  344F               	retlw	79	;'O'
   106  001F  3452               	retlw	82	;'R'
   107  0020  3454               	retlw	84	;'T'
   108  0021  3441               	retlw	65	;'A'
   109  0022  3420               	retlw	32	;' '
   110  0023  3465               	retlw	101	;'e'
   111  0024  3473               	retlw	115	;'s'
   112  0025  343A               	retlw	58	;':'
   113  0026  3425               	retlw	37	;'%'
   114  0027  3464               	retlw	100	;'d'
   115  0028  3420               	retlw	32	;' '
   116  0029  3400               	retlw	0
   117  002A                     STR_1:	
   118  002A  3441               	retlw	65	;'A'
   119  002B  3444               	retlw	68	;'D'
   120  002C  3443               	retlw	67	;'C'
   121  002D  3420               	retlw	32	;' '
   122  002E  3465               	retlw	101	;'e'
   123  002F  3473               	retlw	115	;'s'
   124  0030  343A               	retlw	58	;':'
   125  0031  3425               	retlw	37	;'%'
   126  0032  3469               	retlw	105	;'i'
   127  0033  3420               	retlw	32	;' '
   128  0034  3420               	retlw	32	;' '
   129  0035  3400               	retlw	0
   130  0036                     STR_3:	
   131  0036  3450               	retlw	80	;'P'
   132  0037  344F               	retlw	79	;'O'
   133  0038  3452               	retlw	82	;'R'
   134  0039  3454               	retlw	84	;'T'
   135  003A  3442               	retlw	66	;'B'
   136  003B  343A               	retlw	58	;':'
   137  003C  3420               	retlw	32	;' '
   138  003D  3425               	retlw	37	;'%'
   139  003E  3473               	retlw	115	;'s'
   140  003F  3420               	retlw	32	;' '
   141  0040  3420               	retlw	32	;' '
   142  0041  3400               	retlw	0
   143  0042                     STR_4:	
   144  0042  3450               	retlw	80	;'P'
   145  0043  3457               	retlw	87	;'W'
   146  0044  344D               	retlw	77	;'M'
   147  0045  3420               	retlw	32	;' '
   148  0046  3465               	retlw	101	;'e'
   149  0047  3473               	retlw	115	;'s'
   150  0048  343A               	retlw	58	;':'
   151  0049  3420               	retlw	32	;' '
   152  004A  3425               	retlw	37	;'%'
   153  004B  3473               	retlw	115	;'s'
   154  004C  3420               	retlw	32	;' '
   155  004D  3400               	retlw	0
   156  004E                     STR_6:	
   157  004E  3428               	retlw	40	;'('
   158  004F  346E               	retlw	110	;'n'
   159  0050  3475               	retlw	117	;'u'
   160  0051  346C               	retlw	108	;'l'
   161  0052  346C               	retlw	108	;'l'
   162  0053  3429               	retlw	41	;')'
   163  0054  3400               	retlw	0
   164  0055                     STR_5:	
   165  0055  3468               	retlw	104	;'h'
   166  0056  344F               	retlw	79	;'O'
   167  0057  344C               	retlw	76	;'L'
   168  0058  3441               	retlw	65	;'A'
   169  0059  3400               	retlw	0
   170                           
   171                           	psect	cinit
   172  029B                     start_initialization:	
   173  029B  304C               	movlw	low __pbssBANK0
   174                           
   175                           ; Clear objects allocated to BANK0
   176  029C  1383               	bcf	3,7	;select IRP bank0
   177  029D  0084               	movwf	4
   178  029E  305F               	movlw	low (__pbssBANK0+19)
   179  029F  120A  118A  2293   	fcall	clear_ram
   180  02A2                     end_of_initialization:	
   181                           ;End of C runtime variable initialization code
   182                           
   183  02A2  0183               	clrf	3
   184  02A3  120A  118A  2DB2   	ljmp	_main	;jump to C main() function
   185                           
   186                           	psect	bssBANK0
   187  004C                     __pbssBANK0:	
   188  004C                     _nin:	
   189  004C                     	ds	2
   190  004E                     _input:	
   191  004E                     	ds	17
   192                           
   193                           	psect	clrtext
   194  0293                     clear_ram:	
   195                           ;	Called with FSR containing the base address, and
   196                           ;	W with the last address+1
   197                           
   198  0293  0064               	clrwdt	;clear the watchdog before getting into this loop
   199  0294                     clrloop:	
   200  0294  0180               	clrf	0	;clear RAM location pointed to by FSR
   201  0295  0A84               	incf	4,f	;increment pointer
   202  0296  0604               	xorwf	4,w	;XOR with final address
   203  0297  1903               	btfsc	3,2	;have we reached the end yet?
   204  0298  3400               	retlw	0	;all done for this memory range, return
   205  0299  0604               	xorwf	4,w	;XOR again to restore value
   206  029A  2A94               	goto	clrloop	;do the next byte
   207                           
   208                           	psect	cstackCOMMON
   209  0070                     __pcstackCOMMON:	
   210  0070                     ?_putch:	
   211  0070                     ??_putch:	
   212                           ; 0 bytes @ 0x0
   213                           
   214  0070                     ?_gets_Serial:	
   215                           ; 0 bytes @ 0x0
   216                           
   217  0070                     ??_gets_Serial:	
   218                           ; 0 bytes @ 0x0
   219                           
   220  0070                     ?_isdigit:	
   221                           ; 0 bytes @ 0x0
   222                           
   223  0070                     ??_isdigit:	
   224                           ; 1 bit 
   225                           
   226  0070                     ?_msecbase:	
   227                           ; 0 bytes @ 0x0
   228                           
   229  0070                     ??_msecbase:	
   230                           ; 0 bytes @ 0x0
   231                           
   232  0070                     ?_pause:	
   233                           ; 0 bytes @ 0x0
   234                           
   235  0070                     ?_lcd_write:	
   236                           ; 0 bytes @ 0x0
   237                           
   238  0070                     ?_lcd_clear:	
   239                           ; 0 bytes @ 0x0
   240                           
   241  0070                     ?_lcd_puts:	
   242                           ; 0 bytes @ 0x0
   243                           
   244  0070                     ?_lcd_goto:	
   245                           ; 0 bytes @ 0x0
   246                           
   247  0070                     ?_main:	
   248                           ; 0 bytes @ 0x0
   249                           
   250  0070                     ??_getch:	
   251                           ; 0 bytes @ 0x0
   252                           
   253  0070                     ?_getch:	
   254                           ; 0 bytes @ 0x0
   255                           
   256  0070                     ?___wmul:	
   257                           ; 1 bytes @ 0x0
   258                           
   259  0070                     ?___lwdiv:	
   260                           ; 2 bytes @ 0x0
   261                           
   262  0070                     ?___ftpack:	
   263                           ; 2 bytes @ 0x0
   264                           
   265  0070                     putch@dato:	
   266                           ; 3 bytes @ 0x0
   267                           
   268  0070                     _isdigit$2400:	
   269                           ; 1 bytes @ 0x0
   270                           
   271  0070                     pause@msvalue:	
   272                           ; 1 bytes @ 0x0
   273                           
   274  0070                     ___wmul@multiplier:	
   275                           ; 2 bytes @ 0x0
   276                           
   277  0070                     ___lwdiv@divisor:	
   278                           ; 2 bytes @ 0x0
   279                           
   280  0070                     ___ftpack@arg:	
   281                           ; 2 bytes @ 0x0
   282                           
   283                           
   284                           ; 3 bytes @ 0x0
   285  0070                     	ds	1
   286  0071                     gets_Serial@s:	
   287  0071                     isdigit@c:	
   288                           ; 1 bytes @ 0x1
   289                           
   290                           
   291                           ; 1 bytes @ 0x1
   292  0071                     	ds	1
   293  0072                     ??_pause:	
   294  0072                     pause@x:	
   295                           ; 0 bytes @ 0x2
   296                           
   297  0072                     gets_Serial@i:	
   298                           ; 2 bytes @ 0x2
   299                           
   300  0072                     ___wmul@multiplicand:	
   301                           ; 2 bytes @ 0x2
   302                           
   303  0072                     ___lwdiv@dividend:	
   304                           ; 2 bytes @ 0x2
   305                           
   306                           
   307                           ; 2 bytes @ 0x2
   308  0072                     	ds	1
   309  0073                     ___ftpack@exp:	
   310                           
   311                           ; 1 bytes @ 0x3
   312  0073                     	ds	1
   313  0074                     ??_lcd_write:	
   314  0074                     ??___wmul:	
   315                           ; 0 bytes @ 0x4
   316                           
   317  0074                     ??___lwdiv:	
   318                           ; 0 bytes @ 0x4
   319                           
   320  0074                     lcd_write@c:	
   321                           ; 0 bytes @ 0x4
   322                           
   323  0074                     ___ftpack@sign:	
   324                           ; 1 bytes @ 0x4
   325                           
   326  0074                     gets_Serial@i_1851:	
   327                           ; 1 bytes @ 0x4
   328                           
   329  0074                     ___wmul@product:	
   330                           ; 2 bytes @ 0x4
   331                           
   332  0074                     ___lwdiv@quotient:	
   333                           ; 2 bytes @ 0x4
   334                           
   335                           
   336                           ; 2 bytes @ 0x4
   337  0074                     	ds	1
   338  0075                     ??___ftpack:	
   339  0075                     ??_lcd_clear:	
   340                           ; 0 bytes @ 0x5
   341                           
   342  0075                     ??_lcd_puts:	
   343                           ; 0 bytes @ 0x5
   344                           
   345  0075                     ??_lcd_goto:	
   346                           ; 0 bytes @ 0x5
   347                           
   348  0075                     lcd_puts@s:	
   349                           ; 0 bytes @ 0x5
   350                           
   351  0075                     lcd_goto@pos:	
   352                           ; 1 bytes @ 0x5
   353                           
   354                           
   355                           ; 1 bytes @ 0x5
   356  0075                     	ds	1
   357  0076                     ?_atoi:	
   358  0076                     gets_Serial@c:	
   359                           ; 2 bytes @ 0x6
   360                           
   361  0076                     ___lwdiv@counter:	
   362                           ; 1 bytes @ 0x6
   363                           
   364                           
   365                           ; 1 bytes @ 0x6
   366  0076                     	ds	1
   367  0077                     ?___lwmod:	
   368  0077                     ___lwmod@divisor:	
   369                           ; 2 bytes @ 0x7
   370                           
   371                           
   372                           ; 2 bytes @ 0x7
   373  0077                     	ds	1
   374  0078                     ??_atoi:	
   375  0078                     ?___awtoft:	
   376                           ; 0 bytes @ 0x8
   377                           
   378  0078                     ___awtoft@c:	
   379                           ; 3 bytes @ 0x8
   380                           
   381                           
   382                           ; 2 bytes @ 0x8
   383  0078                     	ds	1
   384  0079                     ___lwmod@dividend:	
   385                           
   386                           ; 2 bytes @ 0x9
   387  0079                     	ds	1
   388  007A                     atoi@sign:	
   389                           
   390                           ; 1 bytes @ 0xA
   391  007A                     	ds	1
   392  007B                     ??___lwmod:	
   393  007B                     ??___awtoft:	
   394                           ; 0 bytes @ 0xB
   395                           
   396  007B                     ___lwmod@counter:	
   397                           ; 0 bytes @ 0xB
   398                           
   399  007B                     ___awtoft@sign:	
   400                           ; 1 bytes @ 0xB
   401                           
   402  007B                     atoi@a:	
   403                           ; 1 bytes @ 0xB
   404                           
   405                           
   406                           ; 2 bytes @ 0xB
   407  007B                     	ds	1
   408  007C                     ??_sprintf:	
   409                           
   410                           ; 0 bytes @ 0xC
   411  007C                     	ds	1
   412  007D                     atoi@s:	
   413                           
   414                           ; 1 bytes @ 0xD
   415  007D                     	ds	1
   416                           
   417                           	psect	cstackBANK0
   418  0020                     __pcstackBANK0:	
   419  0020                     ?_sprintf:	
   420  0020                     ?___ftmul:	
   421                           ; 2 bytes @ 0x0
   422                           
   423  0020                     sprintf@f:	
   424                           ; 3 bytes @ 0x0
   425                           
   426  0020                     ___ftmul@f1:	
   427                           ; 1 bytes @ 0x0
   428                           
   429                           
   430                           ; 3 bytes @ 0x0
   431  0020                     	ds	3
   432  0023                     sprintf@flag:	
   433  0023                     ___ftmul@f2:	
   434                           ; 1 bytes @ 0x3
   435                           
   436                           
   437                           ; 3 bytes @ 0x3
   438  0023                     	ds	1
   439  0024                     sprintf@prec:	
   440                           
   441                           ; 1 bytes @ 0x4
   442  0024                     	ds	1
   443  0025                     sprintf@ap:	
   444                           
   445                           ; 1 bytes @ 0x5
   446  0025                     	ds	1
   447  0026                     ??___ftmul:	
   448  0026                     sprintf@sp:	
   449                           ; 0 bytes @ 0x6
   450                           
   451                           
   452                           ; 1 bytes @ 0x6
   453  0026                     	ds	1
   454  0027                     sprintf@_val:	
   455                           
   456                           ; 4 bytes @ 0x7
   457  0027                     	ds	2
   458  0029                     ___ftmul@exp:	
   459                           
   460                           ; 1 bytes @ 0x9
   461  0029                     	ds	1
   462  002A                     ___ftmul@f3_as_product:	
   463                           
   464                           ; 3 bytes @ 0xA
   465  002A                     	ds	1
   466  002B                     sprintf@c:	
   467                           
   468                           ; 1 bytes @ 0xB
   469  002B                     	ds	2
   470  002D                     ___ftmul@cntr:	
   471                           
   472                           ; 1 bytes @ 0xD
   473  002D                     	ds	1
   474  002E                     ___ftmul@sign:	
   475                           
   476                           ; 1 bytes @ 0xE
   477  002E                     	ds	1
   478  002F                     ??_main:	
   479                           
   480                           ; 0 bytes @ 0xF
   481  002F                     	ds	2
   482  0031                     main@buffer:	
   483                           
   484                           ; 15 bytes @ 0x11
   485  0031                     	ds	15
   486  0040                     main@val:	
   487                           
   488                           ; 2 bytes @ 0x20
   489  0040                     	ds	2
   490  0042                     main@pwm_1:	
   491                           
   492                           ; 2 bytes @ 0x22
   493  0042                     	ds	2
   494  0044                     main@i:	
   495                           
   496                           ; 2 bytes @ 0x24
   497  0044                     	ds	2
   498  0046                     main@i_1832:	
   499                           
   500                           ; 2 bytes @ 0x26
   501  0046                     	ds	2
   502  0048                     main@x:	
   503                           
   504                           ; 1 bytes @ 0x28
   505  0048                     	ds	1
   506  0049                     main@x_1838:	
   507                           
   508                           ; 1 bytes @ 0x29
   509  0049                     	ds	1
   510  004A                     main@x_1840:	
   511                           
   512                           ; 1 bytes @ 0x2A
   513  004A                     	ds	1
   514  004B                     main@x_1842:	
   515                           
   516                           ; 1 bytes @ 0x2B
   517  004B                     	ds	1
   518                           
   519                           	psect	maintext
   520  05B2                     __pmaintext:	
   521 ;;Data sizes: Strings 61, constant 10, data 0, bss 19, persistent 0 stack 0
   522 ;;Auto spaces:   Size  Autos    Used
   523 ;; COMMON          14     14      14
   524 ;; BANK0           80     44      63
   525 ;; BANK1           80      0       0
   526 ;; BANK3           96      0       0
   527 ;; BANK2           96      0       0
   528 ;;
   529 ;; Pointer list with targets:
   530 ;; ?___ftpack	float  size(1) Largest target is 0
   531 ;;
   532 ;; ?___wmul	unsigned int  size(1) Largest target is 0
   533 ;;
   534 ;; ?___lwdiv	unsigned int  size(1) Largest target is 0
   535 ;;
   536 ;; ?___lwmod	unsigned int  size(1) Largest target is 17
   537 ;;		 -> input(BANK0[17]), 
   538 ;;
   539 ;; ?_atoi	int  size(1) Largest target is 0
   540 ;;
   541 ;; ?___ftmul	float  size(1) Largest target is 0
   542 ;;
   543 ;; ?___awtoft	float  size(1) Largest target is 0
   544 ;;
   545 ;; atoi@s	PTR const unsigned char  size(1) Largest target is 17
   546 ;;		 -> input(BANK0[17]), 
   547 ;;
   548 ;; sprintf@f	PTR const unsigned char  size(1) Largest target is 13
   549 ;;		 -> STR_4(CODE[12]), STR_3(CODE[12]), STR_2(CODE[13]), STR_1(CODE[12]), 
   550 ;;
   551 ;; sprintf@_val._cp	PTR const unsigned char  size(2) Largest target is 17
   552 ;;		 -> STR_6(CODE[7]), input(BANK0[17]), 
   553 ;;
   554 ;; sprintf@sp	PTR unsigned char  size(1) Largest target is 15
   555 ;;		 -> main@buffer(BANK0[15]), 
   556 ;;
   557 ;; ?_sprintf	int  size(1) Largest target is 17
   558 ;;		 -> input(BANK0[17]), 
   559 ;;
   560 ;; sprintf@ap	PTR void [1] size(1) Largest target is 2
   561 ;;		 -> ?_sprintf(BANK0[2]), 
   562 ;;
   563 ;; S1870$_cp	PTR const unsigned char  size(2) Largest target is 17
   564 ;;		 -> STR_6(CODE[7]), input(BANK0[17]), 
   565 ;;
   566 ;; _val._str._cp	PTR const unsigned char  size(2) Largest target is 17
   567 ;;		 -> STR_6(CODE[7]), input(BANK0[17]), 
   568 ;;
   569 ;; gets_Serial@s	PTR unsigned char  size(1) Largest target is 17
   570 ;;		 -> input(BANK0[17]), main@buffer(BANK0[15]), 
   571 ;;
   572 ;; lcd_puts@s	PTR const unsigned char  size(1) Largest target is 8192
   573 ;;		 -> ROM(CODE[8192]), STR_5(CODE[5]), 
   574 ;;
   575 ;; pa	PTR unsigned char  size(1) Largest target is 1
   576 ;;		 -> PORTA(BITSFR0[1]), 
   577 ;;
   578 ;;
   579 ;; Critical Paths under _main in COMMON
   580 ;;
   581 ;;   _main->_sprintf
   582 ;;   _main->_atoi
   583 ;;   _lcd_goto->_lcd_write
   584 ;;   _lcd_puts->_lcd_write
   585 ;;   _lcd_clear->_lcd_write
   586 ;;   _lcd_write->_pause
   587 ;;   ___awtoft->___ftpack
   588 ;;   ___ftmul->___awtoft
   589 ;;   _atoi->___wmul
   590 ;;   _sprintf->___lwmod
   591 ;;   ___lwmod->___lwdiv
   592 ;;
   593 ;; Critical Paths under _main in BANK0
   594 ;;
   595 ;;   _main->___ftmul
   596 ;;
   597 ;; Critical Paths under _main in BANK1
   598 ;;
   599 ;;   None.
   600 ;;
   601 ;; Critical Paths under _main in BANK3
   602 ;;
   603 ;;   None.
   604 ;;
   605 ;; Critical Paths under _main in BANK2
   606 ;;
   607 ;;   None.
   608 ;;
   609 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   610 ;;
   611 ;;
   612 ;;Call Graph Tables:
   613 ;;
   614 ;; ---------------------------------------------------------------------------------
   615 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   616 ;; ---------------------------------------------------------------------------------
   617 ;; (0) _main                                                36    36      0    3616
   618 ;;                                             15 BANK0     29    29      0
   619 ;;                              _pause
   620 ;;                          _lcd_write
   621 ;;                          _lcd_clear
   622 ;;                              _putch
   623 ;;                        _gets_Serial
   624 ;;                           ___awtoft
   625 ;;                            ___ftmul
   626 ;;                            _sprintf
   627 ;;                               _atoi
   628 ;;                           _lcd_goto
   629 ;;                           _lcd_puts
   630 ;; ---------------------------------------------------------------------------------
   631 ;; (1) _lcd_goto                                             1     1      0     112
   632 ;;                                              5 COMMON     1     1      0
   633 ;;                          _lcd_write
   634 ;; ---------------------------------------------------------------------------------
   635 ;; (1) _lcd_puts                                             1     1      0     135
   636 ;;                                              5 COMMON     1     1      0
   637 ;;                          _lcd_write
   638 ;; ---------------------------------------------------------------------------------
   639 ;; (1) _lcd_clear                                            0     0      0     136
   640 ;;                          _lcd_write
   641 ;;                              _pause
   642 ;; ---------------------------------------------------------------------------------
   643 ;; (2) _lcd_write                                            1     1      0      90
   644 ;;                                              4 COMMON     1     1      0
   645 ;;                              _pause
   646 ;; ---------------------------------------------------------------------------------
   647 ;; (1) ___awtoft                                             4     1      3     300
   648 ;;                                              8 COMMON     4     1      3
   649 ;;                           ___ftpack
   650 ;; ---------------------------------------------------------------------------------
   651 ;; (1) ___ftmul                                             15     9      6     535
   652 ;;                                              0 BANK0     15     9      6
   653 ;;                           ___ftpack
   654 ;;                           ___awtoft (ARG)
   655 ;; ---------------------------------------------------------------------------------
   656 ;; (1) _atoi                                                 8     6      2     388
   657 ;;                                              6 COMMON     8     6      2
   658 ;;                             ___wmul
   659 ;;                            _isdigit
   660 ;; ---------------------------------------------------------------------------------
   661 ;; (1) _sprintf                                             14    11      3     913
   662 ;;                                             12 COMMON     2     2      0
   663 ;;                                              0 BANK0     12     9      3
   664 ;;                            ___lwdiv
   665 ;;                            ___lwmod
   666 ;; ---------------------------------------------------------------------------------
   667 ;; (1) _gets_Serial                                          7     7      0     247
   668 ;;                                              0 COMMON     7     7      0
   669 ;;                              _getch
   670 ;; ---------------------------------------------------------------------------------
   671 ;; (3) _pause                                                4     2      2      46
   672 ;;                                              0 COMMON     4     2      2
   673 ;;                           _msecbase
   674 ;; ---------------------------------------------------------------------------------
   675 ;; (2) ___ftpack                                             8     3      5     209
   676 ;;                                              0 COMMON     8     3      5
   677 ;; ---------------------------------------------------------------------------------
   678 ;; (2) ___lwmod                                              5     1      4     159
   679 ;;                                              7 COMMON     5     1      4
   680 ;;                            ___lwdiv (ARG)
   681 ;; ---------------------------------------------------------------------------------
   682 ;; (2) ___lwdiv                                              7     3      4     162
   683 ;;                                              0 COMMON     7     3      4
   684 ;; ---------------------------------------------------------------------------------
   685 ;; (2) ___wmul                                               6     2      4      92
   686 ;;                                              0 COMMON     6     2      4
   687 ;; ---------------------------------------------------------------------------------
   688 ;; (2) _isdigit                                              2     2      0      68
   689 ;;                                              0 COMMON     2     2      0
   690 ;; ---------------------------------------------------------------------------------
   691 ;; (2) _getch                                                0     0      0       0
   692 ;; ---------------------------------------------------------------------------------
   693 ;; (1) _putch                                                1     1      0      22
   694 ;;                                              0 COMMON     1     1      0
   695 ;; ---------------------------------------------------------------------------------
   696 ;; (4) _msecbase                                             0     0      0       0
   697 ;; ---------------------------------------------------------------------------------
   698 ;; Estimated maximum stack depth 4
   699 ;; ---------------------------------------------------------------------------------
   700 ;; Call Graph Graphs:
   701 ;; _main (ROOT)
   702 ;;   _pause
   703 ;;     _msecbase
   704 ;;   _lcd_write
   705 ;;     _pause
   706 ;;       _msecbase
   707 ;;   _lcd_clear
   708 ;;     _lcd_write
   709 ;;       _pause
   710 ;;         _msecbase
   711 ;;     _pause
   712 ;;       _msecbase
   713 ;;   _putch
   714 ;;   _gets_Serial
   715 ;;     _getch
   716 ;;   ___awtoft
   717 ;;     ___ftpack
   718 ;;   ___ftmul
   719 ;;     ___ftpack
   720 ;;     ___awtoft (ARG)
   721 ;;       ___ftpack
   722 ;;   _sprintf
   723 ;;     ___lwdiv
   724 ;;     ___lwmod
   725 ;;       ___lwdiv (ARG)
   726 ;;   _atoi
   727 ;;     ___wmul
   728 ;;     _isdigit
   729 ;;   _lcd_goto
   730 ;;     _lcd_write
   731 ;;       _pause
   732 ;;         _msecbase
   733 ;;   _lcd_puts
   734 ;;     _lcd_write
   735 ;;       _pause
   736 ;;         _msecbase
   737 ;;
   738 ;; Address spaces:
   739 ;;Name               Size   Autos  Total    Cost      Usage
   740 ;;BITCOMMON            E      0       0       0        0.0%
   741 ;;EEDATA             100      0       0       0        0.0%
   742 ;;NULL                 0      0       0       0        0.0%
   743 ;;CODE                 0      0       0       0        0.0%
   744 ;;COMMON               E      E       E       1      100.0%
   745 ;;BITSFR0              0      0       0       1        0.0%
   746 ;;SFR0                 0      0       0       1        0.0%
   747 ;;BITSFR1              0      0       0       2        0.0%
   748 ;;SFR1                 0      0       0       2        0.0%
   749 ;;STACK                0      0       4       2        0.0%
   750 ;;ABS                  0      0      4D       3        0.0%
   751 ;;BITBANK0            50      0       0       4        0.0%
   752 ;;BITSFR3              0      0       0       4        0.0%
   753 ;;SFR3                 0      0       0       4        0.0%
   754 ;;BANK0               50     2C      3F       5       78.8%
   755 ;;BITSFR2              0      0       0       5        0.0%
   756 ;;SFR2                 0      0       0       5        0.0%
   757 ;;BITBANK1            50      0       0       6        0.0%
   758 ;;BANK1               50      0       0       7        0.0%
   759 ;;BITBANK3            60      0       0       8        0.0%
   760 ;;BANK3               60      0       0       9        0.0%
   761 ;;BITBANK2            60      0       0      10        0.0%
   762 ;;BANK2               60      0       0      11        0.0%
   763 ;;DATA                 0      0      51      12        0.0%
   764                           
   765                           
   766 ;; *************** function _main *****************
   767 ;; Defined at:
   768 ;;		line 94 in file "C:\Users\petir\Documents\PIC_PROG\C_PuertoSerial\C_PuertoSerial_usart.c"
   769 ;; Parameters:    Size  Location     Type
   770 ;;		None
   771 ;; Auto vars:     Size  Location     Type
   772 ;;  x               1   43[BANK0 ] unsigned char 
   773 ;;  x               1   42[BANK0 ] unsigned char 
   774 ;;  x               1   41[BANK0 ] unsigned char 
   775 ;;  x               1   40[BANK0 ] unsigned char 
   776 ;;  val             2   32[BANK0 ] int 
   777 ;;  num_f           2    0        int 
   778 ;;  i               2   38[BANK0 ] int 
   779 ;;  i               2   36[BANK0 ] int 
   780 ;;  buffer         15   17[BANK0 ] unsigned char [15]
   781 ;;  pwm_1           2   34[BANK0 ] unsigned int 
   782 ;;  entrada         2    0        int 
   783 ;;  pos             1    0        unsigned char 
   784 ;;  char_pwm        1    0        unsigned char 
   785 ;;  char_recibid    1    0        unsigned char 
   786 ;; Return value:  Size  Location     Type
   787 ;;		None               void
   788 ;; Registers used:
   789 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   790 ;; Tracked objects:
   791 ;;		On entry : 17F/0
   792 ;;		On exit  : 160/0
   793 ;;		Unchanged: FFE00/0
   794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   795 ;;      Params:         0       0       0       0       0
   796 ;;      Locals:         0      27       0       0       0
   797 ;;      Temps:          0       2       0       0       0
   798 ;;      Totals:         0      29       0       0       0
   799 ;;Total ram usage:       29 bytes
   800 ;; Hardware stack levels required when called:    4
   801 ;; This function calls:
   802 ;;		_pause
   803 ;;		_lcd_write
   804 ;;		_lcd_clear
   805 ;;		_putch
   806 ;;		_gets_Serial
   807 ;;		___awtoft
   808 ;;		___ftmul
   809 ;;		_sprintf
   810 ;;		_atoi
   811 ;;		_lcd_goto
   812 ;;		_lcd_puts
   813 ;; This function is called by:
   814 ;;		Startup code after reset
   815 ;; This function uses a non-reentrant model
   816 ;;
   817  05B2                     _main:	
   818                           
   819                           ;C_PuertoSerial_usart.c: 95: ANSEL=0x60;
   820                           
   821                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   822  05B2  3060               	movlw	96
   823  05B3  1683               	bsf	3,5	;RP0=1, select bank3
   824  05B4  1703               	bsf	3,6	;RP1=1, select bank3
   825  05B5  0088               	movwf	8	;volatile
   826                           
   827                           ;C_PuertoSerial_usart.c: 96: ANSELH=0x00;
   828  05B6  0189               	clrf	9	;volatile
   829                           
   830                           ;C_PuertoSerial_usart.c: 98: TRISA = 0xFF;
   831  05B7  30FF               	movlw	255
   832  05B8  1303               	bcf	3,6	;RP1=0, select bank1
   833  05B9  0085               	movwf	5	;volatile
   834                           
   835                           ;C_PuertoSerial_usart.c: 100: TRISB = 0x00;
   836  05BA  0186               	clrf	6	;volatile
   837                           
   838                           ;C_PuertoSerial_usart.c: 101: TRISC = 0x00;
   839  05BB  0187               	clrf	7	;volatile
   840                           
   841                           ;C_PuertoSerial_usart.c: 102: TRISD = 0x00;
   842  05BC  0188               	clrf	8	;volatile
   843                           
   844                           ;C_PuertoSerial_usart.c: 103: TRISE = 0x03;
   845  05BD  3003               	movlw	3
   846  05BE  0089               	movwf	9	;volatile
   847                           
   848                           ;C_PuertoSerial_usart.c: 106: TRISE=0x03;
   849  05BF  0089               	movwf	9	;volatile
   850                           
   851                           ;C_PuertoSerial_usart.c: 107: ADCON1=0b00000000;
   852  05C0  019F               	clrf	31	;volatile
   853                           
   854                           ;C_PuertoSerial_usart.c: 108: PR2=0xFF;
   855  05C1  30FF               	movlw	255
   856  05C2  0092               	movwf	18	;volatile
   857                           
   858                           ;C_PuertoSerial_usart.c: 110: CCP1CON = 0xC0;
   859  05C3  30C0               	movlw	192
   860  05C4  1283               	bcf	3,5	;RP0=0, select bank0
   861  05C5  0097               	movwf	23	;volatile
   862                           
   863                           ;C_PuertoSerial_usart.c: 111: CCP2CON = 0xC0;
   864  05C6  009D               	movwf	29	;volatile
   865  05C7  300F               	movlw	15
   866                           
   867                           ;C_PuertoSerial_usart.c: 112: T2CKPS1 = 1;
   868  05C8  1492               	bsf	18,1
   869                           
   870                           ;C_PuertoSerial_usart.c: 113: T2CKPS0 = 1;
   871  05C9  1412               	bsf	18,0
   872                           
   873                           ;C_PuertoSerial_usart.c: 114: TMR2ON = 1;
   874  05CA  1512               	bsf	18,2
   875                           
   876                           ;C_PuertoSerial_usart.c: 117: RD7=0;
   877  05CB  1388               	bcf	8,7
   878                           
   879                           ;C_PuertoSerial_usart.c: 118: RD6=0;
   880  05CC  1308               	bcf	8,6
   881                           
   882                           ;C_PuertoSerial_usart.c: 119: RE1=0;
   883  05CD  1089               	bcf	9,1
   884                           
   885                           ;C_PuertoSerial_usart.c: 121: pause(15);
   886  05CE  00F0               	movwf	?_pause
   887  05CF  01F1               	clrf	?_pause+1
   888  05D0  120A  118A  2322   	fcall	_pause
      +       120A  118A         
   889                           
   890                           ;C_PuertoSerial_usart.c: 122: PORTD=init_value;
   891  05D5  3003               	movlw	3
   892  05D6  1283               	bcf	3,5	;RP0=0, select bank0
   893  05D7  1303               	bcf	3,6	;RP1=0, select bank0
   894  05D8  0088               	movwf	8	;volatile
   895  05D9  300A               	movlw	10
   896                           
   897                           ;C_PuertoSerial_usart.c: 123: ((RD6=1),(RD6=0));
   898  05DA  1708               	bsf	8,6
   899  05DB  1308               	bcf	8,6
   900                           
   901                           ;C_PuertoSerial_usart.c: 124: pause(10);
   902  05DC  00F0               	movwf	?_pause
   903  05DD  01F1               	clrf	?_pause+1
   904  05DE  120A  118A  2322   	fcall	_pause
      +       120A  118A         
   905                           
   906                           ;C_PuertoSerial_usart.c: 125: ((RD6=1),(RD6=0));
   907  05E3  1283               	bcf	3,5	;RP0=0, select bank0
   908  05E4  1303               	bcf	3,6	;RP1=0, select bank0
   909  05E5  300A               	movlw	10
   910  05E6  1708               	bsf	8,6
   911  05E7  1308               	bcf	8,6
   912                           
   913                           ;C_PuertoSerial_usart.c: 126: pause(10);
   914  05E8  00F0               	movwf	?_pause
   915  05E9  01F1               	clrf	?_pause+1
   916  05EA  120A  118A  2322   	fcall	_pause
      +       120A  118A         
   917                           
   918                           ;C_PuertoSerial_usart.c: 127: ((RD6=1),(RD6=0));
   919  05EF  1283               	bcf	3,5	;RP0=0, select bank0
   920  05F0  1303               	bcf	3,6	;RP1=0, select bank0
   921  05F1  300A               	movlw	10
   922  05F2  1708               	bsf	8,6
   923  05F3  1308               	bcf	8,6
   924                           
   925                           ;C_PuertoSerial_usart.c: 128: pause(10);
   926  05F4  00F0               	movwf	?_pause
   927  05F5  01F1               	clrf	?_pause+1
   928  05F6  120A  118A  2322   	fcall	_pause
      +       120A  118A         
   929                           
   930                           ;C_PuertoSerial_usart.c: 129: PORTD=2;
   931  05FB  3002               	movlw	2
   932  05FC  1283               	bcf	3,5	;RP0=0, select bank0
   933  05FD  1303               	bcf	3,6	;RP1=0, select bank0
   934  05FE  0088               	movwf	8	;volatile
   935  05FF  3028               	movlw	40
   936                           
   937                           ;C_PuertoSerial_usart.c: 130: ((RD6=1),(RD6=0));
   938  0600  1708               	bsf	8,6
   939  0601  1308               	bcf	8,6
   940                           
   941                           ;C_PuertoSerial_usart.c: 132: lcd_write(0x28);
   942  0602  120A  118A  2310   	fcall	_lcd_write
      +       120A  118A         
   943                           
   944                           ;C_PuertoSerial_usart.c: 133: lcd_write(0xC);
   945  0607  300C               	movlw	12
   946  0608  120A  118A  2310   	fcall	_lcd_write
      +       120A  118A         
   947                           
   948                           ;C_PuertoSerial_usart.c: 134: lcd_clear();
   949  060D  120A  118A  22ED   	fcall	_lcd_clear
      +       120A  118A         
   950                           
   951                           ;C_PuertoSerial_usart.c: 135: lcd_write(0x06);
   952  0612  3006               	movlw	6
   953  0613  120A  118A  2310   	fcall	_lcd_write
      +       120A  118A         
   954                           
   955                           ;C_PuertoSerial_usart.c: 138: TRISC7=1;
   956  0618  1683               	bsf	3,5	;RP0=1, select bank1
   957  0619  3070               	movlw	112
   958  061A  1787               	bsf	7,7
   959                           
   960                           ;C_PuertoSerial_usart.c: 139: TRISC6=0;
   961  061B  1307               	bcf	7,6
   962                           
   963                           ;C_PuertoSerial_usart.c: 140: OSCCON=0x70;
   964  061C  008F               	movwf	15	;volatile
   965                           
   966                           ;C_PuertoSerial_usart.c: 141: SPBRG=12;
   967  061D  300C               	movlw	12
   968  061E  0099               	movwf	25	;volatile
   969                           
   970                           ;C_PuertoSerial_usart.c: 142: RCSTA=0x90;
   971  061F  3090               	movlw	144
   972  0620  1283               	bcf	3,5	;RP0=0, select bank0
   973  0621  0098               	movwf	24	;volatile
   974                           
   975                           ;C_PuertoSerial_usart.c: 143: TXSTA=0x20;
   976  0622  3020               	movlw	32
   977  0623  1683               	bsf	3,5	;RP0=1, select bank1
   978  0624  0098               	movwf	24	;volatile
   979                           
   980                           ;C_PuertoSerial_usart.c: 144: BAUDCTL=0x00;
   981  0625  1703               	bsf	3,6	;RP1=1, select bank3
   982  0626  0187               	clrf	7	;volatile
   983                           
   984                           ;C_PuertoSerial_usart.c: 145: pause(500);
   985  0627  30F4               	movlw	244
   986  0628  00F0               	movwf	?_pause
   987  0629  3001               	movlw	1
   988  062A  00F1               	movwf	?_pause+1
   989  062B  120A  118A  2322   	fcall	_pause
      +       120A  118A         
   990                           
   991                           ;C_PuertoSerial_usart.c: 153: char char_recibido;
   992                           ;C_PuertoSerial_usart.c: 154: char char_pwm;
   993                           ;C_PuertoSerial_usart.c: 155: char buffer[15];
   994                           ;C_PuertoSerial_usart.c: 157: int entrada = 0;
   995  0630  30FF               	movlw	255
   996  0631  1283               	bcf	3,5	;RP0=0, select bank0
   997  0632  1303               	bcf	3,6	;RP1=0, select bank0
   998  0633  0085               	movwf	5
   999                           
  1000                           ;C_PuertoSerial_usart.c: 160: CCPR1L = 0x80;
  1001  0634  3080               	movlw	128
  1002  0635  0095               	movwf	21	;volatile
  1003                           
  1004                           ;C_PuertoSerial_usart.c: 161: CCP1CON = 0x0C;
  1005  0636  300C               	movlw	12
  1006  0637  0097               	movwf	23	;volatile
  1007  0638  3030               	movlw	48
  1008                           
  1009                           ;C_PuertoSerial_usart.c: 163: TMR2ON = 1;
  1010  0639  1512               	bsf	18,2
  1011                           
  1012                           ;C_PuertoSerial_usart.c: 170: for(int i=48; i<58; i++){
  1013  063A  00C4               	movwf	main@i
  1014  063B  01C5               	clrf	main@i+1
  1015  063C                     l3643:	
  1016                           
  1017                           ;C_PuertoSerial_usart.c: 171: putch(i);
  1018  063C  1283               	bcf	3,5	;RP0=0, select bank0
  1019  063D  1303               	bcf	3,6	;RP1=0, select bank0
  1020  063E  0844               	movf	main@i,w
  1021  063F  120A  118A  228B   	fcall	_putch
      +       120A  118A         
  1022                           
  1023                           ;C_PuertoSerial_usart.c: 172: pause(20);
  1024  0644  3014               	movlw	20
  1025  0645  00F0               	movwf	?_pause
  1026  0646  01F1               	clrf	?_pause+1
  1027  0647  120A  118A  2322   	fcall	_pause
      +       120A  118A         
  1028  064C  1283               	bcf	3,5	;RP0=0, select bank0
  1029  064D  1303               	bcf	3,6	;RP1=0, select bank0
  1030  064E  0AC4               	incf	main@i,f
  1031  064F  1903               	skipnz
  1032  0650  0AC5               	incf	main@i+1,f
  1033  0651  0845               	movf	main@i+1,w
  1034  0652  3A80               	xorlw	128
  1035  0653  00FF               	movwf	127
  1036  0654  3080               	movlw	128
  1037  0655  027F               	subwf	127,w
  1038  0656  1D03               	skipz
  1039  0657  2E5A               	goto	u1135
  1040  0658  303A               	movlw	58
  1041  0659  0244               	subwf	main@i,w
  1042  065A                     u1135:	
  1043  065A  1C03               	skipc
  1044  065B  2E3C               	goto	l3643
  1045                           
  1046                           ;C_PuertoSerial_usart.c: 173: }
  1047                           ;C_PuertoSerial_usart.c: 174: putch(0x0D);
  1048  065C  300D               	movlw	13
  1049  065D  120A  118A  228B   	fcall	_putch
      +       120A  118A         
  1050                           
  1051                           ;C_PuertoSerial_usart.c: 175: putch(0x0A);
  1052  0662  300A               	movlw	10
  1053  0663  120A  118A  228B   	fcall	_putch
      +       120A  118A         
  1054                           
  1055                           ;C_PuertoSerial_usart.c: 177: for(int i=97; i<123; i++){
  1056  0668  3061               	movlw	97
  1057  0669  00C6               	movwf	main@i_1832
  1058  066A  01C7               	clrf	main@i_1832+1
  1059  066B                     l3657:	
  1060                           
  1061                           ;C_PuertoSerial_usart.c: 178: putch(i);
  1062  066B  1283               	bcf	3,5	;RP0=0, select bank0
  1063  066C  1303               	bcf	3,6	;RP1=0, select bank0
  1064  066D  0846               	movf	main@i_1832,w
  1065  066E  120A  118A  228B   	fcall	_putch
      +       120A  118A         
  1066                           
  1067                           ;C_PuertoSerial_usart.c: 179: pause(20);
  1068  0673  3014               	movlw	20
  1069  0674  00F0               	movwf	?_pause
  1070  0675  01F1               	clrf	?_pause+1
  1071  0676  120A  118A  2322   	fcall	_pause
      +       120A  118A         
  1072  067B  1283               	bcf	3,5	;RP0=0, select bank0
  1073  067C  1303               	bcf	3,6	;RP1=0, select bank0
  1074  067D  0AC6               	incf	main@i_1832,f
  1075  067E  1903               	skipnz
  1076  067F  0AC7               	incf	main@i_1832+1,f
  1077  0680  0847               	movf	main@i_1832+1,w
  1078  0681  3A80               	xorlw	128
  1079  0682  00FF               	movwf	127
  1080  0683  3080               	movlw	128
  1081  0684  027F               	subwf	127,w
  1082  0685  1D03               	skipz
  1083  0686  2E89               	goto	u1145
  1084  0687  307B               	movlw	123
  1085  0688  0246               	subwf	main@i_1832,w
  1086  0689                     u1145:	
  1087  0689  1C03               	skipc
  1088  068A  2E6B               	goto	l3657
  1089                           
  1090                           ;C_PuertoSerial_usart.c: 180: }
  1091                           ;C_PuertoSerial_usart.c: 181: putch(0x0D);
  1092  068B  300D               	movlw	13
  1093  068C  120A  118A  228B   	fcall	_putch
      +       120A  118A         
  1094                           
  1095                           ;C_PuertoSerial_usart.c: 182: putch(0x0A);
  1096  0691  300A               	movlw	10
  1097  0692  120A  118A  228B   	fcall	_putch
      +       120A  118A         
  1098                           
  1099                           ;C_PuertoSerial_usart.c: 184: pause(1000);
  1100  0697  30E8               	movlw	232
  1101  0698  00F0               	movwf	?_pause
  1102  0699  3003               	movlw	3
  1103  069A  00F1               	movwf	?_pause+1
  1104  069B  120A  118A  2322   	fcall	_pause
      +       120A  118A         
  1105                           
  1106                           ;C_PuertoSerial_usart.c: 189: gets_Serial(&buffer);
  1107  06A0  3031               	movlw	main@buffer& (0+255)
  1108  06A1  120A  118A  22A6   	fcall	_gets_Serial
      +       120A  118A         
  1109  06A6                     l3667:	
  1110                           
  1111                           ;C_PuertoSerial_usart.c: 192: int val;
  1112                           ;C_PuertoSerial_usart.c: 194: lcd_clear();
  1113  06A6  120A  118A  22ED   	fcall	_lcd_clear
      +       120A  118A         
  1114                           
  1115                           ;C_PuertoSerial_usart.c: 196: ADCON0=0xD5;
  1116  06AB  30D5               	movlw	213
  1117  06AC  1283               	bcf	3,5	;RP0=0, select bank0
  1118  06AD  1303               	bcf	3,6	;RP1=0, select bank0
  1119  06AE  009F               	movwf	31	;volatile
  1120                           
  1121                           ;C_PuertoSerial_usart.c: 197: GO_DONE = 1;
  1122  06AF  149F               	bsf	31,1
  1123  06B0                     l1092:	
  1124                           ;C_PuertoSerial_usart.c: 198: while (GO_DONE ==1);
  1125                           
  1126  06B0  189F               	btfsc	31,1
  1127  06B1  2EB0               	goto	l1092
  1128                           
  1129                           ;C_PuertoSerial_usart.c: 199: nin=(ADRESH<<2)|(ADRESL>>6);
  1130  06B2  081E               	movf	30,w	;volatile
  1131  06B3  00CC               	movwf	_nin
  1132  06B4  01CD               	clrf	_nin+1
  1133  06B5  1003               	clrc
  1134  06B6  0DCC               	rlf	_nin,f
  1135  06B7  0DCD               	rlf	_nin+1,f
  1136  06B8  1003               	clrc
  1137  06B9  0DCC               	rlf	_nin,f
  1138  06BA  0DCD               	rlf	_nin+1,f
  1139  06BB  1683               	bsf	3,5	;RP0=1, select bank1
  1140  06BC  081E               	movf	30,w	;volatile
  1141  06BD  1283               	bcf	3,5	;RP0=0, select bank0
  1142  06BE  00AF               	movwf	??_main
  1143  06BF  3006               	movlw	6
  1144  06C0                     u1165:	
  1145  06C0  1003               	clrc
  1146  06C1  0CAF               	rrf	??_main,f
  1147  06C2  3EFF               	addlw	-1
  1148  06C3  1D03               	skipz
  1149  06C4  2EC0               	goto	u1165
  1150  06C5  082F               	movf	??_main,w
  1151  06C6  04CC               	iorwf	_nin,f
  1152                           
  1153                           ;C_PuertoSerial_usart.c: 203: int num_f = 255;
  1154  06C7  3028               	movlw	40
  1155  06C8  00A0               	movwf	?___ftmul
  1156  06C9  30A0               	movlw	160
  1157  06CA  00A1               	movwf	?___ftmul+1
  1158  06CB  303B               	movlw	59
  1159  06CC  00A2               	movwf	?___ftmul+2
  1160  06CD  084D               	movf	_nin+1,w
  1161  06CE  00F9               	movwf	?___awtoft+1
  1162  06CF  084C               	movf	_nin,w
  1163  06D0  00F8               	movwf	?___awtoft
  1164  06D1  120A  118A  23BF   	fcall	___awtoft
      +       120A  118A         
  1165  06D6  0878               	movf	?___awtoft,w
  1166  06D7  00A3               	movwf	?___ftmul+3
  1167  06D8  0879               	movf	?___awtoft+1,w
  1168  06D9  00A4               	movwf	?___ftmul+4
  1169  06DA  087A               	movf	?___awtoft+2,w
  1170  06DB  00A5               	movwf	?___ftmul+5
  1171  06DC  120A  118A  23DA   	fcall	___ftmul
      +       120A  118A         
  1172                           
  1173                           ;C_PuertoSerial_usart.c: 205: sprintf(buffer,"ADC es:%i  ", nin);
  1174  06E1  3018               	movlw	(STR_1-__stringbase)& (0+255)
  1175  06E2  00A0               	movwf	?_sprintf
  1176  06E3  084D               	movf	_nin+1,w
  1177  06E4  00A2               	movwf	?_sprintf+2
  1178  06E5  084C               	movf	_nin,w
  1179  06E6  00A1               	movwf	?_sprintf+1
  1180  06E7  3031               	movlw	main@buffer& (0+255)
  1181  06E8  120A  118A  2491   	fcall	_sprintf
      +       120A  118A         
  1182                           
  1183                           ;C_PuertoSerial_usart.c: 208: for (char x = 0; x<17; x++)
  1184  06ED  01C8               	clrf	main@x
  1185  06EE                     l3687:	
  1186                           
  1187                           ;C_PuertoSerial_usart.c: 209: {
  1188                           ;C_PuertoSerial_usart.c: 210: putch (buffer[x]);
  1189  06EE  0848               	movf	main@x,w
  1190  06EF  3E31               	addlw	main@buffer& (0+255)
  1191  06F0  0084               	movwf	4
  1192  06F1  0800               	movf	0,w
  1193  06F2  120A  118A  228B   	fcall	_putch
      +       120A  118A         
  1194  06F7  3011               	movlw	17
  1195  06F8  0AC8               	incf	main@x,f
  1196  06F9  0248               	subwf	main@x,w
  1197  06FA  1C03               	skipc
  1198  06FB  2EEE               	goto	l3687
  1199                           
  1200                           ;C_PuertoSerial_usart.c: 211: }
  1201                           ;C_PuertoSerial_usart.c: 212: pause(200);
  1202  06FC  30C8               	movlw	200
  1203  06FD  00F0               	movwf	?_pause
  1204  06FE  01F1               	clrf	?_pause+1
  1205  06FF  120A  118A  2322   	fcall	_pause
      +       120A  118A         
  1206                           
  1207                           ;C_PuertoSerial_usart.c: 214: putch(0x0D);
  1208  0704  300D               	movlw	13
  1209  0705  120A  118A  228B   	fcall	_putch
      +       120A  118A         
  1210                           
  1211                           ;C_PuertoSerial_usart.c: 215: putch(0x0A);
  1212  070A  300A               	movlw	10
  1213  070B  120A  118A  228B   	fcall	_putch
      +       120A  118A         
  1214                           
  1215                           ;C_PuertoSerial_usart.c: 220: sprintf(buffer,"PORTA es:%d ", PORTA);
  1216  0710  300B               	movlw	(STR_2-__stringbase)& (0+255)
  1217  0711  00A0               	movwf	?_sprintf
  1218  0712  0805               	movf	5,w	;volatile
  1219  0713  00A1               	movwf	?_sprintf+1
  1220  0714  3031               	movlw	main@buffer& (0+255)
  1221  0715  01A2               	clrf	?_sprintf+2
  1222  0716  120A  118A  2491   	fcall	_sprintf
      +       120A  118A         
  1223                           
  1224                           ;C_PuertoSerial_usart.c: 223: for (char x = 0; x<12; x++)
  1225  071B  01C9               	clrf	main@x_1838
  1226  071C                     l3703:	
  1227                           
  1228                           ;C_PuertoSerial_usart.c: 224: {
  1229                           ;C_PuertoSerial_usart.c: 225: putch (buffer[x]);
  1230  071C  0849               	movf	main@x_1838,w
  1231  071D  3E31               	addlw	main@buffer& (0+255)
  1232  071E  0084               	movwf	4
  1233  071F  0800               	movf	0,w
  1234  0720  120A  118A  228B   	fcall	_putch
      +       120A  118A         
  1235  0725  300C               	movlw	12
  1236  0726  0AC9               	incf	main@x_1838,f
  1237  0727  0249               	subwf	main@x_1838,w
  1238  0728  1C03               	skipc
  1239  0729  2F1C               	goto	l3703
  1240                           
  1241                           ;C_PuertoSerial_usart.c: 226: }
  1242                           ;C_PuertoSerial_usart.c: 227: pause(200);
  1243  072A  30C8               	movlw	200
  1244  072B  00F0               	movwf	?_pause
  1245  072C  01F1               	clrf	?_pause+1
  1246  072D  120A  118A  2322   	fcall	_pause
      +       120A  118A         
  1247                           
  1248                           ;C_PuertoSerial_usart.c: 229: putch(0x0D);
  1249  0732  300D               	movlw	13
  1250  0733  120A  118A  228B   	fcall	_putch
      +       120A  118A         
  1251                           
  1252                           ;C_PuertoSerial_usart.c: 230: putch(0x0A);
  1253  0738  300A               	movlw	10
  1254  0739  120A  118A  228B   	fcall	_putch
      +       120A  118A         
  1255                           
  1256                           ;C_PuertoSerial_usart.c: 235: gets_Serial(&input);
  1257  073E  304E               	movlw	_input& (0+255)
  1258  073F  120A  118A  22A6   	fcall	_gets_Serial
      +       120A  118A         
  1259                           
  1260                           ;C_PuertoSerial_usart.c: 237: sprintf(buffer,"PORTB: %s  ", input);
  1261  0744  3024               	movlw	(STR_3-__stringbase)& (0+255)
  1262  0745  1283               	bcf	3,5	;RP0=0, select bank0
  1263  0746  1303               	bcf	3,6	;RP1=0, select bank0
  1264  0747  00A0               	movwf	?_sprintf
  1265  0748  304E               	movlw	_input& (0+255)
  1266  0749  00A1               	movwf	?_sprintf+1
  1267  074A  3031               	movlw	main@buffer& (0+255)
  1268  074B  120A  118A  2491   	fcall	_sprintf
      +       120A  118A         
  1269                           
  1270                           ;C_PuertoSerial_usart.c: 240: for (char x = 0; x<15; x++)
  1271  0750  01CA               	clrf	main@x_1840
  1272  0751                     l3721:	
  1273                           
  1274                           ;C_PuertoSerial_usart.c: 241: {
  1275                           ;C_PuertoSerial_usart.c: 242: putch (buffer[x]);
  1276  0751  084A               	movf	main@x_1840,w
  1277  0752  3E31               	addlw	main@buffer& (0+255)
  1278  0753  0084               	movwf	4
  1279  0754  0800               	movf	0,w
  1280  0755  120A  118A  228B   	fcall	_putch
      +       120A  118A         
  1281  075A  300F               	movlw	15
  1282  075B  0ACA               	incf	main@x_1840,f
  1283  075C  024A               	subwf	main@x_1840,w
  1284  075D  1C03               	skipc
  1285  075E  2F51               	goto	l3721
  1286                           
  1287                           ;C_PuertoSerial_usart.c: 243: }
  1288                           ;C_PuertoSerial_usart.c: 244: pause(200);
  1289  075F  30C8               	movlw	200
  1290  0760  00F0               	movwf	?_pause
  1291  0761  01F1               	clrf	?_pause+1
  1292  0762  120A  118A  2322   	fcall	_pause
      +       120A  118A         
  1293                           
  1294                           ;C_PuertoSerial_usart.c: 246: putch(0x0D);
  1295  0767  300D               	movlw	13
  1296  0768  120A  118A  228B   	fcall	_putch
      +       120A  118A         
  1297                           
  1298                           ;C_PuertoSerial_usart.c: 247: putch(0x0A);
  1299  076D  300A               	movlw	10
  1300  076E  120A  118A  228B   	fcall	_putch
      +       120A  118A         
  1301                           
  1302                           ;C_PuertoSerial_usart.c: 251: PORTB = atoi(input);
  1303  0773  304E               	movlw	_input& (0+255)
  1304  0774  120A  118A  233E   	fcall	_atoi
      +       120A  118A         
  1305  0779  0876               	movf	?_atoi,w
  1306  077A  0086               	movwf	6	;volatile
  1307                           
  1308                           ;C_PuertoSerial_usart.c: 256: gets_Serial(&input);
  1309  077B  304E               	movlw	_input& (0+255)
  1310  077C  120A  118A  22A6   	fcall	_gets_Serial
      +       120A  118A         
  1311                           
  1312                           ;C_PuertoSerial_usart.c: 258: sprintf(buffer,"PWM es: %s ", input);
  1313  0781  3030               	movlw	(STR_4-__stringbase)& (0+255)
  1314  0782  1283               	bcf	3,5	;RP0=0, select bank0
  1315  0783  1303               	bcf	3,6	;RP1=0, select bank0
  1316  0784  00A0               	movwf	?_sprintf
  1317  0785  304E               	movlw	_input& (0+255)
  1318  0786  00A1               	movwf	?_sprintf+1
  1319  0787  3031               	movlw	main@buffer& (0+255)
  1320  0788  120A  118A  2491   	fcall	_sprintf
      +       120A  118A         
  1321                           
  1322                           ;C_PuertoSerial_usart.c: 261: for (char x = 0; x<15; x++)
  1323  078D  01CB               	clrf	main@x_1842
  1324  078E                     l3741:	
  1325                           
  1326                           ;C_PuertoSerial_usart.c: 262: {
  1327                           ;C_PuertoSerial_usart.c: 263: putch (buffer[x]);
  1328  078E  084B               	movf	main@x_1842,w
  1329  078F  3E31               	addlw	main@buffer& (0+255)
  1330  0790  0084               	movwf	4
  1331  0791  0800               	movf	0,w
  1332  0792  120A  118A  228B   	fcall	_putch
      +       120A  118A         
  1333  0797  300F               	movlw	15
  1334  0798  0ACB               	incf	main@x_1842,f
  1335  0799  024B               	subwf	main@x_1842,w
  1336  079A  1C03               	skipc
  1337  079B  2F8E               	goto	l3741
  1338                           
  1339                           ;C_PuertoSerial_usart.c: 264: }
  1340                           ;C_PuertoSerial_usart.c: 265: pause(200);
  1341  079C  30C8               	movlw	200
  1342  079D  00F0               	movwf	?_pause
  1343  079E  01F1               	clrf	?_pause+1
  1344  079F  120A  118A  2322   	fcall	_pause
      +       120A  118A         
  1345                           
  1346                           ;C_PuertoSerial_usart.c: 267: putch(0x0D);
  1347  07A4  300D               	movlw	13
  1348  07A5  120A  118A  228B   	fcall	_putch
      +       120A  118A         
  1349                           
  1350                           ;C_PuertoSerial_usart.c: 268: putch(0x0A);
  1351  07AA  300A               	movlw	10
  1352  07AB  120A  118A  228B   	fcall	_putch
      +       120A  118A         
  1353                           
  1354                           ;C_PuertoSerial_usart.c: 270: pwm_1 = atoi(input);
  1355  07B0  304E               	movlw	_input& (0+255)
  1356  07B1  120A  118A  233E   	fcall	_atoi
      +       120A  118A         
  1357  07B6  0877               	movf	?_atoi+1,w
  1358  07B7  00C3               	movwf	main@pwm_1+1
  1359  07B8  0876               	movf	?_atoi,w
  1360  07B9  00C2               	movwf	main@pwm_1
  1361                           
  1362                           ;C_PuertoSerial_usart.c: 275: CCPR1L = (pwm_1>>2) & 0xFF;
  1363  07BA  0843               	movf	main@pwm_1+1,w
  1364  07BB  00B0               	movwf	??_main+1
  1365  07BC  0842               	movf	main@pwm_1,w
  1366  07BD  00AF               	movwf	??_main
  1367  07BE  1003               	clrc
  1368  07BF  0CB0               	rrf	??_main+1,f
  1369  07C0  0CAF               	rrf	??_main,f
  1370  07C1  1003               	clrc
  1371  07C2  0CB0               	rrf	??_main+1,f
  1372  07C3  0CAF               	rrf	??_main,f
  1373  07C4  082F               	movf	??_main,w
  1374  07C5  0095               	movwf	21	;volatile
  1375                           
  1376                           ;C_PuertoSerial_usart.c: 276: CCP1CON = 0x0C|((pwm_1 & 0x03)<<4);
  1377  07C6  0E42               	swapf	main@pwm_1,w
  1378  07C7  3930               	andlw	48
  1379  07C8  380C               	iorlw	12
  1380  07C9  0097               	movwf	23	;volatile
  1381                           
  1382                           ;C_PuertoSerial_usart.c: 278: pause(1000);
  1383  07CA  30E8               	movlw	232
  1384  07CB  00F0               	movwf	?_pause
  1385  07CC  3003               	movlw	3
  1386  07CD  00F1               	movwf	?_pause+1
  1387  07CE  120A  118A  2322   	fcall	_pause
      +       120A  118A         
  1388                           
  1389                           ;C_PuertoSerial_usart.c: 281: lcd_goto(0);
  1390  07D3  3000               	movlw	0
  1391  07D4  120A  118A  22E6   	fcall	_lcd_goto
      +       120A  118A         
  1392                           
  1393                           ;C_PuertoSerial_usart.c: 282: lcd_puts("hOLA");
  1394  07D9  3043               	movlw	(STR_5-__stringbase)& (0+255)
  1395  07DA  120A  118A  22F8   	fcall	_lcd_puts
      +       120A  118A         
  1396                           
  1397                           ;C_PuertoSerial_usart.c: 283: lcd_goto(0x40);
  1398  07DF  3040               	movlw	64
  1399  07E0  120A  118A  22E6   	fcall	_lcd_goto
      +       120A  118A         
  1400                           
  1401                           ;C_PuertoSerial_usart.c: 284: lcd_puts(val);
  1402  07E5  0840               	movf	main@val,w
  1403  07E6  120A  118A  22F8   	fcall	_lcd_puts
      +       120A  118A         
  1404                           
  1405                           ;C_PuertoSerial_usart.c: 286: pause(200);
  1406  07EB  30C8               	movlw	200
  1407  07EC  00F0               	movwf	?_pause
  1408  07ED  01F1               	clrf	?_pause+1
  1409  07EE  120A  118A  2322   	fcall	_pause
      +       120A  118A         
  1410                           
  1411                           ;C_PuertoSerial_usart.c: 288: putch(0x0D);
  1412  07F3  300D               	movlw	13
  1413  07F4  120A  118A  228B   	fcall	_putch
      +       120A  118A         
  1414                           
  1415                           ;C_PuertoSerial_usart.c: 289: putch(0x0A);
  1416  07F9  300A               	movlw	10
  1417  07FA  120A  118A  228B   	fcall	_putch
      +       120A  118A         
  1418  07FF  2EA6               	goto	l3667
  1419  0800                     __end_of_main:	
  1420                           
  1421                           	psect	text353
  1422  02E6                     __ptext353:	
  1423 ;; =============== function _main ends ============
  1424                           
  1425                           
  1426 ;; *************** function _lcd_goto *****************
  1427 ;; Defined at:
  1428 ;;		line 89 in file "C:\Users\petir\Documents\PIC_PROG\C_PuertoSerial\C_PuertoSerial_usart.c"
  1429 ;; Parameters:    Size  Location     Type
  1430 ;;  pos             1    wreg     unsigned char 
  1431 ;; Auto vars:     Size  Location     Type
  1432 ;;  pos             1    5[COMMON] unsigned char 
  1433 ;; Return value:  Size  Location     Type
  1434 ;;		None               void
  1435 ;; Registers used:
  1436 ;;		wreg, status,2, status,0, pclath, cstack
  1437 ;; Tracked objects:
  1438 ;;		On entry : 100/0
  1439 ;;		On exit  : 160/0
  1440 ;;		Unchanged: FFE9F/0
  1441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1442 ;;      Params:         0       0       0       0       0
  1443 ;;      Locals:         1       0       0       0       0
  1444 ;;      Temps:          0       0       0       0       0
  1445 ;;      Totals:         1       0       0       0       0
  1446 ;;Total ram usage:        1 bytes
  1447 ;; Hardware stack levels used:    1
  1448 ;; Hardware stack levels required when called:    3
  1449 ;; This function calls:
  1450 ;;		_lcd_write
  1451 ;; This function is called by:
  1452 ;;		_main
  1453 ;; This function uses a non-reentrant model
  1454 ;;
  1455  02E6                     _lcd_goto:	
  1456                           
  1457                           ; Regs used in _lcd_goto: [wreg+status,2+status,0+pclath+cstack]
  1458                           ;lcd_goto@pos stored from wreg
  1459  02E6  00F5               	movwf	lcd_goto@pos
  1460                           
  1461                           ;C_PuertoSerial_usart.c: 90: RD7=0;
  1462  02E7  1283               	bcf	3,5	;RP0=0, select bank0
  1463  02E8  1303               	bcf	3,6	;RP1=0, select bank0
  1464  02E9  1388               	bcf	8,7
  1465                           
  1466                           ;C_PuertoSerial_usart.c: 91: lcd_write(0x80+pos);
  1467  02EA  0875               	movf	lcd_goto@pos,w
  1468  02EB  3E80               	addlw	128
  1469  02EC  2B10               	ljmp	_lcd_write
  1470  02ED                     __end_of_lcd_goto:	
  1471  02ED                     __ptext355:	
  1472 ;; =============== function _lcd_puts ends ============
  1473                           
  1474                           
  1475 ;; *************** function _lcd_clear *****************
  1476 ;; Defined at:
  1477 ;;		line 69 in file "C:\Users\petir\Documents\PIC_PROG\C_PuertoSerial\C_PuertoSerial_usart.c"
  1478 ;; Parameters:    Size  Location     Type
  1479 ;;		None
  1480 ;; Auto vars:     Size  Location     Type
  1481 ;;		None
  1482 ;; Return value:  Size  Location     Type
  1483 ;;		None               void
  1484 ;; Registers used:
  1485 ;;		wreg, status,2, status,0, pclath, cstack
  1486 ;; Tracked objects:
  1487 ;;		On entry : 0/0
  1488 ;;		On exit  : 0/0
  1489 ;;		Unchanged: FFF9F/0
  1490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1491 ;;      Params:         0       0       0       0       0
  1492 ;;      Locals:         0       0       0       0       0
  1493 ;;      Temps:          0       0       0       0       0
  1494 ;;      Totals:         0       0       0       0       0
  1495 ;;Total ram usage:        0 bytes
  1496 ;; Hardware stack levels used:    1
  1497 ;; Hardware stack levels required when called:    3
  1498 ;; This function calls:
  1499 ;;		_lcd_write
  1500 ;;		_pause
  1501 ;; This function is called by:
  1502 ;;		_main
  1503 ;; This function uses a non-reentrant model
  1504 ;;
  1505  02ED                     _lcd_clear:	
  1506                           
  1507                           ;C_PuertoSerial_usart.c: 70: RD7=0;
  1508                           
  1509                           ; Regs used in _lcd_clear: [wreg+status,2+status,0+pclath+cstack]
  1510  02ED  1283               	bcf	3,5	;RP0=0, select bank0
  1511  02EE  1303               	bcf	3,6	;RP1=0, select bank0
  1512  02EF  3001               	movlw	1
  1513  02F0  1388               	bcf	8,7
  1514                           
  1515                           ;C_PuertoSerial_usart.c: 71: lcd_write(0x1);
  1516  02F1  2310  120A  118A   	fcall	_lcd_write
  1517                           
  1518                           ;C_PuertoSerial_usart.c: 72: pause(2);
  1519  02F4  3002               	movlw	2
  1520  02F5  00F0               	movwf	?_pause
  1521  02F6  01F1               	clrf	?_pause+1
  1522  02F7  2B22               	ljmp	l3305
  1523  02F8                     __end_of_lcd_clear:	
  1524  02F8                     __ptext354:	
  1525 ;; =============== function _lcd_goto ends ============
  1526                           
  1527                           
  1528 ;; *************** function _lcd_puts *****************
  1529 ;; Defined at:
  1530 ;;		line 76 in file "C:\Users\petir\Documents\PIC_PROG\C_PuertoSerial\C_PuertoSerial_usart.c"
  1531 ;; Parameters:    Size  Location     Type
  1532 ;;  s               1    wreg     PTR const unsigned char 
  1533 ;;		 -> ROM(8192), STR_5(5), 
  1534 ;; Auto vars:     Size  Location     Type
  1535 ;;  s               1    5[COMMON] PTR const unsigned char 
  1536 ;;		 -> ROM(8192), STR_5(5), 
  1537 ;; Return value:  Size  Location     Type
  1538 ;;		None               void
  1539 ;; Registers used:
  1540 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1541 ;; Tracked objects:
  1542 ;;		On entry : 160/0
  1543 ;;		On exit  : 160/0
  1544 ;;		Unchanged: FFE9F/0
  1545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1546 ;;      Params:         0       0       0       0       0
  1547 ;;      Locals:         1       0       0       0       0
  1548 ;;      Temps:          0       0       0       0       0
  1549 ;;      Totals:         1       0       0       0       0
  1550 ;;Total ram usage:        1 bytes
  1551 ;; Hardware stack levels used:    1
  1552 ;; Hardware stack levels required when called:    3
  1553 ;; This function calls:
  1554 ;;		_lcd_write
  1555 ;; This function is called by:
  1556 ;;		_main
  1557 ;; This function uses a non-reentrant model
  1558 ;;
  1559  02F8                     _lcd_puts:	
  1560                           
  1561                           ; Regs used in _lcd_puts: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1562                           ;lcd_puts@s stored from wreg
  1563  02F8  00F5               	movwf	lcd_puts@s
  1564                           
  1565                           ;C_PuertoSerial_usart.c: 77: RD7=1;
  1566  02F9  1788               	bsf	8,7
  1567  02FA                     l3541:	
  1568                           ;C_PuertoSerial_usart.c: 78: while(*s)
  1569                           
  1570  02FA  0875               	movf	lcd_puts@s,w
  1571  02FB  0084               	movwf	4
  1572  02FC  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  1573  0301  3800               	iorlw	0
  1574  0302  1903               	btfsc	3,2
  1575  0303  0008               	return
  1576                           
  1577                           ;C_PuertoSerial_usart.c: 79: lcd_write(*s++);
  1578  0304  0875               	movf	lcd_puts@s,w
  1579  0305  0084               	movwf	4
  1580  0306  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  1581  030B  2310  120A  118A   	fcall	_lcd_write
  1582  030E  0AF5               	incf	lcd_puts@s,f
  1583  030F  2AFA               	goto	l3541
  1584  0310                     __end_of_lcd_puts:	
  1585  0310                     __ptext356:	
  1586 ;; =============== function _lcd_clear ends ============
  1587                           
  1588                           
  1589 ;; *************** function _lcd_write *****************
  1590 ;; Defined at:
  1591 ;;		line 60 in file "C:\Users\petir\Documents\PIC_PROG\C_PuertoSerial\C_PuertoSerial_usart.c"
  1592 ;; Parameters:    Size  Location     Type
  1593 ;;  c               1    wreg     unsigned char 
  1594 ;; Auto vars:     Size  Location     Type
  1595 ;;  c               1    4[COMMON] unsigned char 
  1596 ;; Return value:  Size  Location     Type
  1597 ;;		None               void
  1598 ;; Registers used:
  1599 ;;		wreg, status,2, status,0, pclath, cstack
  1600 ;; Tracked objects:
  1601 ;;		On entry : 0/0
  1602 ;;		On exit  : 60/0
  1603 ;;		Unchanged: FFF9F/0
  1604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1605 ;;      Params:         0       0       0       0       0
  1606 ;;      Locals:         1       0       0       0       0
  1607 ;;      Temps:          0       0       0       0       0
  1608 ;;      Totals:         1       0       0       0       0
  1609 ;;Total ram usage:        1 bytes
  1610 ;; Hardware stack levels used:    1
  1611 ;; Hardware stack levels required when called:    2
  1612 ;; This function calls:
  1613 ;;		_pause
  1614 ;; This function is called by:
  1615 ;;		_lcd_clear
  1616 ;;		_lcd_puts
  1617 ;;		_lcd_goto
  1618 ;;		_main
  1619 ;; This function uses a non-reentrant model
  1620 ;;
  1621  0310                     _lcd_write:	
  1622                           
  1623                           ; Regs used in _lcd_write: [wreg+status,2+status,0+pclath+cstack]
  1624                           ;lcd_write@c stored from wreg
  1625  0310  00F4               	movwf	lcd_write@c
  1626                           
  1627                           ;C_PuertoSerial_usart.c: 61: pause(1);
  1628  0311  01F0               	clrf	?_pause
  1629  0312  0AF0               	incf	?_pause,f
  1630  0313  01F1               	clrf	?_pause+1
  1631  0314  2322               	fcall	_pause
  1632                           
  1633                           ;C_PuertoSerial_usart.c: 62: PORTD=((c >> 4) & 0x0F);
  1634  0315  0E74               	swapf	lcd_write@c,w
  1635  0316  390F               	andlw	15
  1636  0317  1283               	bcf	3,5	;RP0=0, select bank0
  1637  0318  1303               	bcf	3,6	;RP1=0, select bank0
  1638  0319  0088               	movwf	8	;volatile
  1639                           
  1640                           ;C_PuertoSerial_usart.c: 63: ((RD6=1),(RD6=0));
  1641  031A  1708               	bsf	8,6
  1642  031B  1308               	bcf	8,6
  1643                           
  1644                           ;C_PuertoSerial_usart.c: 64: PORTD=(c & 0x0F);
  1645  031C  0874               	movf	lcd_write@c,w
  1646  031D  390F               	andlw	15
  1647  031E  0088               	movwf	8	;volatile
  1648                           
  1649                           ;C_PuertoSerial_usart.c: 65: ((RD6=1),(RD6=0));
  1650  031F  1708               	bsf	8,6
  1651  0320  1308               	bcf	8,6
  1652  0321  0008               	return
  1653  0322                     __end_of_lcd_write:	
  1654  0322                     __ptext362:	
  1655 ;; =============== function _gets_Serial ends ============
  1656                           
  1657                           
  1658 ;; *************** function _pause *****************
  1659 ;; Defined at:
  1660 ;;		line 21 in file "C:\Users\petir\Documents\PIC_PROG\C_PuertoSerial\C_PuertoSerial_usart.c"
  1661 ;; Parameters:    Size  Location     Type
  1662 ;;  msvalue         2    0[COMMON] unsigned short 
  1663 ;; Auto vars:     Size  Location     Type
  1664 ;;  x               2    2[COMMON] unsigned short 
  1665 ;; Return value:  Size  Location     Type
  1666 ;;		None               void
  1667 ;; Registers used:
  1668 ;;		wreg, status,2, status,0, pclath, cstack
  1669 ;; Tracked objects:
  1670 ;;		On entry : 0/0
  1671 ;;		On exit  : 0/0
  1672 ;;		Unchanged: FFF9F/0
  1673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1674 ;;      Params:         2       0       0       0       0
  1675 ;;      Locals:         2       0       0       0       0
  1676 ;;      Temps:          0       0       0       0       0
  1677 ;;      Totals:         4       0       0       0       0
  1678 ;;Total ram usage:        4 bytes
  1679 ;; Hardware stack levels used:    1
  1680 ;; Hardware stack levels required when called:    1
  1681 ;; This function calls:
  1682 ;;		_msecbase
  1683 ;; This function is called by:
  1684 ;;		_lcd_write
  1685 ;;		_lcd_clear
  1686 ;;		_main
  1687 ;; This function uses a non-reentrant model
  1688 ;;
  1689  0322                     _pause:	
  1690  0322                     l3305:	
  1691                           ; Regs used in _pause: [wreg+status,2+status,0+pclath+cstack]
  1692                           
  1693                           
  1694                           ;C_PuertoSerial_usart.c: 22: for (unsigned short x=0; x<=msvalue; x++) msecbase();
  1695  0322  01F2               	clrf	pause@x
  1696  0323  01F3               	clrf	pause@x+1
  1697  0324                     l3311:	
  1698  0324  0873               	movf	pause@x+1,w
  1699  0325  0271               	subwf	pause@msvalue+1,w
  1700  0326  1D03               	skipz
  1701  0327  2B2A               	goto	u835
  1702  0328  0872               	movf	pause@x,w
  1703  0329  0270               	subwf	pause@msvalue,w
  1704  032A                     u835:	
  1705  032A  1C03               	btfss	3,0
  1706  032B  0008               	return
  1707  032C  2333  120A  118A   	fcall	_msecbase
  1708  032F  0AF2               	incf	pause@x,f
  1709  0330  1903               	skipnz
  1710  0331  0AF3               	incf	pause@x+1,f
  1711  0332  2B24               	goto	l3311
  1712  0333                     __end_of_pause:	
  1713  0333                     __ptext370:	
  1714 ;; =============== function _putch ends ============
  1715                           
  1716                           
  1717 ;; *************** function _msecbase *****************
  1718 ;; Defined at:
  1719 ;;		line 12 in file "C:\Users\petir\Documents\PIC_PROG\C_PuertoSerial\C_PuertoSerial_usart.c"
  1720 ;; Parameters:    Size  Location     Type
  1721 ;;		None
  1722 ;; Auto vars:     Size  Location     Type
  1723 ;;		None
  1724 ;; Return value:  Size  Location     Type
  1725 ;;		None               void
  1726 ;; Registers used:
  1727 ;;		wreg
  1728 ;; Tracked objects:
  1729 ;;		On entry : 0/0
  1730 ;;		On exit  : 0/0
  1731 ;;		Unchanged: FFF9F/0
  1732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1733 ;;      Params:         0       0       0       0       0
  1734 ;;      Locals:         0       0       0       0       0
  1735 ;;      Temps:          0       0       0       0       0
  1736 ;;      Totals:         0       0       0       0       0
  1737 ;;Total ram usage:        0 bytes
  1738 ;; Hardware stack levels used:    1
  1739 ;; This function calls:
  1740 ;;		Nothing
  1741 ;; This function is called by:
  1742 ;;		_pause
  1743 ;; This function uses a non-reentrant model
  1744 ;;
  1745  0333                     _msecbase:	
  1746                           
  1747                           ;C_PuertoSerial_usart.c: 15: OPTION_REG = 0b00000001;
  1748                           
  1749                           ; Regs used in _msecbase: [wreg]
  1750  0333  3001               	movlw	1
  1751  0334  1683               	bsf	3,5	;RP0=1, select bank1
  1752  0335  1303               	bcf	3,6	;RP1=0, select bank1
  1753  0336  0081               	movwf	1	;volatile
  1754                           
  1755                           ;C_PuertoSerial_usart.c: 16: TMR0 = 0x07;
  1756  0337  3007               	movlw	7
  1757  0338  1283               	bcf	3,5	;RP0=0, select bank0
  1758  0339  0081               	movwf	1	;volatile
  1759  033A                     l1057:	
  1760                           ;C_PuertoSerial_usart.c: 17: while(!T0IF);
  1761                           
  1762  033A  1D0B               	btfss	11,2
  1763  033B  2B3A               	goto	l1057
  1764                           
  1765                           ;C_PuertoSerial_usart.c: 18: T0IF = 0;
  1766  033C  110B               	bcf	11,2
  1767  033D  0008               	return
  1768  033E                     __end_of_msecbase:	
  1769                           
  1770                           	psect	text357
  1771  03BF                     __ptext357:	
  1772 ;; =============== function _lcd_write ends ============
  1773                           
  1774                           
  1775 ;; *************** function ___awtoft *****************
  1776 ;; Defined at:
  1777 ;;		line 33 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\awtoft.c"
  1778 ;; Parameters:    Size  Location     Type
  1779 ;;  c               2    8[COMMON] int 
  1780 ;; Auto vars:     Size  Location     Type
  1781 ;;  sign            1   11[COMMON] unsigned char 
  1782 ;; Return value:  Size  Location     Type
  1783 ;;                  3    8[COMMON] float 
  1784 ;; Registers used:
  1785 ;;		wreg, status,2, status,0, pclath, cstack
  1786 ;; Tracked objects:
  1787 ;;		On entry : 60/0
  1788 ;;		On exit  : 60/0
  1789 ;;		Unchanged: FFF9F/0
  1790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1791 ;;      Params:         3       0       0       0       0
  1792 ;;      Locals:         1       0       0       0       0
  1793 ;;      Temps:          0       0       0       0       0
  1794 ;;      Totals:         4       0       0       0       0
  1795 ;;Total ram usage:        4 bytes
  1796 ;; Hardware stack levels used:    1
  1797 ;; Hardware stack levels required when called:    1
  1798 ;; This function calls:
  1799 ;;		___ftpack
  1800 ;; This function is called by:
  1801 ;;		_main
  1802 ;; This function uses a non-reentrant model
  1803 ;;
  1804  03BF                     ___awtoft:	
  1805                           
  1806                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  1807  03BF  01FB               	clrf	___awtoft@sign
  1808  03C0  1FF9               	btfss	___awtoft@c+1,7
  1809  03C1  2BC9               	goto	l3513
  1810  03C2  09F8               	comf	___awtoft@c,f
  1811  03C3  09F9               	comf	___awtoft@c+1,f
  1812  03C4  0AF8               	incf	___awtoft@c,f
  1813  03C5  1903               	skipnz
  1814  03C6  0AF9               	incf	___awtoft@c+1,f
  1815  03C7  01FB               	clrf	___awtoft@sign
  1816  03C8  0AFB               	incf	___awtoft@sign,f
  1817  03C9                     l3513:	
  1818  03C9  0878               	movf	___awtoft@c,w
  1819  03CA  00F0               	movwf	?___ftpack
  1820  03CB  0879               	movf	___awtoft@c+1,w
  1821  03CC  00F1               	movwf	?___ftpack+1
  1822  03CD  308E               	movlw	142
  1823  03CE  01F2               	clrf	?___ftpack+2
  1824  03CF  00F3               	movwf	?___ftpack+3
  1825  03D0  087B               	movf	___awtoft@sign,w
  1826  03D1  00F4               	movwf	?___ftpack+4
  1827  03D2  2449               	fcall	___ftpack
  1828  03D3  0870               	movf	?___ftpack,w
  1829  03D4  00F8               	movwf	?___awtoft
  1830  03D5  0871               	movf	?___ftpack+1,w
  1831  03D6  00F9               	movwf	?___awtoft+1
  1832  03D7  0872               	movf	?___ftpack+2,w
  1833  03D8  00FA               	movwf	?___awtoft+2
  1834  03D9  0008               	return
  1835  03DA                     __end_of___awtoft:	
  1836  03DA                     __ptext358:	
  1837 ;; =============== function ___awtoft ends ============
  1838                           
  1839                           
  1840 ;; *************** function ___ftmul *****************
  1841 ;; Defined at:
  1842 ;;		line 52 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\ftmul.c"
  1843 ;; Parameters:    Size  Location     Type
  1844 ;;  f1              3    0[BANK0 ] float 
  1845 ;;  f2              3    3[BANK0 ] float 
  1846 ;; Auto vars:     Size  Location     Type
  1847 ;;  f3_as_produc    3   10[BANK0 ] unsigned um
  1848 ;;  sign            1   14[BANK0 ] unsigned char 
  1849 ;;  cntr            1   13[BANK0 ] unsigned char 
  1850 ;;  exp             1    9[BANK0 ] unsigned char 
  1851 ;; Return value:  Size  Location     Type
  1852 ;;                  3    0[BANK0 ] float 
  1853 ;; Registers used:
  1854 ;;		wreg, status,2, status,0, pclath, cstack
  1855 ;; Tracked objects:
  1856 ;;		On entry : 60/0
  1857 ;;		On exit  : 60/0
  1858 ;;		Unchanged: FFF9F/0
  1859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1860 ;;      Params:         0       6       0       0       0
  1861 ;;      Locals:         0       6       0       0       0
  1862 ;;      Temps:          0       3       0       0       0
  1863 ;;      Totals:         0      15       0       0       0
  1864 ;;Total ram usage:       15 bytes
  1865 ;; Hardware stack levels used:    1
  1866 ;; Hardware stack levels required when called:    1
  1867 ;; This function calls:
  1868 ;;		___ftpack
  1869 ;; This function is called by:
  1870 ;;		_main
  1871 ;; This function uses a non-reentrant model
  1872 ;;
  1873  03DA                     ___ftmul:	
  1874                           
  1875                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  1876  03DA  0820               	movf	___ftmul@f1,w
  1877  03DB  00A6               	movwf	??___ftmul
  1878  03DC  0821               	movf	___ftmul@f1+1,w
  1879  03DD  00A7               	movwf	??___ftmul+1
  1880  03DE  0822               	movf	___ftmul@f1+2,w
  1881  03DF  00A8               	movwf	??___ftmul+2
  1882  03E0  1003               	clrc
  1883  03E1  0D27               	rlf	??___ftmul+1,w
  1884  03E2  0D28               	rlf	??___ftmul+2,w
  1885  03E3  00A9               	movwf	___ftmul@exp
  1886  03E4  08A9               	movf	___ftmul@exp,f
  1887  03E5  1D03               	skipz
  1888  03E6  2BEB               	goto	l3455
  1889  03E7  01A0               	clrf	?___ftmul
  1890  03E8  01A1               	clrf	?___ftmul+1
  1891  03E9  01A2               	clrf	?___ftmul+2
  1892  03EA  0008               	return
  1893  03EB                     l3455:	
  1894  03EB  0823               	movf	___ftmul@f2,w
  1895  03EC  00A6               	movwf	??___ftmul
  1896  03ED  0824               	movf	___ftmul@f2+1,w
  1897  03EE  00A7               	movwf	??___ftmul+1
  1898  03EF  0825               	movf	___ftmul@f2+2,w
  1899  03F0  00A8               	movwf	??___ftmul+2
  1900  03F1  1003               	clrc
  1901  03F2  0D27               	rlf	??___ftmul+1,w
  1902  03F3  0D28               	rlf	??___ftmul+2,w
  1903  03F4  00AE               	movwf	___ftmul@sign
  1904  03F5  08AE               	movf	___ftmul@sign,f
  1905  03F6  1D03               	skipz
  1906  03F7  2BFC               	goto	l3461
  1907  03F8  01A0               	clrf	?___ftmul
  1908  03F9  01A1               	clrf	?___ftmul+1
  1909  03FA  01A2               	clrf	?___ftmul+2
  1910  03FB  0008               	return
  1911  03FC                     l3461:	
  1912  03FC  082E               	movf	___ftmul@sign,w
  1913  03FD  3E7B               	addlw	123
  1914  03FE  07A9               	addwf	___ftmul@exp,f
  1915  03FF  0822               	movf	___ftmul@f1+2,w
  1916  0400  00AE               	movwf	___ftmul@sign
  1917  0401  0825               	movf	___ftmul@f2+2,w
  1918  0402  06AE               	xorwf	___ftmul@sign,f
  1919  0403  3080               	movlw	128
  1920  0404  05AE               	andwf	___ftmul@sign,f
  1921  0405  3007               	movlw	7
  1922  0406  17A1               	bsf	___ftmul@f1+1,7
  1923  0407  17A4               	bsf	___ftmul@f2+1,7
  1924  0408  01A5               	clrf	___ftmul@f2+2
  1925  0409  01AA               	clrf	___ftmul@f3_as_product
  1926  040A  01AB               	clrf	___ftmul@f3_as_product+1
  1927  040B  01AC               	clrf	___ftmul@f3_as_product+2
  1928  040C  00AD               	movwf	___ftmul@cntr
  1929  040D                     l3479:	
  1930  040D  1C20               	btfss	___ftmul@f1,0
  1931  040E  2C17               	goto	l3483
  1932  040F  0823               	movf	___ftmul@f2,w
  1933  0410  2487  120A  118A   	fcall	PL2	;call to abstracted procedure
  1934  0413  1803               	skipnc
  1935  0414  0A25               	incf	___ftmul@f2+2,w
  1936  0415  1D03               	btfss	3,2
  1937  0416  07AC               	addwf	___ftmul@f3_as_product+2,f
  1938  0417                     l3483:	
  1939  0417  1003               	clrc
  1940  0418  0CA2               	rrf	___ftmul@f1+2,f
  1941  0419  0CA1               	rrf	___ftmul@f1+1,f
  1942  041A  0CA0               	rrf	___ftmul@f1,f
  1943  041B  1003               	clrc
  1944  041C  0DA3               	rlf	___ftmul@f2,f
  1945  041D  0DA4               	rlf	___ftmul@f2+1,f
  1946  041E  0DA5               	rlf	___ftmul@f2+2,f
  1947  041F  0BAD               	decfsz	___ftmul@cntr,f
  1948  0420  2C0D               	goto	l3479
  1949  0421  3009               	movlw	9
  1950  0422  00AD               	movwf	___ftmul@cntr
  1951  0423                     l3491:	
  1952  0423  1C20               	btfss	___ftmul@f1,0
  1953  0424  2C2D               	goto	l3495
  1954  0425  0823               	movf	___ftmul@f2,w
  1955  0426  2487  120A  118A   	fcall	PL2	;call to abstracted procedure
  1956  0429  1803               	skipnc
  1957  042A  0A25               	incf	___ftmul@f2+2,w
  1958  042B  1D03               	btfss	3,2
  1959  042C  07AC               	addwf	___ftmul@f3_as_product+2,f
  1960  042D                     l3495:	
  1961  042D  1003               	clrc
  1962  042E  0CA2               	rrf	___ftmul@f1+2,f
  1963  042F  0CA1               	rrf	___ftmul@f1+1,f
  1964  0430  0CA0               	rrf	___ftmul@f1,f
  1965  0431  1003               	clrc
  1966  0432  0CAC               	rrf	___ftmul@f3_as_product+2,f
  1967  0433  0CAB               	rrf	___ftmul@f3_as_product+1,f
  1968  0434  0CAA               	rrf	___ftmul@f3_as_product,f
  1969  0435  0BAD               	decfsz	___ftmul@cntr,f
  1970  0436  2C23               	goto	l3491
  1971  0437  082A               	movf	___ftmul@f3_as_product,w
  1972  0438  00F0               	movwf	?___ftpack
  1973  0439  082B               	movf	___ftmul@f3_as_product+1,w
  1974  043A  00F1               	movwf	?___ftpack+1
  1975  043B  082C               	movf	___ftmul@f3_as_product+2,w
  1976  043C  00F2               	movwf	?___ftpack+2
  1977  043D  0829               	movf	___ftmul@exp,w
  1978  043E  00F3               	movwf	?___ftpack+3
  1979  043F  082E               	movf	___ftmul@sign,w
  1980  0440  00F4               	movwf	?___ftpack+4
  1981  0441  2449               	fcall	___ftpack
  1982  0442  0870               	movf	?___ftpack,w
  1983  0443  00A0               	movwf	?___ftmul
  1984  0444  0871               	movf	?___ftpack+1,w
  1985  0445  00A1               	movwf	?___ftmul+1
  1986  0446  0872               	movf	?___ftpack+2,w
  1987  0447  00A2               	movwf	?___ftmul+2
  1988  0448  0008               	return
  1989  0449                     __end_of___ftmul:	
  1990  0449                     __ptext363:	
  1991 ;; =============== function _pause ends ============
  1992                           
  1993                           
  1994 ;; *************** function ___ftpack *****************
  1995 ;; Defined at:
  1996 ;;		line 63 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\float.c"
  1997 ;; Parameters:    Size  Location     Type
  1998 ;;  arg             3    0[COMMON] unsigned um
  1999 ;;  exp             1    3[COMMON] unsigned char 
  2000 ;;  sign            1    4[COMMON] unsigned char 
  2001 ;; Auto vars:     Size  Location     Type
  2002 ;;		None
  2003 ;; Return value:  Size  Location     Type
  2004 ;;                  3    0[COMMON] float 
  2005 ;; Registers used:
  2006 ;;		wreg, status,2, status,0
  2007 ;; Tracked objects:
  2008 ;;		On entry : 60/0
  2009 ;;		On exit  : 60/0
  2010 ;;		Unchanged: FFF9F/0
  2011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2012 ;;      Params:         5       0       0       0       0
  2013 ;;      Locals:         0       0       0       0       0
  2014 ;;      Temps:          3       0       0       0       0
  2015 ;;      Totals:         8       0       0       0       0
  2016 ;;Total ram usage:        8 bytes
  2017 ;; Hardware stack levels used:    1
  2018 ;; This function calls:
  2019 ;;		Nothing
  2020 ;; This function is called by:
  2021 ;;		___ftmul
  2022 ;;		___awtoft
  2023 ;; This function uses a non-reentrant model
  2024 ;;
  2025  0449                     ___ftpack:	
  2026                           
  2027                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  2028  0449  0873               	movf	___ftpack@exp,w
  2029  044A  1903               	btfsc	3,2
  2030  044B  2C51               	goto	l3281
  2031  044C  0872               	movf	___ftpack@arg+2,w
  2032  044D  0471               	iorwf	___ftpack@arg+1,w
  2033  044E  0470               	iorwf	___ftpack@arg,w
  2034  044F  1D03               	skipz
  2035  0450  2C5A               	goto	l3287
  2036  0451                     l3281:	
  2037  0451  01F0               	clrf	?___ftpack
  2038  0452  01F1               	clrf	?___ftpack+1
  2039  0453  01F2               	clrf	?___ftpack+2
  2040  0454  0008               	return
  2041  0455                     l3285:	
  2042  0455  0AF3               	incf	___ftpack@exp,f
  2043  0456  1003               	clrc
  2044  0457  0CF2               	rrf	___ftpack@arg+2,f
  2045  0458  0CF1               	rrf	___ftpack@arg+1,f
  2046  0459  0CF0               	rrf	___ftpack@arg,f
  2047  045A                     l3287:	
  2048  045A  30FE               	movlw	254
  2049  045B  0572               	andwf	___ftpack@arg+2,w
  2050  045C  1903               	btfsc	3,2
  2051  045D  2C69               	goto	l3291
  2052  045E  2C55               	goto	l3285
  2053  045F                     l3289:	
  2054  045F  0AF3               	incf	___ftpack@exp,f
  2055  0460  0AF0               	incf	___ftpack@arg,f
  2056  0461  1903               	skipnz
  2057  0462  0AF1               	incf	___ftpack@arg+1,f
  2058  0463  1903               	skipnz
  2059  0464  0AF2               	incf	___ftpack@arg+2,f
  2060  0465  1003               	clrc
  2061  0466  0CF2               	rrf	___ftpack@arg+2,f
  2062  0467  0CF1               	rrf	___ftpack@arg+1,f
  2063  0468  0CF0               	rrf	___ftpack@arg,f
  2064  0469                     l3291:	
  2065  0469  30FF               	movlw	255
  2066  046A  0572               	andwf	___ftpack@arg+2,w
  2067  046B  1903               	btfsc	3,2
  2068  046C  2C73               	goto	l3295
  2069  046D  2C5F               	goto	l3289
  2070  046E                     l3293:	
  2071  046E  03F3               	decf	___ftpack@exp,f
  2072  046F  1003               	clrc
  2073  0470  0DF0               	rlf	___ftpack@arg,f
  2074  0471  0DF1               	rlf	___ftpack@arg+1,f
  2075  0472  0DF2               	rlf	___ftpack@arg+2,f
  2076  0473                     l3295:	
  2077  0473  1FF1               	btfss	___ftpack@arg+1,7
  2078  0474  2C6E               	goto	l3293
  2079  0475  1C73               	btfss	___ftpack@exp,0
  2080  0476  13F1               	bcf	___ftpack@arg+1,7
  2081  0477  1003               	clrc
  2082  0478  0CF3               	rrf	___ftpack@exp,f
  2083  0479  0873               	movf	___ftpack@exp,w
  2084  047A  00F7               	movwf	??___ftpack+2
  2085  047B  01F6               	clrf	??___ftpack+1
  2086  047C  01F5               	clrf	??___ftpack
  2087  047D  0875               	movf	??___ftpack,w
  2088  047E  04F0               	iorwf	___ftpack@arg,f
  2089  047F  0876               	movf	??___ftpack+1,w
  2090  0480  04F1               	iorwf	___ftpack@arg+1,f
  2091  0481  0877               	movf	??___ftpack+2,w
  2092  0482  04F2               	iorwf	___ftpack@arg+2,f
  2093  0483  0874               	movf	___ftpack@sign,w
  2094  0484  1D03               	skipz
  2095  0485  17F2               	bsf	___ftpack@arg+2,7
  2096  0486  0008               	return
  2097  0487                     __end_of___ftpack:	
  2098  0487                     PL2:	
  2099  0487  07AA               	addwf	___ftmul@f3_as_product,f
  2100  0488  0824               	movf	___ftmul@f2+1,w
  2101  0489  1103               	clrz
  2102  048A  1803               	skipnc
  2103  048B  0A24               	incf	___ftmul@f2+1,w
  2104  048C  1D03               	btfss	3,2
  2105  048D  07AB               	addwf	___ftmul@f3_as_product+1,f
  2106  048E  0825               	movf	___ftmul@f2+2,w
  2107  048F  1103               	clrz
  2108  0490  0008               	return
  2109                           
  2110                           	psect	text359
  2111  033E                     __ptext359:	
  2112 ;; =============== function ___ftmul ends ============
  2113                           
  2114                           
  2115 ;; *************** function _atoi *****************
  2116 ;; Defined at:
  2117 ;;		line 6 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\atoi.c"
  2118 ;; Parameters:    Size  Location     Type
  2119 ;;  s               1    wreg     PTR const unsigned char 
  2120 ;;		 -> input(17), 
  2121 ;; Auto vars:     Size  Location     Type
  2122 ;;  s               1   13[COMMON] PTR const unsigned char 
  2123 ;;		 -> input(17), 
  2124 ;;  a               2   11[COMMON] int 
  2125 ;;  sign            1   10[COMMON] unsigned char 
  2126 ;; Return value:  Size  Location     Type
  2127 ;;                  2    6[COMMON] int 
  2128 ;; Registers used:
  2129 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2130 ;; Tracked objects:
  2131 ;;		On entry : 160/0
  2132 ;;		On exit  : 160/0
  2133 ;;		Unchanged: FFE9F/0
  2134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2135 ;;      Params:         2       0       0       0       0
  2136 ;;      Locals:         4       0       0       0       0
  2137 ;;      Temps:          2       0       0       0       0
  2138 ;;      Totals:         8       0       0       0       0
  2139 ;;Total ram usage:        8 bytes
  2140 ;; Hardware stack levels used:    1
  2141 ;; Hardware stack levels required when called:    1
  2142 ;; This function calls:
  2143 ;;		___wmul
  2144 ;;		_isdigit
  2145 ;; This function is called by:
  2146 ;;		_main
  2147 ;; This function uses a non-reentrant model
  2148 ;;
  2149  033E                     _atoi:	
  2150                           
  2151                           ; Regs used in _atoi: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2152                           ;atoi@s stored from wreg
  2153  033E  00FD               	movwf	atoi@s
  2154  033F                     l3419:	
  2155  033F  087D               	movf	atoi@s,w
  2156  0340  0084               	movwf	4
  2157  0341  0800               	movf	0,w
  2158  0342  3A20               	xorlw	32
  2159  0343  1D03               	btfss	3,2
  2160  0344  2B47               	goto	l3421
  2161  0345                     l3417:	
  2162  0345  0AFD               	incf	atoi@s,f
  2163  0346  2B3F               	goto	l3419
  2164  0347                     l3421:	
  2165  0347  087D               	movf	atoi@s,w
  2166  0348  0084               	movwf	4
  2167  0349  0800               	movf	0,w
  2168  034A  3A09               	xorlw	9
  2169  034B  1903               	skipnz
  2170  034C  2B45               	goto	l3417
  2171  034D  01FB               	clrf	atoi@a
  2172  034E  01FC               	clrf	atoi@a+1
  2173  034F  01FA               	clrf	atoi@sign
  2174  0350  087D               	movf	atoi@s,w
  2175  0351  0084               	movwf	4
  2176  0352  0800               	movf	0,w
  2177  0353  3A2D               	xorlw	45
  2178  0354  1D03               	skipz
  2179  0355  2B58               	goto	l3429
  2180  0356  0AFA               	incf	atoi@sign,f
  2181  0357  2B82               	goto	l3431
  2182  0358                     l3429:	
  2183  0358  087D               	movf	atoi@s,w
  2184  0359  0084               	movwf	4
  2185  035A  0800               	movf	0,w
  2186  035B  3A2B               	xorlw	43
  2187  035C  1903               	btfsc	3,2
  2188  035D  2B82               	goto	l3431
  2189  035E                     l3437:	
  2190  035E  087D               	movf	atoi@s,w
  2191  035F  0084               	movwf	4
  2192  0360  0800               	movf	0,w
  2193  0361  2398  120A  118A   	fcall	_isdigit
  2194  0364  1C03               	btfss	3,0
  2195  0365  2B84               	goto	l3439
  2196  0366  087D               	movf	atoi@s,w
  2197  0367  0084               	movwf	4
  2198  0368  087C               	movf	atoi@a+1,w
  2199  0369  00F1               	movwf	?___wmul+1
  2200  036A  087B               	movf	atoi@a,w
  2201  036B  00F0               	movwf	?___wmul
  2202  036C  300A               	movlw	10
  2203  036D  00F2               	movwf	?___wmul+2
  2204  036E  01F3               	clrf	?___wmul+3
  2205  036F  23A6  120A  118A   	fcall	___wmul
  2206  0372  0800               	movf	0,w
  2207  0373  0770               	addwf	?___wmul,w
  2208  0374  00F8               	movwf	??_atoi
  2209  0375  3000               	movlw	0
  2210  0376  1803               	skipnc
  2211  0377  3001               	movlw	1
  2212  0378  0771               	addwf	?___wmul+1,w
  2213  0379  00F9               	movwf	??_atoi+1
  2214  037A  0878               	movf	??_atoi,w
  2215  037B  3ED0               	addlw	208
  2216  037C  00FB               	movwf	atoi@a
  2217  037D  0879               	movf	??_atoi+1,w
  2218  037E  1803               	skipnc
  2219  037F  3E01               	addlw	1
  2220  0380  3EFF               	addlw	255
  2221  0381  00FC               	movwf	atoi@a+1
  2222  0382                     l3431:	
  2223  0382  0AFD               	incf	atoi@s,f
  2224  0383  2B5E               	goto	l3437
  2225  0384                     l3439:	
  2226  0384  087A               	movf	atoi@sign,w
  2227  0385  1903               	btfsc	3,2
  2228  0386  2B93               	goto	l3445
  2229  0387  097B               	comf	atoi@a,w
  2230  0388  00F8               	movwf	??_atoi
  2231  0389  097C               	comf	atoi@a+1,w
  2232  038A  00F9               	movwf	??_atoi+1
  2233  038B  0AF8               	incf	??_atoi,f
  2234  038C  1903               	skipnz
  2235  038D  0AF9               	incf	??_atoi+1,f
  2236  038E  0878               	movf	??_atoi,w
  2237  038F  00F6               	movwf	?_atoi
  2238  0390  0879               	movf	??_atoi+1,w
  2239  0391  00F7               	movwf	?_atoi+1
  2240  0392  0008               	return
  2241  0393                     l3445:	
  2242  0393  087C               	movf	atoi@a+1,w
  2243  0394  00F7               	movwf	?_atoi+1
  2244  0395  087B               	movf	atoi@a,w
  2245  0396  00F6               	movwf	?_atoi
  2246  0397  0008               	return
  2247  0398                     __end_of_atoi:	
  2248  0398                     __ptext367:	
  2249 ;; =============== function ___wmul ends ============
  2250                           
  2251                           
  2252 ;; *************** function _isdigit *****************
  2253 ;; Defined at:
  2254 ;;		line 13 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\isdigit.c"
  2255 ;; Parameters:    Size  Location     Type
  2256 ;;  c               1    wreg     unsigned char 
  2257 ;; Auto vars:     Size  Location     Type
  2258 ;;  c               1    1[COMMON] unsigned char 
  2259 ;; Return value:  Size  Location     Type
  2260 ;;		None               void
  2261 ;; Registers used:
  2262 ;;		wreg, status,2, status,0
  2263 ;; Tracked objects:
  2264 ;;		On entry : 160/0
  2265 ;;		On exit  : 160/0
  2266 ;;		Unchanged: FFE9F/0
  2267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2268 ;;      Params:         0       0       0       0       0
  2269 ;;      Locals:         2       0       0       0       0
  2270 ;;      Temps:          0       0       0       0       0
  2271 ;;      Totals:         2       0       0       0       0
  2272 ;;Total ram usage:        2 bytes
  2273 ;; Hardware stack levels used:    1
  2274 ;; This function calls:
  2275 ;;		Nothing
  2276 ;; This function is called by:
  2277 ;;		_atoi
  2278 ;; This function uses a non-reentrant model
  2279 ;;
  2280  0398                     _isdigit:	
  2281                           
  2282                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2283                           ;isdigit@c stored from wreg
  2284  0398  00F1               	movwf	isdigit@c
  2285  0399  303A               	movlw	58
  2286  039A  01F0               	clrf	_isdigit$2400
  2287  039B  0271               	subwf	isdigit@c,w
  2288  039C  1803               	skipnc
  2289  039D  2BA4               	goto	l3211
  2290  039E  3030               	movlw	48
  2291  039F  0271               	subwf	isdigit@c,w
  2292  03A0  1C03               	skipc
  2293  03A1  2BA4               	goto	l3211
  2294  03A2  01F0               	clrf	_isdigit$2400
  2295  03A3  0AF0               	incf	_isdigit$2400,f
  2296  03A4                     l3211:	
  2297  03A4  0C70               	rrf	_isdigit$2400,w
  2298  03A5  0008               	return
  2299  03A6                     __end_of_isdigit:	
  2300  03A6                     __ptext366:	
  2301 ;; =============== function ___lwdiv ends ============
  2302                           
  2303                           
  2304 ;; *************** function ___wmul *****************
  2305 ;; Defined at:
  2306 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\wmul.c"
  2307 ;; Parameters:    Size  Location     Type
  2308 ;;  multiplier      2    0[COMMON] unsigned int 
  2309 ;;  multiplicand    2    2[COMMON] unsigned int 
  2310 ;; Auto vars:     Size  Location     Type
  2311 ;;  product         2    4[COMMON] unsigned int 
  2312 ;; Return value:  Size  Location     Type
  2313 ;;                  2    0[COMMON] unsigned int 
  2314 ;; Registers used:
  2315 ;;		wreg, status,2, status,0
  2316 ;; Tracked objects:
  2317 ;;		On entry : 160/0
  2318 ;;		On exit  : 160/0
  2319 ;;		Unchanged: FFE9F/0
  2320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2321 ;;      Params:         4       0       0       0       0
  2322 ;;      Locals:         2       0       0       0       0
  2323 ;;      Temps:          0       0       0       0       0
  2324 ;;      Totals:         6       0       0       0       0
  2325 ;;Total ram usage:        6 bytes
  2326 ;; Hardware stack levels used:    1
  2327 ;; This function calls:
  2328 ;;		Nothing
  2329 ;; This function is called by:
  2330 ;;		_atoi
  2331 ;; This function uses a non-reentrant model
  2332 ;;
  2333  03A6                     ___wmul:	
  2334                           
  2335                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2336  03A6  01F4               	clrf	___wmul@product
  2337  03A7  01F5               	clrf	___wmul@product+1
  2338  03A8                     l3217:	
  2339  03A8  1C70               	btfss	___wmul@multiplier,0
  2340  03A9  2BB0               	goto	l3221
  2341  03AA  0872               	movf	___wmul@multiplicand,w
  2342  03AB  07F4               	addwf	___wmul@product,f
  2343  03AC  1803               	skipnc
  2344  03AD  0AF5               	incf	___wmul@product+1,f
  2345  03AE  0873               	movf	___wmul@multiplicand+1,w
  2346  03AF  07F5               	addwf	___wmul@product+1,f
  2347  03B0                     l3221:	
  2348  03B0  1003               	clrc
  2349  03B1  0DF2               	rlf	___wmul@multiplicand,f
  2350  03B2  0DF3               	rlf	___wmul@multiplicand+1,f
  2351  03B3  1003               	clrc
  2352  03B4  0CF1               	rrf	___wmul@multiplier+1,f
  2353  03B5  0CF0               	rrf	___wmul@multiplier,f
  2354  03B6  0871               	movf	___wmul@multiplier+1,w
  2355  03B7  0470               	iorwf	___wmul@multiplier,w
  2356  03B8  1D03               	skipz
  2357  03B9  2BA8               	goto	l3217
  2358  03BA  0875               	movf	___wmul@product+1,w
  2359  03BB  00F1               	movwf	?___wmul+1
  2360  03BC  0874               	movf	___wmul@product,w
  2361  03BD  00F0               	movwf	?___wmul
  2362  03BE  0008               	return
  2363  03BF                     __end_of___wmul:	
  2364                           
  2365                           	psect	text360
  2366  0491                     __ptext360:	
  2367 ;; =============== function _atoi ends ============
  2368                           
  2369                           
  2370 ;; *************** function _sprintf *****************
  2371 ;; Defined at:
  2372 ;;		line 488 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\lib\doprnt.c"
  2373 ;; Parameters:    Size  Location     Type
  2374 ;;  sp              1    wreg     PTR unsigned char 
  2375 ;;		 -> main@buffer(15), 
  2376 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  2377 ;;		 -> STR_4(12), STR_3(12), STR_2(13), STR_1(12), 
  2378 ;; Auto vars:     Size  Location     Type
  2379 ;;  sp              1    6[BANK0 ] PTR unsigned char 
  2380 ;;		 -> main@buffer(15), 
  2381 ;;  _val            4    7[BANK0 ] struct .
  2382 ;;  c               1   11[BANK0 ] char 
  2383 ;;  ap              1    5[BANK0 ] PTR void [1]
  2384 ;;		 -> ?_sprintf(2), 
  2385 ;;  prec            1    4[BANK0 ] char 
  2386 ;;  flag            1    3[BANK0 ] unsigned char 
  2387 ;; Return value:  Size  Location     Type
  2388 ;;                  2    0[BANK0 ] int 
  2389 ;; Registers used:
  2390 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2391 ;; Tracked objects:
  2392 ;;		On entry : 60/0
  2393 ;;		On exit  : 160/0
  2394 ;;		Unchanged: FFE9F/0
  2395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2396 ;;      Params:         0       3       0       0       0
  2397 ;;      Locals:         0       9       0       0       0
  2398 ;;      Temps:          2       0       0       0       0
  2399 ;;      Totals:         2      12       0       0       0
  2400 ;;Total ram usage:       14 bytes
  2401 ;; Hardware stack levels used:    1
  2402 ;; Hardware stack levels required when called:    1
  2403 ;; This function calls:
  2404 ;;		___lwdiv
  2405 ;;		___lwmod
  2406 ;; This function is called by:
  2407 ;;		_main
  2408 ;; This function uses a non-reentrant model
  2409 ;;
  2410  0491                     _sprintf:	
  2411                           
  2412                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2413                           ;sprintf@sp stored from wreg
  2414  0491  00A6               	movwf	sprintf@sp
  2415  0492  3021               	movlw	(?_sprintf+1)& (0+255)
  2416  0493  00A5               	movwf	sprintf@ap
  2417  0494                     l3409:	
  2418  0494  0820               	movf	sprintf@f,w
  2419  0495  0AA0               	incf	sprintf@f,f
  2420  0496  0084               	movwf	4
  2421  0497  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  2422  049C  00AB               	movwf	sprintf@c
  2423  049D  08AB               	movf	sprintf@c,f
  2424  049E  1903               	btfsc	3,2
  2425  049F  2D59               	goto	l3411
  2426  04A0  082B               	movf	sprintf@c,w
  2427  04A1  3A25               	xorlw	37
  2428  04A2  1903               	skipnz
  2429  04A3  2CA9               	goto	l3351
  2430  04A4  0826               	movf	sprintf@sp,w
  2431  04A5  25AC  120A  118A   	fcall	PL3	;call to abstracted procedure
  2432  04A8  2C94               	goto	l3409
  2433  04A9                     l3351:	
  2434  04A9  01A3               	clrf	sprintf@flag
  2435  04AA  2CD9               	goto	l3369
  2436  04AB                     l3353:	
  2437  04AB  0825               	movf	sprintf@ap,w
  2438  04AC  0084               	movwf	4
  2439  04AD  1383               	bcf	3,7	;select IRP bank0
  2440  04AE  0800               	movf	0,w
  2441  04AF  00A7               	movwf	sprintf@_val
  2442  04B0  01A8               	clrf	sprintf@_val+1
  2443  04B1  0AA5               	incf	sprintf@ap,f
  2444  04B2  0428               	iorwf	sprintf@_val+1,w
  2445  04B3  1D03               	skipz
  2446  04B4  2CB9               	goto	l1147
  2447  04B5  303C               	movlw	low (STR_6-__stringbase)
  2448  04B6  00A7               	movwf	sprintf@_val
  2449  04B7  3080               	movlw	128
  2450  04B8  00A8               	movwf	sprintf@_val+1
  2451  04B9                     l1147:	
  2452  04B9  0828               	movf	sprintf@_val+1,w
  2453  04BA  00FF               	movwf	127
  2454  04BB  0827               	movf	sprintf@_val,w
  2455  04BC  0084               	movwf	4
  2456  04BD  120A  118A  2003   	fcall	stringtab
      +       120A  118A         
  2457  04C2  3800               	iorlw	0
  2458  04C3  1903               	btfsc	3,2
  2459  04C4  2C94               	goto	l3409
  2460  04C5  0828               	movf	sprintf@_val+1,w
  2461  04C6  00FF               	movwf	127
  2462  04C7  0827               	movf	sprintf@_val,w
  2463  04C8  0084               	movwf	4
  2464  04C9  120A  118A  2003   	fcall	stringtab
      +       120A  118A         
  2465  04CE  00FC               	movwf	??_sprintf
  2466  04CF  0826               	movf	sprintf@sp,w
  2467  04D0  0084               	movwf	4
  2468  04D1  087C               	movf	??_sprintf,w
  2469  04D2  1383               	bcf	3,7	;select IRP bank0
  2470  04D3  0080               	movwf	0
  2471  04D4  0AA7               	incf	sprintf@_val,f
  2472  04D5  1903               	skipnz
  2473  04D6  0AA8               	incf	sprintf@_val+1,f
  2474  04D7  0AA6               	incf	sprintf@sp,f
  2475  04D8  2CB9               	goto	l1147
  2476  04D9                     l3369:	
  2477  04D9  0820               	movf	sprintf@f,w
  2478  04DA  0AA0               	incf	sprintf@f,f
  2479  04DB  0084               	movwf	4
  2480  04DC  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  2481  04E1  00AB               	movwf	sprintf@c
  2482                           
  2483                           ; Switch size 1, requested type "space"
  2484                           ; Number of cases is 4, Range of values is 0 to 115
  2485                           ; switch strategies available:
  2486                           ; Name         Instructions Cycles
  2487                           ; simple_byte           13     7 (average)
  2488                           ; jumptable            260     6 (fixed)
  2489                           ; rangetable           120     6 (fixed)
  2490                           ; spacedrange          238     9 (fixed)
  2491                           ; locatedrange         116     3 (fixed)
  2492                           ;	Chosen strategy is simple_byte
  2493  04E2  3A00               	xorlw	0	; case 0
  2494  04E3  1903               	skipnz
  2495  04E4  2D59               	goto	l3411
  2496  04E5  3A64               	xorlw	100	; case 100
  2497  04E6  1903               	skipnz
  2498  04E7  2CEF               	goto	l3371
  2499  04E8  3A0D               	xorlw	13	; case 105
  2500  04E9  1903               	skipnz
  2501  04EA  2CEF               	goto	l3371
  2502  04EB  3A1A               	xorlw	26	; case 115
  2503  04EC  1903               	skipnz
  2504  04ED  2CAB               	goto	l3353
  2505  04EE  2C94               	goto	l3409
  2506  04EF                     l3371:	
  2507  04EF  0825               	movf	sprintf@ap,w
  2508  04F0  0084               	movwf	4
  2509  04F1  1383               	bcf	3,7	;select IRP bank0
  2510  04F2  0800               	movf	0,w
  2511  04F3  00A7               	movwf	sprintf@_val
  2512  04F4  0A84               	incf	4,f
  2513  04F5  0800               	movf	0,w
  2514  04F6  00A8               	movwf	sprintf@_val+1
  2515  04F7  0AA5               	incf	sprintf@ap,f
  2516  04F8  0AA5               	incf	sprintf@ap,f
  2517  04F9  1FA8               	btfss	sprintf@_val+1,7
  2518  04FA  2D02               	goto	l3381
  2519  04FB  3003               	movlw	3
  2520  04FC  04A3               	iorwf	sprintf@flag,f
  2521  04FD  09A7               	comf	sprintf@_val,f
  2522  04FE  09A8               	comf	sprintf@_val+1,f
  2523  04FF  0AA7               	incf	sprintf@_val,f
  2524  0500  1903               	skipnz
  2525  0501  0AA8               	incf	sprintf@_val+1,f
  2526  0502                     l3381:	
  2527  0502  01AB               	clrf	sprintf@c
  2528  0503  0AAB               	incf	sprintf@c,f
  2529  0504                     l3385:	
  2530  0504  1003               	clrc
  2531  0505  0D2B               	rlf	sprintf@c,w
  2532  0506  3E01               	addlw	low (_dpowers-__stringbase)
  2533  0507  0084               	movwf	4
  2534  0508  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  2535  050D  00FC               	movwf	??_sprintf
  2536  050E  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  2537  0513  00FD               	movwf	??_sprintf+1
  2538  0514  0228               	subwf	sprintf@_val+1,w
  2539  0515  1D03               	skipz
  2540  0516  2D19               	goto	u925
  2541  0517  087C               	movf	??_sprintf,w
  2542  0518  0227               	subwf	sprintf@_val,w
  2543  0519                     u925:	
  2544  0519  1C03               	btfss	3,0
  2545  051A  2D20               	goto	l3393
  2546  051B  0AAB               	incf	sprintf@c,f
  2547  051C  082B               	movf	sprintf@c,w
  2548  051D  3A05               	xorlw	5
  2549  051E  1D03               	skipz
  2550  051F  2D04               	goto	l3385
  2551  0520                     l3393:	
  2552  0520  0823               	movf	sprintf@flag,w
  2553  0521  3903               	andlw	3
  2554  0522  1903               	btfsc	3,2
  2555  0523  2D2A               	goto	l3399
  2556  0524  0826               	movf	sprintf@sp,w
  2557  0525  0084               	movwf	4
  2558  0526  302D               	movlw	45
  2559  0527  1383               	bcf	3,7	;select IRP bank0
  2560  0528  0080               	movwf	0
  2561  0529  0AA6               	incf	sprintf@sp,f
  2562  052A                     l3399:	
  2563  052A  082B               	movf	sprintf@c,w
  2564  052B  00A4               	movwf	sprintf@prec
  2565  052C  2D55               	goto	l3407
  2566  052D                     l3401:	
  2567  052D  300A               	movlw	10
  2568  052E  00F7               	movwf	?___lwmod
  2569  052F  01F8               	clrf	?___lwmod+1
  2570  0530  1003               	clrc
  2571  0531  0D24               	rlf	sprintf@prec,w
  2572  0532  3E01               	addlw	low (_dpowers-__stringbase)
  2573  0533  0084               	movwf	4
  2574  0534  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  2575  0539  00F0               	movwf	?___lwdiv
  2576  053A  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  2577  053F  00F1               	movwf	?___lwdiv+1
  2578  0540  0828               	movf	sprintf@_val+1,w
  2579  0541  00F3               	movwf	?___lwdiv+3
  2580  0542  0827               	movf	sprintf@_val,w
  2581  0543  00F2               	movwf	?___lwdiv+2
  2582  0544  255E  120A  118A   	fcall	___lwdiv
  2583  0547  0871               	movf	?___lwdiv+1,w
  2584  0548  00FA               	movwf	?___lwmod+3
  2585  0549  0870               	movf	?___lwdiv,w
  2586  054A  00F9               	movwf	?___lwmod+2
  2587  054B  2588  120A  118A   	fcall	___lwmod
  2588  054E  0877               	movf	?___lwmod,w
  2589  054F  3E30               	addlw	48
  2590  0550  00AB               	movwf	sprintf@c
  2591  0551  0826               	movf	sprintf@sp,w
  2592  0552  25AC  120A  118A   	fcall	PL3	;call to abstracted procedure
  2593  0555                     l3407:	
  2594  0555  03A4               	decf	sprintf@prec,f
  2595  0556  0F24               	incfsz	sprintf@prec,w
  2596  0557  2D2D               	goto	l3401
  2597  0558  2C94               	goto	l3409
  2598  0559                     l3411:	
  2599  0559  0826               	movf	sprintf@sp,w
  2600  055A  0084               	movwf	4
  2601  055B  1383               	bcf	3,7	;select IRP bank0
  2602  055C  0180               	clrf	0
  2603  055D  0008               	return
  2604  055E                     __end_of_sprintf:	
  2605  055E                     __ptext365:	
  2606 ;; =============== function ___lwmod ends ============
  2607                           
  2608                           
  2609 ;; *************** function ___lwdiv *****************
  2610 ;; Defined at:
  2611 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\lwdiv.c"
  2612 ;; Parameters:    Size  Location     Type
  2613 ;;  divisor         2    0[COMMON] unsigned int 
  2614 ;;  dividend        2    2[COMMON] unsigned int 
  2615 ;; Auto vars:     Size  Location     Type
  2616 ;;  quotient        2    4[COMMON] unsigned int 
  2617 ;;  counter         1    6[COMMON] unsigned char 
  2618 ;; Return value:  Size  Location     Type
  2619 ;;                  2    0[COMMON] unsigned int 
  2620 ;; Registers used:
  2621 ;;		wreg, status,2, status,0
  2622 ;; Tracked objects:
  2623 ;;		On entry : 60/0
  2624 ;;		On exit  : 60/0
  2625 ;;		Unchanged: FFF9F/0
  2626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2627 ;;      Params:         4       0       0       0       0
  2628 ;;      Locals:         3       0       0       0       0
  2629 ;;      Temps:          0       0       0       0       0
  2630 ;;      Totals:         7       0       0       0       0
  2631 ;;Total ram usage:        7 bytes
  2632 ;; Hardware stack levels used:    1
  2633 ;; This function calls:
  2634 ;;		Nothing
  2635 ;; This function is called by:
  2636 ;;		_sprintf
  2637 ;; This function uses a non-reentrant model
  2638 ;;
  2639  055E                     ___lwdiv:	
  2640                           
  2641                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2642  055E  01F4               	clrf	___lwdiv@quotient
  2643  055F  01F5               	clrf	___lwdiv@quotient+1
  2644  0560  0871               	movf	___lwdiv@divisor+1,w
  2645  0561  0470               	iorwf	___lwdiv@divisor,w
  2646  0562  1903               	skipnz
  2647  0563  2D83               	goto	l3253
  2648  0564  01F6               	clrf	___lwdiv@counter
  2649  0565                     L3:	
  2650  0565  0AF6               	incf	___lwdiv@counter,f
  2651  0566  1BF1               	btfsc	___lwdiv@divisor+1,7
  2652  0567  2D6C               	goto	l3241
  2653  0568  1003               	clrc
  2654  0569  0DF0               	rlf	___lwdiv@divisor,f
  2655  056A  0DF1               	rlf	___lwdiv@divisor+1,f
  2656  056B  2D65               	goto	L3
  2657  056C                     l3241:	
  2658  056C  1003               	clrc
  2659  056D  0DF4               	rlf	___lwdiv@quotient,f
  2660  056E  0DF5               	rlf	___lwdiv@quotient+1,f
  2661  056F  0871               	movf	___lwdiv@divisor+1,w
  2662  0570  0273               	subwf	___lwdiv@dividend+1,w
  2663  0571  1D03               	skipz
  2664  0572  2D75               	goto	u705
  2665  0573  0870               	movf	___lwdiv@divisor,w
  2666  0574  0272               	subwf	___lwdiv@dividend,w
  2667  0575                     u705:	
  2668  0575  1C03               	skipc
  2669  0576  2D7F               	goto	L4
  2670  0577  0870               	movf	___lwdiv@divisor,w
  2671  0578  02F2               	subwf	___lwdiv@dividend,f
  2672  0579  0871               	movf	___lwdiv@divisor+1,w
  2673  057A  1C03               	skipc
  2674  057B  03F3               	decf	___lwdiv@dividend+1,f
  2675  057C  02F3               	subwf	___lwdiv@dividend+1,f
  2676  057D  1474               	bsf	___lwdiv@quotient,0
  2677  057E  1003               	clrc
  2678  057F                     L4:	
  2679  057F  0CF1               	rrf	___lwdiv@divisor+1,f
  2680  0580  0CF0               	rrf	___lwdiv@divisor,f
  2681  0581  0BF6               	decfsz	___lwdiv@counter,f
  2682  0582  2D6C               	goto	l3241
  2683  0583                     l3253:	
  2684  0583  0875               	movf	___lwdiv@quotient+1,w
  2685  0584  00F1               	movwf	?___lwdiv+1
  2686  0585  0874               	movf	___lwdiv@quotient,w
  2687  0586  00F0               	movwf	?___lwdiv
  2688  0587  0008               	return
  2689  0588                     __end_of___lwdiv:	
  2690  0588                     __ptext364:	
  2691 ;; =============== function ___ftpack ends ============
  2692                           
  2693                           
  2694 ;; *************** function ___lwmod *****************
  2695 ;; Defined at:
  2696 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\lwmod.c"
  2697 ;; Parameters:    Size  Location     Type
  2698 ;;  divisor         2    7[COMMON] unsigned int 
  2699 ;;  dividend        2    9[COMMON] unsigned int 
  2700 ;; Auto vars:     Size  Location     Type
  2701 ;;  counter         1   11[COMMON] unsigned char 
  2702 ;; Return value:  Size  Location     Type
  2703 ;;                  2    7[COMMON] unsigned int 
  2704 ;; Registers used:
  2705 ;;		wreg, status,2, status,0
  2706 ;; Tracked objects:
  2707 ;;		On entry : 60/0
  2708 ;;		On exit  : 60/0
  2709 ;;		Unchanged: FFF9F/0
  2710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2711 ;;      Params:         4       0       0       0       0
  2712 ;;      Locals:         1       0       0       0       0
  2713 ;;      Temps:          0       0       0       0       0
  2714 ;;      Totals:         5       0       0       0       0
  2715 ;;Total ram usage:        5 bytes
  2716 ;; Hardware stack levels used:    1
  2717 ;; This function calls:
  2718 ;;		Nothing
  2719 ;; This function is called by:
  2720 ;;		_sprintf
  2721 ;; This function uses a non-reentrant model
  2722 ;;
  2723  0588                     ___lwmod:	
  2724                           
  2725                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2726  0588  0878               	movf	___lwmod@divisor+1,w
  2727  0589  0477               	iorwf	___lwmod@divisor,w
  2728  058A  1903               	skipnz
  2729  058B  2DA7               	goto	l3273
  2730  058C  01FB               	clrf	___lwmod@counter
  2731  058D                     L1:	
  2732  058D  0AFB               	incf	___lwmod@counter,f
  2733  058E  1BF8               	btfsc	___lwmod@divisor+1,7
  2734  058F  2D94               	goto	l3265
  2735  0590  1003               	clrc
  2736  0591  0DF7               	rlf	___lwmod@divisor,f
  2737  0592  0DF8               	rlf	___lwmod@divisor+1,f
  2738  0593  2D8D               	goto	L1
  2739  0594                     l3265:	
  2740  0594  0878               	movf	___lwmod@divisor+1,w
  2741  0595  027A               	subwf	___lwmod@dividend+1,w
  2742  0596  1D03               	skipz
  2743  0597  2D9A               	goto	u745
  2744  0598  0877               	movf	___lwmod@divisor,w
  2745  0599  0279               	subwf	___lwmod@dividend,w
  2746  059A                     u745:	
  2747  059A  1C03               	skipc
  2748  059B  2DA3               	goto	L2
  2749  059C  0877               	movf	___lwmod@divisor,w
  2750  059D  02F9               	subwf	___lwmod@dividend,f
  2751  059E  0878               	movf	___lwmod@divisor+1,w
  2752  059F  1C03               	skipc
  2753  05A0  03FA               	decf	___lwmod@dividend+1,f
  2754  05A1  02FA               	subwf	___lwmod@dividend+1,f
  2755  05A2  1003               	clrc
  2756  05A3                     L2:	
  2757  05A3  0CF8               	rrf	___lwmod@divisor+1,f
  2758  05A4  0CF7               	rrf	___lwmod@divisor,f
  2759  05A5  0BFB               	decfsz	___lwmod@counter,f
  2760  05A6  2D94               	goto	l3265
  2761  05A7                     l3273:	
  2762  05A7  087A               	movf	___lwmod@dividend+1,w
  2763  05A8  00F8               	movwf	?___lwmod+1
  2764  05A9  0879               	movf	___lwmod@dividend,w
  2765  05AA  00F7               	movwf	?___lwmod
  2766  05AB  0008               	return
  2767  05AC                     __end_of___lwmod:	
  2768  05AC                     PL3:	
  2769  05AC  0084               	movwf	4
  2770  05AD  082B               	movf	sprintf@c,w
  2771  05AE  1383               	bcf	3,7	;select IRP bank0
  2772  05AF  0080               	movwf	0
  2773  05B0  0AA6               	incf	sprintf@sp,f
  2774  05B1  0008               	return
  2775                           
  2776                           	psect	text361
  2777  02A6                     __ptext361:	
  2778 ;; =============== function _sprintf ends ============
  2779                           
  2780                           
  2781 ;; *************** function _gets_Serial *****************
  2782 ;; Defined at:
  2783 ;;		line 307 in file "C:\Users\petir\Documents\PIC_PROG\C_PuertoSerial\C_PuertoSerial_usart.c"
  2784 ;; Parameters:    Size  Location     Type
  2785 ;;  s               1    wreg     PTR unsigned char 
  2786 ;;		 -> input(17), main@buffer(15), 
  2787 ;; Auto vars:     Size  Location     Type
  2788 ;;  s               1    1[COMMON] PTR unsigned char 
  2789 ;;		 -> input(17), main@buffer(15), 
  2790 ;;  c               1    6[COMMON] unsigned char 
  2791 ;;  i               2    4[COMMON] int 
  2792 ;;  i               2    2[COMMON] int 
  2793 ;; Return value:  Size  Location     Type
  2794 ;;		None               void
  2795 ;; Registers used:
  2796 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2797 ;; Tracked objects:
  2798 ;;		On entry : 0/0
  2799 ;;		On exit  : 0/0
  2800 ;;		Unchanged: FFE00/0
  2801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2802 ;;      Params:         0       0       0       0       0
  2803 ;;      Locals:         6       0       0       0       0
  2804 ;;      Temps:          1       0       0       0       0
  2805 ;;      Totals:         7       0       0       0       0
  2806 ;;Total ram usage:        7 bytes
  2807 ;; Hardware stack levels used:    1
  2808 ;; Hardware stack levels required when called:    1
  2809 ;; This function calls:
  2810 ;;		_getch
  2811 ;; This function is called by:
  2812 ;;		_main
  2813 ;; This function uses a non-reentrant model
  2814 ;;
  2815  02A6                     _gets_Serial:	
  2816                           
  2817                           ; Regs used in _gets_Serial: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2818                           ;gets_Serial@s stored from wreg
  2819  02A6  00F1               	movwf	gets_Serial@s
  2820                           
  2821                           ;C_PuertoSerial_usart.c: 309: for(int i=0; i<=16; i++) *(s+i)=0;
  2822  02A7  01F2               	clrf	gets_Serial@i
  2823  02A8  01F3               	clrf	gets_Serial@i+1
  2824  02A9                     l3319:	
  2825  02A9  0872               	movf	gets_Serial@i,w
  2826  02AA  0771               	addwf	gets_Serial@s,w
  2827  02AB  00F0               	movwf	??_gets_Serial
  2828  02AC  0084               	movwf	4
  2829  02AD  1383               	bcf	3,7	;select IRP bank0
  2830  02AE  0180               	clrf	0
  2831  02AF  0AF2               	incf	gets_Serial@i,f
  2832  02B0  1903               	skipnz
  2833  02B1  0AF3               	incf	gets_Serial@i+1,f
  2834  02B2  0873               	movf	gets_Serial@i+1,w
  2835  02B3  3A80               	xorlw	128
  2836  02B4  00FF               	movwf	127
  2837  02B5  3080               	movlw	128
  2838  02B6  027F               	subwf	127,w
  2839  02B7  1D03               	skipz
  2840  02B8  2ABB               	goto	u845
  2841  02B9  3011               	movlw	17
  2842  02BA  0272               	subwf	gets_Serial@i,w
  2843  02BB                     u845:	
  2844  02BB  1C03               	skipc
  2845  02BC  2AA9               	goto	l3319
  2846                           
  2847                           ;C_PuertoSerial_usart.c: 310: for(int i=0; i<16; i++){
  2848  02BD  01F4               	clrf	gets_Serial@i_1851
  2849  02BE  01F5               	clrf	gets_Serial@i_1851+1
  2850  02BF                     l3331:	
  2851                           
  2852                           ;C_PuertoSerial_usart.c: 311: char c=getch();
  2853  02BF  22E0  120A  118A   	fcall	_getch
  2854  02C2  00F6               	movwf	gets_Serial@c
  2855                           
  2856                           ;C_PuertoSerial_usart.c: 313: if(c==10 | c==13) break;
  2857  02C3  3A0A               	xorlw	10
  2858  02C4  1903               	skipnz
  2859  02C5  0008               	return
  2860  02C6  0876               	movf	gets_Serial@c,w
  2861  02C7  3A0D               	xorlw	13
  2862  02C8  1903               	btfsc	3,2
  2863  02C9  0008               	return
  2864                           
  2865                           ;C_PuertoSerial_usart.c: 314: *(s+i)=c;
  2866  02CA  0874               	movf	gets_Serial@i_1851,w
  2867  02CB  0771               	addwf	gets_Serial@s,w
  2868  02CC  00F0               	movwf	??_gets_Serial
  2869  02CD  0084               	movwf	4
  2870  02CE  0876               	movf	gets_Serial@c,w
  2871  02CF  1383               	bcf	3,7	;select IRP bank0
  2872  02D0  0080               	movwf	0
  2873  02D1  0AF4               	incf	gets_Serial@i_1851,f
  2874  02D2  1903               	skipnz
  2875  02D3  0AF5               	incf	gets_Serial@i_1851+1,f
  2876  02D4  0875               	movf	gets_Serial@i_1851+1,w
  2877  02D5  3A80               	xorlw	128
  2878  02D6  00FF               	movwf	127
  2879  02D7  3080               	movlw	128
  2880  02D8  027F               	subwf	127,w
  2881  02D9  1D03               	skipz
  2882  02DA  2ADD               	goto	u875
  2883  02DB  3010               	movlw	16
  2884  02DC  0274               	subwf	gets_Serial@i_1851,w
  2885  02DD                     u875:	
  2886  02DD  1803               	btfsc	3,0
  2887  02DE  0008               	return
  2888  02DF  2ABF               	goto	l3331
  2889  02E0                     __end_of_gets_Serial:	
  2890  02E0                     __ptext368:	
  2891 ;; =============== function _isdigit ends ============
  2892                           
  2893                           
  2894 ;; *************** function _getch *****************
  2895 ;; Defined at:
  2896 ;;		line 302 in file "C:\Users\petir\Documents\PIC_PROG\C_PuertoSerial\C_PuertoSerial_usart.c"
  2897 ;; Parameters:    Size  Location     Type
  2898 ;;		None
  2899 ;; Auto vars:     Size  Location     Type
  2900 ;;		None
  2901 ;; Return value:  Size  Location     Type
  2902 ;;                  1    wreg      unsigned char 
  2903 ;; Registers used:
  2904 ;;		wreg
  2905 ;; Tracked objects:
  2906 ;;		On entry : 0/0
  2907 ;;		On exit  : 60/0
  2908 ;;		Unchanged: FFF9F/0
  2909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2910 ;;      Params:         0       0       0       0       0
  2911 ;;      Locals:         0       0       0       0       0
  2912 ;;      Temps:          0       0       0       0       0
  2913 ;;      Totals:         0       0       0       0       0
  2914 ;;Total ram usage:        0 bytes
  2915 ;; Hardware stack levels used:    1
  2916 ;; This function calls:
  2917 ;;		Nothing
  2918 ;; This function is called by:
  2919 ;;		_gets_Serial
  2920 ;; This function uses a non-reentrant model
  2921 ;;
  2922  02E0                     _getch:	
  2923  02E0                     l1114:	
  2924                           ;C_PuertoSerial_usart.c: 303: while(!RCIF) continue;
  2925                           
  2926                           ; Regs used in _getch: [wreg]
  2927                           
  2928  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  2929  02E1  1303               	bcf	3,6	;RP1=0, select bank0
  2930  02E2  1E8C               	btfss	12,5
  2931  02E3  2AE0               	goto	l1114
  2932                           
  2933                           ;C_PuertoSerial_usart.c: 304: return RCREG;
  2934  02E4  081A               	movf	26,w	;volatile
  2935  02E5  0008               	return
  2936  02E6                     __end_of_getch:	
  2937                           
  2938                           	psect	text369
  2939  028B                     __ptext369:	
  2940 ;; =============== function _getch ends ============
  2941                           
  2942                           
  2943 ;; *************** function _putch *****************
  2944 ;; Defined at:
  2945 ;;		line 296 in file "C:\Users\petir\Documents\PIC_PROG\C_PuertoSerial\C_PuertoSerial_usart.c"
  2946 ;; Parameters:    Size  Location     Type
  2947 ;;  dato            1    wreg     unsigned char 
  2948 ;; Auto vars:     Size  Location     Type
  2949 ;;  dato            1    0[COMMON] unsigned char 
  2950 ;; Return value:  Size  Location     Type
  2951 ;;		None               void
  2952 ;; Registers used:
  2953 ;;		wreg
  2954 ;; Tracked objects:
  2955 ;;		On entry : 0/0
  2956 ;;		On exit  : 60/0
  2957 ;;		Unchanged: FFF9F/0
  2958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2959 ;;      Params:         0       0       0       0       0
  2960 ;;      Locals:         1       0       0       0       0
  2961 ;;      Temps:          0       0       0       0       0
  2962 ;;      Totals:         1       0       0       0       0
  2963 ;;Total ram usage:        1 bytes
  2964 ;; Hardware stack levels used:    1
  2965 ;; This function calls:
  2966 ;;		Nothing
  2967 ;; This function is called by:
  2968 ;;		_main
  2969 ;; This function uses a non-reentrant model
  2970 ;;
  2971  028B                     _putch:	
  2972                           
  2973                           ; Regs used in _putch: [wreg]
  2974                           ;putch@dato stored from wreg
  2975  028B  00F0               	movwf	putch@dato
  2976  028C                     l1108:	
  2977                           ;C_PuertoSerial_usart.c: 297: while(!TXIF) continue;
  2978                           
  2979  028C  1283               	bcf	3,5	;RP0=0, select bank0
  2980  028D  1303               	bcf	3,6	;RP1=0, select bank0
  2981  028E  1E0C               	btfss	12,4
  2982  028F  2A8C               	goto	l1108
  2983                           
  2984                           ;C_PuertoSerial_usart.c: 298: TXREG=dato;
  2985  0290  0870               	movf	putch@dato,w
  2986  0291  0099               	movwf	25	;volatile
  2987  0292  0008               	return
  2988  0293                     __end_of_putch:	
  2989                           
  2990                           	psect	text371
  2991  0000                     __ptext371:	
  2992 ;; =============== function _msecbase ends ============
  2993                           
  2994  007E                     btemp	set	126	;btemp
  2995  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.82 build 9453 
Symbol Table                                                                                   Mon Nov 25 20:21:29 2019

                    pc 0002                     fsr 0004    ___wmul@multiplicand 0072           ?_gets_Serial 0070  
                  _RE1 0049                    _RD6 0046                    _RD7 0047                    _PR2 0092  
                  u705 0575                    u745 059A                    u835 032A                    u845 02BB  
                  u925 0519                    u875 02DD                    _nin 004C                    fsr0 0004  
                  indf 0000            lcd_goto@pos 0075                   l1111 0000                   l1114 02E0  
                 l1060 0000                   l1108 028C                   l1117 0000                   l1160 0000  
                 l1072 0000                   l1057 033A                   l1066 0000                   l1147 04B9  
                 l1084 0000                   l1092 06B0                   l1069 0000                   l1078 0000  
                 l2160 0000                   l2306 0000                   l3211 03A4                   l3203 0000  
                 l2172 0000                   l3205 0000                   l3221 03B0                   l3301 0000  
                 l2182 0000                   l3223 0000                   l3215 0000                   l3231 0000  
                 l3303 0000                   l3311 0324                   l2192 0000                   l3225 0000  
                 l3217 03A8                   l3241 056C                   l3233 0000                   l3305 0322  
                 l3321 0000                   l3313 0000                   l3401 052D                   l3251 0000  
                 l3243 0000                   l3331 02BF                   l3323 0000                   l3403 0000  
                 l3411 0559                   l3253 0583                   l3309 0000                   l3341 0000  
                 l3333 0000                   l3405 0000                   l3421 0347                   l3501 0000  
                 l3191 0000                   l3247 0000                   l3271 0000                   l3319 02A9  
                 l3407 0555                   l3351 04A9                   l3343 0000                   l3431 0382  
                 l3415 0000                   l3511 0000                   l3193 0000                   l3265 0594  
                 l3273 05A7                   l3257 0000                   l3281 0451                   l3353 04AB  
                 l3409 0494                   l3441 0000                   l3425 0000                   l3417 0345  
                 l3513 03C9                   l3505 0000                   l3521 0000                   l3601 0000  
                 l3291 0469                   l3339 0000                   l3371 04EF                   l3363 0000  
                 l3355 0000                   l3419 033F                   l3507 0000                   l3523 0000  
                 l3531 0000                   l3611 0000                   l3603 0000                   l3197 0000  
                 l3293 046E                   l3285 0455                   l3277 0000                   l3381 0502  
                 l3373 0000                   l3365 0000                   l3357 0000                   l3349 0000  
                 l3445 0393                   l3437 035E                   l3429 0358                   l3461 03FC  
                 l3525 0000                   l3517 0000                   l3533 0000                   l3541 02FA  
                 l3621 0000                   l3613 0000                   l3605 0000                   l3295 0473  
                 l3287 045A                   l3279 0000                   l3391 0000                   l3375 0000  
                 l3439 0384                   l3471 0000                   l3463 0000                   l3455 03EB  
                 l3527 0000                   l3519 0000                   l3535 0000                   l3543 0000  
                 l3711 0000                   l3703 071C                   l3631 0000                   l3623 0000  
                 l3615 0000                   l3607 0000                   l3551 0000                   l3289 045F  
                 l3393 0520                   l3385 0504                   l3369 04D9                   l3473 0000  
                 l3465 0000                   l3449 0000                   l3529 0000                   l3545 0000  
                 l3721 0751                   l3713 0000                   l3705 0000                   l3633 0000  
                 l3625 0000                   l3617 0000                   l3609 0000                   l3561 0000  
                 l3553 0000                   l3299 0000                   l3379 0000                   l3491 0423  
                 l3483 0417                   l3475 0000                   l3467 0000                   l3539 0000  
                 l3731 0000                   l3723 0000                   l3715 0000                   l3707 0000  
                 l3651 0000                   l3643 063C                   l3635 0000                   l3627 0000  
                 l3619 0000                   l3571 0000                   l3563 0000                   l3555 0000  
                 l3547 0000                   l3397 0000                   l3485 0000                   l3477 0000  
                 l3469 0000                   l3741 078E                   l3733 0000                   l3725 0000  
                 l3661 0000                   l3645 0000                   l3637 0000                   l3629 0000  
                 l3581 0000                   l3573 0000                   l3565 0000                   l3557 0000  
                 l3549 0000                   l3399 052A                   l3495 042D                   l3487 0000  
                 l3479 040D                   l3751 0000                   l3743 0000                   l3735 0000  
                 l3671 0000                   l3647 0000                   l3591 0000                   l3583 0000  
                 l3575 0000                   l3567 0000                   l3559 0000                   l3497 0000  
                 l3489 0000                   l3761 0000                   l3753 0000                   l3745 0000  
                 l3729 0000                   l3681 0000                   l3665 0000                   l3657 066B  
                 l3593 0000                   l3585 0000                   l3577 0000                   l3569 0000  
                 l3499 0000                   l3763 0000                   l3755 0000                   l3691 0000  
                 l3675 0000                   l3667 06A6                   l3659 0000                   l3595 0000  
                 l3587 0000                   l3579 0000                   l3765 0000                   l3757 0000  
                 l3749 0000                   l3677 0000                   l3669 0000                   l3597 0000  
                 l3589 0000                   l3767 0000                   l3759 0000                   l3695 0000  
                 l3687 06EE                   l3679 0000                   l3599 0000                   l3697 0000  
                 l3689 0000                   STR_1 002A                   STR_2 001D                   STR_3 0036  
                 STR_4 0042                   STR_5 0055                   STR_6 004E                   _T0IF 005A  
                 u1135 065A                   u1145 0689                   u1165 06C0                   _RCIF 0065  
                 _TMR0 0001                   _TXIF 0064                   _atoi 033E                   _main 05B2  
         ___ftpack@arg 0070           ___ftpack@exp 0073                   btemp 007E                   start 0000  
         ___ftmul@cntr 002D           ___ftmul@sign 002E                  ?_atoi 0076                  ?_main 0070  
                _ANSEL 0188        __end_of___ftmul 0449        __end_of___lwdiv 0588        __end_of___lwmod 05AC  
                _RCREG 001A                  _RCSTA 0018                  _SPBRG 0099                  _PORTA 0005  
                _PORTB 0006                  _PORTD 0008                  _TRISA 0085                  _TRISB 0086  
                _TRISC 0087                  _TRISD 0088                  _TRISE 0089                  _TXREG 0019  
                _TXSTA 0098      gets_Serial@i_1851 0074          ___awtoft@sign 007B                  _getch 02E0  
      __end_of_isdigit 03A6                  _input 004E                  _pause 0322          ___ftpack@sign 0074  
                atoi@a 007B                  atoi@s 007D                  _putch 028B                  main@i 0044  
                main@x 0048                  pclath 000A                  status 0003                  wtemp0 007E  
      __end_of_sprintf 055E           gets_Serial@c 0076           gets_Serial@i 0072           gets_Serial@s 0071  
         __end_of_atoi 0398           __end_of_main 0800                 ??_atoi 0078                 ??_main 002F  
               ?_getch 0070                 _ADCON0 001F                 _ADCON1 009F                 _ADRESH 001E  
               _ADRESL 009E                 _CCPR1L 0015                 ?_pause 0070       __end_of___awtoft 03DA  
               ?_putch 0070       __end_of___ftpack 0487                 _ANSELH 0189                 _OSCCON 008F  
               _TMR2ON 0092                 _TRISC6 043E                 _TRISC7 043F       __end_of_lcd_goto 02ED  
     __end_of_lcd_puts 0310                 ___wmul 03A6              ??___ftmul 0026              ??___lwdiv 0074  
            ??___lwmod 007B       __end_of_msecbase 033E                 clrloop 0294  ___ftmul@f3_as_product 002A  
 __size_of_gets_Serial 003A              ??_isdigit 0070                 pause@x 0072              ??_sprintf 007C  
           ___awtoft@c 0078             ___ftmul@f1 0020             ___ftmul@f2 0023         __pcstackCOMMON 0070  
        __end_of_getch 02E6          __end_of_pause 0333          __end_of_putch 0293     __size_of_lcd_clear 000B  
              ??_getch 0070     __size_of_lcd_write 0012                ??_pause 0072                ??_putch 0070  
           __pbssBANK0 004C             __pmaintext 05B2                ?___wmul 0070                _CCP1CON 0017  
              _CCP2CON 001D                _BAUDCTL 0187              ?___awtoft 0078              ?___ftpack 0070  
              _T2CKPS0 0090                _T2CKPS1 0091                _GO_DONE 00F9              ?_lcd_goto 0070  
            ?_lcd_puts 0070              ?_msecbase 0070      __end_of_lcd_clear 02F8      __end_of_lcd_write 0322  
      __size_of___wmul 0019                ___ftmul 03DA                ___lwdiv 055E                ___lwmod 0588  
           ??___awtoft 007B             ??___ftpack 0075                _dpowers 0013                _isdigit 0398  
              _sprintf 0491                main@val 0040             ??_lcd_goto 0075             ??_lcd_puts 0075  
 end_of_initialization 02A2             ??_msecbase 0070             main@i_1832 0046             main@x_1840 004A  
           main@x_1842 004B             main@x_1838 0049             main@buffer 0031             lcd_write@c 0074  
          ___ftmul@exp 0029          ??_gets_Serial 0070         __end_of___wmul 03BF    start_initialization 029B  
             ??___wmul 0074           pause@msvalue 0070      __size_of___awtoft 001B      __size_of___ftpack 003E  
  __end_of_gets_Serial 02E0          __pcstackBANK0 0020           _isdigit$2400 0070      __size_of_lcd_goto 0007  
          sprintf@_val 0027            sprintf@flag 0023      __size_of_lcd_puts 0018            sprintf@prec 0024  
     ___lwdiv@dividend 0072      __size_of_msecbase 000B              __ptext360 0491              __ptext361 02A6  
            __ptext353 02E6              __ptext370 0333              __ptext362 0322              __ptext354 02F8  
            __ptext371 0000              __ptext363 0449              __ptext355 02ED              __ptext364 0588  
            __ptext356 0310              __ptext365 055E              __ptext357 03BF              __ptext366 03A6  
            __ptext358 03DA              __ptext367 0398              __ptext359 033E              __ptext368 02E0  
            __ptext369 028B               ?___ftmul 0020               ?___lwdiv 0070               ?___lwmod 0077  
            _lcd_clear 02ED              __pstrings 0003              _lcd_write 0310               ?_isdigit 0070  
     ___lwdiv@quotient 0074         __size_of_getch 0006               ?_sprintf 0020         __size_of_pause 0011  
       __size_of_putch 0008         ___wmul@product 0074             ?_lcd_clear 0070            _gets_Serial 02A6  
          __stringbase 0012             ?_lcd_write 0070      ___wmul@multiplier 0070              main@pwm_1 0042  
            lcd_puts@s 0075       __size_of___ftmul 006F       __size_of___lwdiv 002A       __size_of___lwmod 0024  
             ___awtoft 03BF               ___ftpack 0449       __size_of_isdigit 000E        ___lwdiv@divisor 0070  
      ___lwdiv@counter 0076               _lcd_goto 02E6               _lcd_puts 02F8       __size_of_sprintf 00CD  
        __size_of_atoi 005A          __size_of_main 024E               _msecbase 0333               clear_ram 0293  
             atoi@sign 007A            ??_lcd_clear 0075            ??_lcd_write 0074              putch@dato 0070  
             isdigit@c 0071              sprintf@ap 0025              sprintf@sp 0026       ___lwmod@dividend 0079  
            stringcode 000D             _OPTION_REG 0081               sprintf@c 002B               sprintf@f 0020  
      ___lwmod@divisor 0077        ___lwmod@counter 007B               stringdir 000D               stringtab 0003  
