

HI-TECH Software PIC PRO Macro Assembler V9.82 build 9453 
                                                                                               Wed Nov 06 20:19:24 2019

HI-TECH Software Omniscient Code Generator (PRO mode) build 9453
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,delta=2
    12                           	psect	text342,local,class=CODE,delta=2
    13                           	psect	text346,local,class=CODE,delta=2
    14                           	psect	text348,local,class=CODE,delta=2
    15                           	psect	text349,local,class=CODE,delta=2
    16                           	psect	text350,local,class=CODE,delta=2
    17                           	psect	text358,local,class=CODE,delta=2
    18                           	psect	text360,local,class=CODE,delta=2
    19                           	psect	pa_nodes,global,class=CODE,delta=2
    20                           	dabs	1,0x7E,2
    21  000A                     	;#
    22                           
    23                           	psect	config
    24  2007  E0D4               	dw	57556	;#
    25  2008  FFFF               	dw	65535	;#
    26                           
    27                           	psect	strings
    28  0003                     __pstrings:	
    29  0003                     stringtab:	
    30                           ;	global	stringdir,stringtab,__stringbase
    31                           
    32                           
    33                           ;	String table - string pointers are 1 byte each
    34  0003  1BFF               	btfsc	btemp+1,7
    35  0004  280D               	ljmp	stringcode
    36  0005  1383               	bcf	3,7
    37  0006  187F               	btfsc	btemp+1,0
    38  0007  1783               	bsf	3,7
    39  0008  0800               	movf	0,w
    40  0009  0A84               	incf	4,f
    41  000A  1903               	skipnz
    42  000B  0AFF               	incf	btemp+1,f
    43  000C  0008               	return
    44  000D                     stringcode:	
    45  000D                     stringdir:	
    46  000D  3000               	movlw	high stringdir
    47  000E  008A               	movwf	10
    48  000F  0804               	movf	4,w
    49  0010  0A84               	incf	4,f
    50  0011  0782               	addwf	2,f
    51  0012                     __stringbase:	
    52  0012  3400               	retlw	0
    53  0013                     _dpowers:	
    54  0013  3401               	retlw	1
    55  0014  3400               	retlw	0
    56  0015  340A               	retlw	10
    57  0016  3400               	retlw	0
    58  0017  3464               	retlw	100
    59  0018  3400               	retlw	0
    60  0019  34E8               	retlw	232
    61  001A  3403               	retlw	3
    62  001B  3410               	retlw	16
    63  001C  3427               	retlw	39
    64  001F                     _ADCON0	set	31
    65  001E                     _ADRESH	set	30
    66  0017                     _CCP1CON	set	23
    67  001D                     _CCP2CON	set	29
    68  0015                     _CCPR1L	set	21
    69  0006                     _PORTB	set	6
    70  0008                     _PORTD	set	8
    71  001A                     _RCREG	set	26
    72  0018                     _RCSTA	set	24
    73  0001                     _TMR0	set	1
    74  0019                     _TXREG	set	25
    75  00F9                     _GO_DONE	set	249
    76  002E                     _RA6	set	46
    77  002F                     _RA7	set	47
    78  0065                     _RCIF	set	101
    79  0049                     _RE1	set	73
    80  005A                     _T0IF	set	90
    81  0090                     _T2CKPS0	set	144
    82  0091                     _T2CKPS1	set	145
    83  0092                     _TMR2ON	set	146
    84  0064                     _TXIF	set	100
    85  009F                     _ADCON1	set	159
    86  009E                     _ADRESL	set	158
    87  0081                     _OPTION_REG	set	129
    88  008F                     _OSCCON	set	143
    89  0092                     _PR2	set	146
    90  0099                     _SPBRG	set	153
    91  0085                     _TRISA	set	133
    92  0086                     _TRISB	set	134
    93  0088                     _TRISD	set	136
    94  0089                     _TRISE	set	137
    95  0098                     _TXSTA	set	152
    96  043E                     _TRISC6	set	1086
    97  043F                     _TRISC7	set	1087
    98  0188                     _ANSEL	set	392
    99  0189                     _ANSELH	set	393
   100  0187                     _BAUDCTL	set	391
   101  0005                     _PORTA	set	5
   102  001D                     STR_1:	
   103  001D  3445               	retlw	69	;'E'
   104  001E  346C               	retlw	108	;'l'
   105  001F  3420               	retlw	32	;' '
   106  0020  3476               	retlw	118	;'v'
   107  0021  3461               	retlw	97	;'a'
   108  0022  346C               	retlw	108	;'l'
   109  0023  346F               	retlw	111	;'o'
   110  0024  3472               	retlw	114	;'r'
   111  0025  3420               	retlw	32	;' '
   112  0026  3465               	retlw	101	;'e'
   113  0027  3473               	retlw	115	;'s'
   114  0028  343A               	retlw	58	;':'
   115  0029  3425               	retlw	37	;'%'
   116  002A  3469               	retlw	105	;'i'
   117  002B  3420               	retlw	32	;' '
   118  002C  3420               	retlw	32	;' '
   119  002D  3400               	retlw	0
   120                           
   121                           	psect	cinit
   122  0362                     start_initialization:	
   123  0362  3047               	movlw	low __pbssBANK0
   124                           
   125                           ; Clear objects allocated to BANK0
   126  0363  1383               	bcf	3,7	;select IRP bank0
   127  0364  0084               	movwf	4
   128  0365  305A               	movlw	low (__pbssBANK0+19)
   129  0366  120A  118A  235A   	fcall	clear_ram
   130  0369                     end_of_initialization:	
   131                           ;End of C runtime variable initialization code
   132                           
   133  0369  0183               	clrf	3
   134  036A  120A  118A  2E49   	ljmp	_main	;jump to C main() function
   135                           
   136                           	psect	bssBANK0
   137  0047                     __pbssBANK0:	
   138  0047                     _nin:	
   139  0047                     	ds	2
   140  0049                     _input:	
   141  0049                     	ds	17
   142                           
   143                           	psect	clrtext
   144  035A                     clear_ram:	
   145                           ;	Called with FSR containing the base address, and
   146                           ;	W with the last address+1
   147                           
   148  035A  0064               	clrwdt	;clear the watchdog before getting into this loop
   149  035B                     clrloop:	
   150  035B  0180               	clrf	0	;clear RAM location pointed to by FSR
   151  035C  0A84               	incf	4,f	;increment pointer
   152  035D  0604               	xorwf	4,w	;XOR with final address
   153  035E  1903               	btfsc	3,2	;have we reached the end yet?
   154  035F  3400               	retlw	0	;all done for this memory range, return
   155  0360  0604               	xorwf	4,w	;XOR again to restore value
   156  0361  2B5B               	goto	clrloop	;do the next byte
   157                           
   158                           	psect	cstackCOMMON
   159  0070                     __pcstackCOMMON:	
   160  0070                     ?_putch:	
   161  0070                     ??_putch:	
   162                           ; 0 bytes @ 0x0
   163                           
   164  0070                     ?_gets_Serial:	
   165                           ; 0 bytes @ 0x0
   166                           
   167  0070                     ??_gets_Serial:	
   168                           ; 0 bytes @ 0x0
   169                           
   170  0070                     ?_isdigit:	
   171                           ; 0 bytes @ 0x0
   172                           
   173  0070                     ??_isdigit:	
   174                           ; 1 bit 
   175                           
   176  0070                     ?_msecbase:	
   177                           ; 0 bytes @ 0x0
   178                           
   179  0070                     ??_msecbase:	
   180                           ; 0 bytes @ 0x0
   181                           
   182  0070                     ?_pause:	
   183                           ; 0 bytes @ 0x0
   184                           
   185  0070                     ?_lcd_write:	
   186                           ; 0 bytes @ 0x0
   187                           
   188  0070                     ?_lcd_clear:	
   189                           ; 0 bytes @ 0x0
   190                           
   191  0070                     ?_lcd_goto:	
   192                           ; 0 bytes @ 0x0
   193                           
   194  0070                     ?_main:	
   195                           ; 0 bytes @ 0x0
   196                           
   197  0070                     ??_getch:	
   198                           ; 0 bytes @ 0x0
   199                           
   200  0070                     ?_getch:	
   201                           ; 0 bytes @ 0x0
   202                           
   203  0070                     ?___wmul:	
   204                           ; 1 bytes @ 0x0
   205                           
   206  0070                     ?___lwdiv:	
   207                           ; 2 bytes @ 0x0
   208                           
   209  0070                     ?___ftpack:	
   210                           ; 2 bytes @ 0x0
   211                           
   212  0070                     putch@dato:	
   213                           ; 3 bytes @ 0x0
   214                           
   215  0070                     _isdigit$2389:	
   216                           ; 1 bytes @ 0x0
   217                           
   218  0070                     pause@msvalue:	
   219                           ; 1 bytes @ 0x0
   220                           
   221  0070                     ___wmul@multiplier:	
   222                           ; 2 bytes @ 0x0
   223                           
   224  0070                     ___lwdiv@divisor:	
   225                           ; 2 bytes @ 0x0
   226                           
   227  0070                     ___ftpack@arg:	
   228                           ; 2 bytes @ 0x0
   229                           
   230                           
   231                           ; 3 bytes @ 0x0
   232  0070                     	ds	1
   233  0071                     gets_Serial@s:	
   234  0071                     isdigit@c:	
   235                           ; 1 bytes @ 0x1
   236                           
   237                           
   238                           ; 1 bytes @ 0x1
   239  0071                     	ds	1
   240  0072                     ??_pause:	
   241  0072                     pause@x:	
   242                           ; 0 bytes @ 0x2
   243                           
   244  0072                     gets_Serial@i:	
   245                           ; 2 bytes @ 0x2
   246                           
   247  0072                     ___wmul@multiplicand:	
   248                           ; 2 bytes @ 0x2
   249                           
   250  0072                     ___lwdiv@dividend:	
   251                           ; 2 bytes @ 0x2
   252                           
   253                           
   254                           ; 2 bytes @ 0x2
   255  0072                     	ds	1
   256  0073                     ___ftpack@exp:	
   257                           
   258                           ; 1 bytes @ 0x3
   259  0073                     	ds	1
   260  0074                     ??_lcd_write:	
   261  0074                     ??___wmul:	
   262                           ; 0 bytes @ 0x4
   263                           
   264  0074                     ??___lwdiv:	
   265                           ; 0 bytes @ 0x4
   266                           
   267  0074                     lcd_write@c:	
   268                           ; 0 bytes @ 0x4
   269                           
   270  0074                     ___ftpack@sign:	
   271                           ; 1 bytes @ 0x4
   272                           
   273  0074                     gets_Serial@i_1843:	
   274                           ; 1 bytes @ 0x4
   275                           
   276  0074                     ___wmul@product:	
   277                           ; 2 bytes @ 0x4
   278                           
   279  0074                     ___lwdiv@quotient:	
   280                           ; 2 bytes @ 0x4
   281                           
   282                           
   283                           ; 2 bytes @ 0x4
   284  0074                     	ds	1
   285  0075                     ??___ftpack:	
   286  0075                     ??_lcd_clear:	
   287                           ; 0 bytes @ 0x5
   288                           
   289  0075                     ?_lcd_puts:	
   290                           ; 0 bytes @ 0x5
   291                           
   292  0075                     ??_lcd_goto:	
   293                           ; 0 bytes @ 0x5
   294                           
   295  0075                     lcd_goto@pos:	
   296                           ; 0 bytes @ 0x5
   297                           
   298  0075                     lcd_puts@s:	
   299                           ; 1 bytes @ 0x5
   300                           
   301                           
   302                           ; 2 bytes @ 0x5
   303  0075                     	ds	1
   304  0076                     ?_atoi:	
   305  0076                     gets_Serial@c:	
   306                           ; 2 bytes @ 0x6
   307                           
   308  0076                     ___lwdiv@counter:	
   309                           ; 1 bytes @ 0x6
   310                           
   311                           
   312                           ; 1 bytes @ 0x6
   313  0076                     	ds	1
   314  0077                     ??_lcd_puts:	
   315  0077                     ?___lwmod:	
   316                           ; 0 bytes @ 0x7
   317                           
   318  0077                     ___lwmod@divisor:	
   319                           ; 2 bytes @ 0x7
   320                           
   321                           
   322                           ; 2 bytes @ 0x7
   323  0077                     	ds	1
   324  0078                     ??_atoi:	
   325  0078                     ?___awtoft:	
   326                           ; 0 bytes @ 0x8
   327                           
   328  0078                     ___awtoft@c:	
   329                           ; 3 bytes @ 0x8
   330                           
   331                           
   332                           ; 2 bytes @ 0x8
   333  0078                     	ds	1
   334  0079                     ___lwmod@dividend:	
   335                           
   336                           ; 2 bytes @ 0x9
   337  0079                     	ds	1
   338  007A                     atoi@sign:	
   339                           
   340                           ; 1 bytes @ 0xA
   341  007A                     	ds	1
   342  007B                     ??___lwmod:	
   343  007B                     ??___awtoft:	
   344                           ; 0 bytes @ 0xB
   345                           
   346  007B                     ___lwmod@counter:	
   347                           ; 0 bytes @ 0xB
   348                           
   349  007B                     ___awtoft@sign:	
   350                           ; 1 bytes @ 0xB
   351                           
   352  007B                     atoi@a:	
   353                           ; 1 bytes @ 0xB
   354                           
   355                           
   356                           ; 2 bytes @ 0xB
   357  007B                     	ds	1
   358  007C                     ??_sprintf:	
   359                           
   360                           ; 0 bytes @ 0xC
   361  007C                     	ds	1
   362  007D                     atoi@s:	
   363                           
   364                           ; 1 bytes @ 0xD
   365  007D                     	ds	1
   366                           
   367                           	psect	cstackBANK0
   368  0020                     __pcstackBANK0:	
   369  0020                     ?_sprintf:	
   370  0020                     ?___ftmul:	
   371                           ; 2 bytes @ 0x0
   372                           
   373  0020                     sprintf@f:	
   374                           ; 3 bytes @ 0x0
   375                           
   376  0020                     ___ftmul@f1:	
   377                           ; 1 bytes @ 0x0
   378                           
   379                           
   380                           ; 3 bytes @ 0x0
   381  0020                     	ds	3
   382  0023                     sprintf@ap:	
   383  0023                     ___ftmul@f2:	
   384                           ; 1 bytes @ 0x3
   385                           
   386                           
   387                           ; 3 bytes @ 0x3
   388  0023                     	ds	1
   389  0024                     sprintf@flag:	
   390                           
   391                           ; 1 bytes @ 0x4
   392  0024                     	ds	1
   393  0025                     sprintf@prec:	
   394                           
   395                           ; 1 bytes @ 0x5
   396  0025                     	ds	1
   397  0026                     ??___ftmul:	
   398  0026                     sprintf@_val:	
   399                           ; 0 bytes @ 0x6
   400                           
   401                           
   402                           ; 4 bytes @ 0x6
   403  0026                     	ds	3
   404  0029                     ___ftmul@exp:	
   405                           
   406                           ; 1 bytes @ 0x9
   407  0029                     	ds	1
   408  002A                     sprintf@sp:	
   409  002A                     ___ftmul@f3_as_product:	
   410                           ; 1 bytes @ 0xA
   411                           
   412                           
   413                           ; 3 bytes @ 0xA
   414  002A                     	ds	1
   415  002B                     sprintf@c:	
   416                           
   417                           ; 1 bytes @ 0xB
   418  002B                     	ds	2
   419  002D                     ___ftmul@cntr:	
   420                           
   421                           ; 1 bytes @ 0xD
   422  002D                     	ds	1
   423  002E                     ___ftmul@sign:	
   424                           
   425                           ; 1 bytes @ 0xE
   426  002E                     	ds	1
   427  002F                     ??_main:	
   428                           
   429                           ; 0 bytes @ 0xF
   430  002F                     	ds	1
   431  0030                     main@buffer:	
   432                           
   433                           ; 15 bytes @ 0x10
   434  0030                     	ds	15
   435  003F                     main@val:	
   436                           
   437                           ; 2 bytes @ 0x1F
   438  003F                     	ds	2
   439  0041                     main@i:	
   440                           
   441                           ; 2 bytes @ 0x21
   442  0041                     	ds	2
   443  0043                     main@i_1830:	
   444                           
   445                           ; 2 bytes @ 0x23
   446  0043                     	ds	2
   447  0045                     main@x:	
   448                           
   449                           ; 1 bytes @ 0x25
   450  0045                     	ds	1
   451  0046                     main@x_1835:	
   452                           
   453                           ; 1 bytes @ 0x26
   454  0046                     	ds	1
   455                           
   456                           	psect	maintext
   457  0649                     __pmaintext:	
   458 ;;Data sizes: Strings 17, constant 10, data 0, bss 19, persistent 0 stack 0
   459 ;;Auto spaces:   Size  Autos    Used
   460 ;; COMMON          14     14      14
   461 ;; BANK0           80     39      58
   462 ;; BANK1           80      0       0
   463 ;; BANK3           96      0       0
   464 ;; BANK2           96      0       0
   465 ;;
   466 ;; Pointer list with targets:
   467 ;; ?___ftpack	float  size(1) Largest target is 0
   468 ;;
   469 ;; ?___wmul	unsigned int  size(1) Largest target is 0
   470 ;;
   471 ;; ?___lwdiv	unsigned int  size(1) Largest target is 0
   472 ;;
   473 ;; ?___lwmod	unsigned int  size(1) Largest target is 0
   474 ;;
   475 ;; ?_atoi	int  size(1) Largest target is 0
   476 ;;
   477 ;; ?___ftmul	float  size(1) Largest target is 0
   478 ;;
   479 ;; ?___awtoft	float  size(1) Largest target is 0
   480 ;;
   481 ;; atoi@s	PTR const unsigned char  size(1) Largest target is 17
   482 ;;		 -> input(BANK0[17]), 
   483 ;;
   484 ;; sprintf@f	PTR const unsigned char  size(1) Largest target is 17
   485 ;;		 -> STR_1(CODE[17]), 
   486 ;;
   487 ;; sprintf@sp	PTR unsigned char  size(1) Largest target is 15
   488 ;;		 -> main@buffer(BANK0[15]), 
   489 ;;
   490 ;; ?_sprintf	int  size(1) Largest target is 0
   491 ;;
   492 ;; sprintf@ap	PTR void [1] size(1) Largest target is 2
   493 ;;		 -> ?_sprintf(BANK0[2]), 
   494 ;;
   495 ;; S1862$_cp	PTR const unsigned char  size(1) Largest target is 0
   496 ;;
   497 ;; _val._str._cp	PTR const unsigned char  size(1) Largest target is 0
   498 ;;
   499 ;; gets_Serial@s	PTR unsigned char  size(1) Largest target is 17
   500 ;;		 -> input(BANK0[17]), main@buffer(BANK0[15]), 
   501 ;;
   502 ;; lcd_puts@s	PTR const unsigned char  size(2) Largest target is 8192
   503 ;;		 -> ROM(CODE[8192]), input(BANK0[17]), 
   504 ;;
   505 ;; pa	PTR unsigned char  size(1) Largest target is 1
   506 ;;		 -> PORTA(BITSFR0[1]), 
   507 ;;
   508 ;;
   509 ;; Critical Paths under _main in COMMON
   510 ;;
   511 ;;   _main->_sprintf
   512 ;;   _main->_atoi
   513 ;;   _lcd_goto->_lcd_write
   514 ;;   _lcd_puts->_lcd_write
   515 ;;   _lcd_clear->_lcd_write
   516 ;;   _lcd_write->_pause
   517 ;;   ___awtoft->___ftpack
   518 ;;   ___ftmul->___awtoft
   519 ;;   _atoi->___wmul
   520 ;;   _sprintf->___lwmod
   521 ;;   ___lwmod->___lwdiv
   522 ;;
   523 ;; Critical Paths under _main in BANK0
   524 ;;
   525 ;;   _main->___ftmul
   526 ;;
   527 ;; Critical Paths under _main in BANK1
   528 ;;
   529 ;;   None.
   530 ;;
   531 ;; Critical Paths under _main in BANK3
   532 ;;
   533 ;;   None.
   534 ;;
   535 ;; Critical Paths under _main in BANK2
   536 ;;
   537 ;;   None.
   538 ;;
   539 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   540 ;;
   541 ;;
   542 ;;Call Graph Tables:
   543 ;;
   544 ;; ---------------------------------------------------------------------------------
   545 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   546 ;; ---------------------------------------------------------------------------------
   547 ;; (0) _main                                                29    29      0    3182
   548 ;;                                             15 BANK0     24    24      0
   549 ;;                              _pause
   550 ;;                          _lcd_write
   551 ;;                          _lcd_clear
   552 ;;                              _putch
   553 ;;                        _gets_Serial
   554 ;;                           ___awtoft
   555 ;;                            ___ftmul
   556 ;;                            _sprintf
   557 ;;                               _atoi
   558 ;;                           _lcd_goto
   559 ;;                           _lcd_puts
   560 ;; ---------------------------------------------------------------------------------
   561 ;; (1) _lcd_goto                                             1     1      0     112
   562 ;;                                              5 COMMON     1     1      0
   563 ;;                          _lcd_write
   564 ;; ---------------------------------------------------------------------------------
   565 ;; (1) _lcd_puts                                             2     0      2     135
   566 ;;                                              5 COMMON     2     0      2
   567 ;;                          _lcd_write
   568 ;; ---------------------------------------------------------------------------------
   569 ;; (1) _lcd_clear                                            0     0      0     136
   570 ;;                          _lcd_write
   571 ;;                              _pause
   572 ;; ---------------------------------------------------------------------------------
   573 ;; (2) _lcd_write                                            1     1      0      90
   574 ;;                                              4 COMMON     1     1      0
   575 ;;                              _pause
   576 ;; ---------------------------------------------------------------------------------
   577 ;; (1) ___awtoft                                             4     1      3     300
   578 ;;                                              8 COMMON     4     1      3
   579 ;;                           ___ftpack
   580 ;; ---------------------------------------------------------------------------------
   581 ;; (1) ___ftmul                                             15     9      6     535
   582 ;;                                              0 BANK0     15     9      6
   583 ;;                           ___ftpack
   584 ;;                           ___awtoft (ARG)
   585 ;; ---------------------------------------------------------------------------------
   586 ;; (1) _atoi                                                 8     6      2     388
   587 ;;                                              6 COMMON     8     6      2
   588 ;;                             ___wmul
   589 ;;                            _isdigit
   590 ;; ---------------------------------------------------------------------------------
   591 ;; (1) _sprintf                                             14    11      3     798
   592 ;;                                             12 COMMON     2     2      0
   593 ;;                                              0 BANK0     12     9      3
   594 ;;                            ___lwdiv
   595 ;;                            ___lwmod
   596 ;; ---------------------------------------------------------------------------------
   597 ;; (1) _gets_Serial                                          7     7      0     247
   598 ;;                                              0 COMMON     7     7      0
   599 ;;                              _getch
   600 ;; ---------------------------------------------------------------------------------
   601 ;; (3) _pause                                                4     2      2      46
   602 ;;                                              0 COMMON     4     2      2
   603 ;;                           _msecbase
   604 ;; ---------------------------------------------------------------------------------
   605 ;; (2) ___ftpack                                             8     3      5     209
   606 ;;                                              0 COMMON     8     3      5
   607 ;; ---------------------------------------------------------------------------------
   608 ;; (2) ___lwmod                                              5     1      4     159
   609 ;;                                              7 COMMON     5     1      4
   610 ;;                            ___lwdiv (ARG)
   611 ;; ---------------------------------------------------------------------------------
   612 ;; (2) ___lwdiv                                              7     3      4     162
   613 ;;                                              0 COMMON     7     3      4
   614 ;; ---------------------------------------------------------------------------------
   615 ;; (2) ___wmul                                               6     2      4      92
   616 ;;                                              0 COMMON     6     2      4
   617 ;; ---------------------------------------------------------------------------------
   618 ;; (2) _isdigit                                              2     2      0      68
   619 ;;                                              0 COMMON     2     2      0
   620 ;; ---------------------------------------------------------------------------------
   621 ;; (2) _getch                                                0     0      0       0
   622 ;; ---------------------------------------------------------------------------------
   623 ;; (1) _putch                                                1     1      0      22
   624 ;;                                              0 COMMON     1     1      0
   625 ;; ---------------------------------------------------------------------------------
   626 ;; (4) _msecbase                                             0     0      0       0
   627 ;; ---------------------------------------------------------------------------------
   628 ;; Estimated maximum stack depth 4
   629 ;; ---------------------------------------------------------------------------------
   630 ;; Call Graph Graphs:
   631 ;; _main (ROOT)
   632 ;;   _pause
   633 ;;     _msecbase
   634 ;;   _lcd_write
   635 ;;     _pause
   636 ;;       _msecbase
   637 ;;   _lcd_clear
   638 ;;     _lcd_write
   639 ;;       _pause
   640 ;;         _msecbase
   641 ;;     _pause
   642 ;;       _msecbase
   643 ;;   _putch
   644 ;;   _gets_Serial
   645 ;;     _getch
   646 ;;   ___awtoft
   647 ;;     ___ftpack
   648 ;;   ___ftmul
   649 ;;     ___ftpack
   650 ;;     ___awtoft (ARG)
   651 ;;       ___ftpack
   652 ;;   _sprintf
   653 ;;     ___lwdiv
   654 ;;     ___lwmod
   655 ;;       ___lwdiv (ARG)
   656 ;;   _atoi
   657 ;;     ___wmul
   658 ;;     _isdigit
   659 ;;   _lcd_goto
   660 ;;     _lcd_write
   661 ;;       _pause
   662 ;;         _msecbase
   663 ;;   _lcd_puts
   664 ;;     _lcd_write
   665 ;;       _pause
   666 ;;         _msecbase
   667 ;;
   668 ;; Address spaces:
   669 ;;Name               Size   Autos  Total    Cost      Usage
   670 ;;BITCOMMON            E      0       0       0        0.0%
   671 ;;EEDATA             100      0       0       0        0.0%
   672 ;;NULL                 0      0       0       0        0.0%
   673 ;;CODE                 0      0       0       0        0.0%
   674 ;;COMMON               E      E       E       1      100.0%
   675 ;;BITSFR0              0      0       0       1        0.0%
   676 ;;SFR0                 0      0       0       1        0.0%
   677 ;;BITSFR1              0      0       0       2        0.0%
   678 ;;SFR1                 0      0       0       2        0.0%
   679 ;;STACK                0      0       4       2        0.0%
   680 ;;ABS                  0      0      48       3        0.0%
   681 ;;BITBANK0            50      0       0       4        0.0%
   682 ;;BITSFR3              0      0       0       4        0.0%
   683 ;;SFR3                 0      0       0       4        0.0%
   684 ;;BANK0               50     27      3A       5       72.5%
   685 ;;BITSFR2              0      0       0       5        0.0%
   686 ;;SFR2                 0      0       0       5        0.0%
   687 ;;BITBANK1            50      0       0       6        0.0%
   688 ;;BANK1               50      0       0       7        0.0%
   689 ;;BITBANK3            60      0       0       8        0.0%
   690 ;;BANK3               60      0       0       9        0.0%
   691 ;;BITBANK2            60      0       0      10        0.0%
   692 ;;BANK2               60      0       0      11        0.0%
   693 ;;DATA                 0      0      4C      12        0.0%
   694                           
   695                           
   696 ;; *************** function _main *****************
   697 ;; Defined at:
   698 ;;		line 94 in file "C:\Users\petir\Documents\PIC_PROG\C_PuertoSerial\C_PuertoSerial_usart.c"
   699 ;; Parameters:    Size  Location     Type
   700 ;;		None
   701 ;; Auto vars:     Size  Location     Type
   702 ;;  x               1   38[BANK0 ] unsigned char 
   703 ;;  x               1   37[BANK0 ] unsigned char 
   704 ;;  val             2   31[BANK0 ] int 
   705 ;;  num_f           2    0        int 
   706 ;;  i               2   35[BANK0 ] int 
   707 ;;  i               2   33[BANK0 ] int 
   708 ;;  buffer         15   16[BANK0 ] unsigned char [15]
   709 ;;  pos             1    0        unsigned char 
   710 ;;  char_pwm        1    0        unsigned char 
   711 ;;  char_recibid    1    0        unsigned char 
   712 ;; Return value:  Size  Location     Type
   713 ;;		None               void
   714 ;; Registers used:
   715 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   716 ;; Tracked objects:
   717 ;;		On entry : 17F/0
   718 ;;		On exit  : 60/0
   719 ;;		Unchanged: FFE00/0
   720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   721 ;;      Params:         0       0       0       0       0
   722 ;;      Locals:         0      23       0       0       0
   723 ;;      Temps:          0       1       0       0       0
   724 ;;      Totals:         0      24       0       0       0
   725 ;;Total ram usage:       24 bytes
   726 ;; Hardware stack levels required when called:    4
   727 ;; This function calls:
   728 ;;		_pause
   729 ;;		_lcd_write
   730 ;;		_lcd_clear
   731 ;;		_putch
   732 ;;		_gets_Serial
   733 ;;		___awtoft
   734 ;;		___ftmul
   735 ;;		_sprintf
   736 ;;		_atoi
   737 ;;		_lcd_goto
   738 ;;		_lcd_puts
   739 ;; This function is called by:
   740 ;;		Startup code after reset
   741 ;; This function uses a non-reentrant model
   742 ;;
   743  0649                     _main:	
   744                           
   745                           ;C_PuertoSerial_usart.c: 95: ANSEL=0x00;
   746                           
   747                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   748  0649  1683               	bsf	3,5	;RP0=1, select bank3
   749  064A  1703               	bsf	3,6	;RP1=1, select bank3
   750  064B  0188               	clrf	8	;volatile
   751                           
   752                           ;C_PuertoSerial_usart.c: 96: ANSELH=0x00;
   753  064C  0189               	clrf	9	;volatile
   754                           
   755                           ;C_PuertoSerial_usart.c: 98: TRISA = 0x00;
   756  064D  1303               	bcf	3,6	;RP1=0, select bank1
   757  064E  0185               	clrf	5	;volatile
   758                           
   759                           ;C_PuertoSerial_usart.c: 99: TRISB = 0x00;
   760  064F  0186               	clrf	6	;volatile
   761                           
   762                           ;C_PuertoSerial_usart.c: 100: TRISD = 0x00;
   763  0650  0188               	clrf	8	;volatile
   764                           
   765                           ;C_PuertoSerial_usart.c: 103: TRISE=0x03;
   766  0651  3003               	movlw	3
   767  0652  0089               	movwf	9	;volatile
   768                           
   769                           ;C_PuertoSerial_usart.c: 104: ADCON1=0b00000000;
   770  0653  019F               	clrf	31	;volatile
   771                           
   772                           ;C_PuertoSerial_usart.c: 105: PR2=0xFF;
   773  0654  30FF               	movlw	255
   774  0655  0092               	movwf	18	;volatile
   775                           
   776                           ;C_PuertoSerial_usart.c: 107: CCP1CON = 0xC0;
   777  0656  30C0               	movlw	192
   778  0657  1283               	bcf	3,5	;RP0=0, select bank0
   779  0658  0097               	movwf	23	;volatile
   780                           
   781                           ;C_PuertoSerial_usart.c: 108: CCP2CON = 0xC0;
   782  0659  009D               	movwf	29	;volatile
   783  065A  300F               	movlw	15
   784                           
   785                           ;C_PuertoSerial_usart.c: 109: T2CKPS1 = 1;
   786  065B  1492               	bsf	18,1
   787                           
   788                           ;C_PuertoSerial_usart.c: 110: T2CKPS0 = 1;
   789  065C  1412               	bsf	18,0
   790                           
   791                           ;C_PuertoSerial_usart.c: 111: TMR2ON = 1;
   792  065D  1512               	bsf	18,2
   793                           
   794                           ;C_PuertoSerial_usart.c: 114: RA7=0;
   795  065E  1385               	bcf	5,7
   796                           
   797                           ;C_PuertoSerial_usart.c: 115: RA6=0;
   798  065F  1305               	bcf	5,6
   799                           
   800                           ;C_PuertoSerial_usart.c: 116: RE1=0;
   801  0660  1089               	bcf	9,1
   802                           
   803                           ;C_PuertoSerial_usart.c: 118: pause(15);
   804  0661  00F0               	movwf	?_pause
   805  0662  01F1               	clrf	?_pause+1
   806  0663  120A  118A  23EB   	fcall	_pause
      +       120A  118A         
   807                           
   808                           ;C_PuertoSerial_usart.c: 119: PORTD=init_value;
   809  0668  3003               	movlw	3
   810  0669  1283               	bcf	3,5	;RP0=0, select bank0
   811  066A  1303               	bcf	3,6	;RP1=0, select bank0
   812  066B  0088               	movwf	8	;volatile
   813  066C  300A               	movlw	10
   814                           
   815                           ;C_PuertoSerial_usart.c: 120: ((RA6=1),(RA6=0));
   816  066D  1705               	bsf	5,6
   817  066E  1305               	bcf	5,6
   818                           
   819                           ;C_PuertoSerial_usart.c: 121: pause(10);
   820  066F  00F0               	movwf	?_pause
   821  0670  01F1               	clrf	?_pause+1
   822  0671  120A  118A  23EB   	fcall	_pause
      +       120A  118A         
   823                           
   824                           ;C_PuertoSerial_usart.c: 122: ((RA6=1),(RA6=0));
   825  0676  1283               	bcf	3,5	;RP0=0, select bank0
   826  0677  1303               	bcf	3,6	;RP1=0, select bank0
   827  0678  300A               	movlw	10
   828  0679  1705               	bsf	5,6
   829  067A  1305               	bcf	5,6
   830                           
   831                           ;C_PuertoSerial_usart.c: 123: pause(10);
   832  067B  00F0               	movwf	?_pause
   833  067C  01F1               	clrf	?_pause+1
   834  067D  120A  118A  23EB   	fcall	_pause
      +       120A  118A         
   835                           
   836                           ;C_PuertoSerial_usart.c: 124: ((RA6=1),(RA6=0));
   837  0682  1283               	bcf	3,5	;RP0=0, select bank0
   838  0683  1303               	bcf	3,6	;RP1=0, select bank0
   839  0684  300A               	movlw	10
   840  0685  1705               	bsf	5,6
   841  0686  1305               	bcf	5,6
   842                           
   843                           ;C_PuertoSerial_usart.c: 125: pause(10);
   844  0687  00F0               	movwf	?_pause
   845  0688  01F1               	clrf	?_pause+1
   846  0689  120A  118A  23EB   	fcall	_pause
      +       120A  118A         
   847                           
   848                           ;C_PuertoSerial_usart.c: 126: PORTD=2;
   849  068E  3002               	movlw	2
   850  068F  1283               	bcf	3,5	;RP0=0, select bank0
   851  0690  1303               	bcf	3,6	;RP1=0, select bank0
   852  0691  0088               	movwf	8	;volatile
   853  0692  3028               	movlw	40
   854                           
   855                           ;C_PuertoSerial_usart.c: 127: ((RA6=1),(RA6=0));
   856  0693  1705               	bsf	5,6
   857  0694  1305               	bcf	5,6
   858                           
   859                           ;C_PuertoSerial_usart.c: 129: lcd_write(0x28);
   860  0695  120A  118A  23D9   	fcall	_lcd_write
      +       120A  118A         
   861                           
   862                           ;C_PuertoSerial_usart.c: 130: lcd_write(0xC);
   863  069A  300C               	movlw	12
   864  069B  120A  118A  23D9   	fcall	_lcd_write
      +       120A  118A         
   865                           
   866                           ;C_PuertoSerial_usart.c: 131: lcd_clear();
   867  06A0  120A  118A  23B1   	fcall	_lcd_clear
      +       120A  118A         
   868                           
   869                           ;C_PuertoSerial_usart.c: 132: lcd_write(0x06);
   870  06A5  3006               	movlw	6
   871  06A6  120A  118A  23D9   	fcall	_lcd_write
      +       120A  118A         
   872                           
   873                           ;C_PuertoSerial_usart.c: 135: TRISC7=1;
   874  06AB  1683               	bsf	3,5	;RP0=1, select bank1
   875  06AC  3070               	movlw	112
   876  06AD  1787               	bsf	7,7
   877                           
   878                           ;C_PuertoSerial_usart.c: 136: TRISC6=0;
   879  06AE  1307               	bcf	7,6
   880                           
   881                           ;C_PuertoSerial_usart.c: 137: OSCCON=0x70;
   882  06AF  008F               	movwf	15	;volatile
   883                           
   884                           ;C_PuertoSerial_usart.c: 138: SPBRG=12;
   885  06B0  300C               	movlw	12
   886  06B1  0099               	movwf	25	;volatile
   887                           
   888                           ;C_PuertoSerial_usart.c: 139: RCSTA=0x90;
   889  06B2  3090               	movlw	144
   890  06B3  1283               	bcf	3,5	;RP0=0, select bank0
   891  06B4  0098               	movwf	24	;volatile
   892                           
   893                           ;C_PuertoSerial_usart.c: 140: TXSTA=0x20;
   894  06B5  3020               	movlw	32
   895  06B6  1683               	bsf	3,5	;RP0=1, select bank1
   896  06B7  0098               	movwf	24	;volatile
   897                           
   898                           ;C_PuertoSerial_usart.c: 141: BAUDCTL=0x00;
   899  06B8  1703               	bsf	3,6	;RP1=1, select bank3
   900  06B9  0187               	clrf	7	;volatile
   901                           
   902                           ;C_PuertoSerial_usart.c: 142: pause(500);
   903  06BA  30F4               	movlw	244
   904  06BB  00F0               	movwf	?_pause
   905  06BC  3001               	movlw	1
   906  06BD  00F1               	movwf	?_pause+1
   907  06BE  120A  118A  23EB   	fcall	_pause
      +       120A  118A         
   908                           
   909                           ;C_PuertoSerial_usart.c: 145: PORTA=0x01;
   910  06C3  3001               	movlw	1
   911  06C4  1283               	bcf	3,5	;RP0=0, select bank0
   912  06C5  1303               	bcf	3,6	;RP1=0, select bank0
   913  06C6  0085               	movwf	5	;volatile
   914                           
   915                           ;C_PuertoSerial_usart.c: 150: char char_recibido;
   916                           ;C_PuertoSerial_usart.c: 151: char char_pwm;
   917                           ;C_PuertoSerial_usart.c: 152: char buffer[15];
   918                           ;C_PuertoSerial_usart.c: 155: unsigned char pos=0;
   919  06C7  30FF               	movlw	255
   920  06C8  0085               	movwf	5
   921                           
   922                           ;C_PuertoSerial_usart.c: 156: for(int i=48; i<58; i++){
   923  06C9  3030               	movlw	48
   924  06CA  00C1               	movwf	main@i
   925  06CB  01C2               	clrf	main@i+1
   926  06CC                     l3526:	
   927                           
   928                           ;C_PuertoSerial_usart.c: 157: putch(i);
   929  06CC  1283               	bcf	3,5	;RP0=0, select bank0
   930  06CD  1303               	bcf	3,6	;RP1=0, select bank0
   931  06CE  0841               	movf	main@i,w
   932  06CF  120A  118A  2352   	fcall	_putch
      +       120A  118A         
   933                           
   934                           ;C_PuertoSerial_usart.c: 158: pause(20);
   935  06D4  3014               	movlw	20
   936  06D5  00F0               	movwf	?_pause
   937  06D6  01F1               	clrf	?_pause+1
   938  06D7  120A  118A  23EB   	fcall	_pause
      +       120A  118A         
   939  06DC  1283               	bcf	3,5	;RP0=0, select bank0
   940  06DD  1303               	bcf	3,6	;RP1=0, select bank0
   941  06DE  0AC1               	incf	main@i,f
   942  06DF  1903               	skipnz
   943  06E0  0AC2               	incf	main@i+1,f
   944  06E1  0842               	movf	main@i+1,w
   945  06E2  3A80               	xorlw	128
   946  06E3  00FF               	movwf	127
   947  06E4  3080               	movlw	128
   948  06E5  027F               	subwf	127,w
   949  06E6  1D03               	skipz
   950  06E7  2EEA               	goto	u1075
   951  06E8  303A               	movlw	58
   952  06E9  0241               	subwf	main@i,w
   953  06EA                     u1075:	
   954  06EA  1C03               	skipc
   955  06EB  2ECC               	goto	l3526
   956                           
   957                           ;C_PuertoSerial_usart.c: 159: }
   958                           ;C_PuertoSerial_usart.c: 160: putch(0x0D);
   959  06EC  300D               	movlw	13
   960  06ED  120A  118A  2352   	fcall	_putch
      +       120A  118A         
   961                           
   962                           ;C_PuertoSerial_usart.c: 161: putch(0x0A);
   963  06F2  300A               	movlw	10
   964  06F3  120A  118A  2352   	fcall	_putch
      +       120A  118A         
   965                           
   966                           ;C_PuertoSerial_usart.c: 163: for(int i=97; i<123; i++){
   967  06F8  3061               	movlw	97
   968  06F9  00C3               	movwf	main@i_1830
   969  06FA  01C4               	clrf	main@i_1830+1
   970  06FB                     l3540:	
   971                           
   972                           ;C_PuertoSerial_usart.c: 164: putch(i);
   973  06FB  1283               	bcf	3,5	;RP0=0, select bank0
   974  06FC  1303               	bcf	3,6	;RP1=0, select bank0
   975  06FD  0843               	movf	main@i_1830,w
   976  06FE  120A  118A  2352   	fcall	_putch
      +       120A  118A         
   977                           
   978                           ;C_PuertoSerial_usart.c: 165: pause(20);
   979  0703  3014               	movlw	20
   980  0704  00F0               	movwf	?_pause
   981  0705  01F1               	clrf	?_pause+1
   982  0706  120A  118A  23EB   	fcall	_pause
      +       120A  118A         
   983  070B  1283               	bcf	3,5	;RP0=0, select bank0
   984  070C  1303               	bcf	3,6	;RP1=0, select bank0
   985  070D  0AC3               	incf	main@i_1830,f
   986  070E  1903               	skipnz
   987  070F  0AC4               	incf	main@i_1830+1,f
   988  0710  0844               	movf	main@i_1830+1,w
   989  0711  3A80               	xorlw	128
   990  0712  00FF               	movwf	127
   991  0713  3080               	movlw	128
   992  0714  027F               	subwf	127,w
   993  0715  1D03               	skipz
   994  0716  2F19               	goto	u1085
   995  0717  307B               	movlw	123
   996  0718  0243               	subwf	main@i_1830,w
   997  0719                     u1085:	
   998  0719  1C03               	skipc
   999  071A  2EFB               	goto	l3540
  1000                           
  1001                           ;C_PuertoSerial_usart.c: 166: }
  1002                           ;C_PuertoSerial_usart.c: 167: putch(0x0D);
  1003  071B  300D               	movlw	13
  1004  071C  120A  118A  2352   	fcall	_putch
      +       120A  118A         
  1005                           
  1006                           ;C_PuertoSerial_usart.c: 168: putch(0x0A);
  1007  0721  300A               	movlw	10
  1008  0722  120A  118A  2352   	fcall	_putch
      +       120A  118A         
  1009                           
  1010                           ;C_PuertoSerial_usart.c: 169: PORTA=0x00;
  1011  0727  0185               	clrf	5	;volatile
  1012                           
  1013                           ;C_PuertoSerial_usart.c: 170: pause(1000);
  1014  0728  30E8               	movlw	232
  1015  0729  00F0               	movwf	?_pause
  1016  072A  3003               	movlw	3
  1017  072B  00F1               	movwf	?_pause+1
  1018  072C  120A  118A  23EB   	fcall	_pause
      +       120A  118A         
  1019                           
  1020                           ;C_PuertoSerial_usart.c: 175: gets_Serial(&buffer);
  1021  0731  3030               	movlw	main@buffer& (0+255)
  1022  0732  120A  118A  236D   	fcall	_gets_Serial
      +       120A  118A         
  1023  0737                     l3554:	
  1024                           
  1025                           ;C_PuertoSerial_usart.c: 178: int val;
  1026                           ;C_PuertoSerial_usart.c: 180: lcd_clear();
  1027  0737  120A  118A  23B1   	fcall	_lcd_clear
      +       120A  118A         
  1028                           
  1029                           ;C_PuertoSerial_usart.c: 182: ADCON0=0b11010101;
  1030  073C  30D5               	movlw	213
  1031  073D  1283               	bcf	3,5	;RP0=0, select bank0
  1032  073E  1303               	bcf	3,6	;RP1=0, select bank0
  1033  073F  009F               	movwf	31	;volatile
  1034                           
  1035                           ;C_PuertoSerial_usart.c: 183: GO_DONE = 1;
  1036  0740  149F               	bsf	31,1
  1037  0741                     l1092:	
  1038                           ;C_PuertoSerial_usart.c: 184: while (GO_DONE ==1);
  1039                           
  1040  0741  189F               	btfsc	31,1
  1041  0742  2F41               	goto	l1092
  1042                           
  1043                           ;C_PuertoSerial_usart.c: 185: nin=(ADRESH<<2)|(ADRESL>>6);
  1044  0743  081E               	movf	30,w	;volatile
  1045  0744  00C7               	movwf	_nin
  1046  0745  01C8               	clrf	_nin+1
  1047  0746  1003               	clrc
  1048  0747  0DC7               	rlf	_nin,f
  1049  0748  0DC8               	rlf	_nin+1,f
  1050  0749  1003               	clrc
  1051  074A  0DC7               	rlf	_nin,f
  1052  074B  0DC8               	rlf	_nin+1,f
  1053  074C  1683               	bsf	3,5	;RP0=1, select bank1
  1054  074D  081E               	movf	30,w	;volatile
  1055  074E  1283               	bcf	3,5	;RP0=0, select bank0
  1056  074F  00AF               	movwf	??_main
  1057  0750  3006               	movlw	6
  1058  0751                     u1105:	
  1059  0751  1003               	clrc
  1060  0752  0CAF               	rrf	??_main,f
  1061  0753  3EFF               	addlw	-1
  1062  0754  1D03               	skipz
  1063  0755  2F51               	goto	u1105
  1064  0756  082F               	movf	??_main,w
  1065  0757  04C7               	iorwf	_nin,f
  1066                           
  1067                           ;C_PuertoSerial_usart.c: 186: CCPR1L=ADRESH;
  1068  0758  081E               	movf	30,w	;volatile
  1069  0759  0095               	movwf	21	;volatile
  1070                           
  1071                           ;C_PuertoSerial_usart.c: 189: int num_f = 255;
  1072  075A  3028               	movlw	40
  1073  075B  00A0               	movwf	?___ftmul
  1074  075C  30A0               	movlw	160
  1075  075D  00A1               	movwf	?___ftmul+1
  1076  075E  303B               	movlw	59
  1077  075F  00A2               	movwf	?___ftmul+2
  1078  0760  0848               	movf	_nin+1,w
  1079  0761  00F9               	movwf	?___awtoft+1
  1080  0762  0847               	movf	_nin,w
  1081  0763  00F8               	movwf	?___awtoft
  1082  0764  120A  118A  2488   	fcall	___awtoft
      +       120A  118A         
  1083  0769  0878               	movf	?___awtoft,w
  1084  076A  00A3               	movwf	?___ftmul+3
  1085  076B  0879               	movf	?___awtoft+1,w
  1086  076C  00A4               	movwf	?___ftmul+4
  1087  076D  087A               	movf	?___awtoft+2,w
  1088  076E  00A5               	movwf	?___ftmul+5
  1089  076F  120A  118A  24A3   	fcall	___ftmul
      +       120A  118A         
  1090                           
  1091                           ;C_PuertoSerial_usart.c: 191: sprintf(buffer,"El valor es:%i  ", nin);
  1092  0774  300B               	movlw	(STR_1-__stringbase)& (0+255)
  1093  0775  00A0               	movwf	?_sprintf
  1094  0776  0848               	movf	_nin+1,w
  1095  0777  00A2               	movwf	?_sprintf+2
  1096  0778  0847               	movf	_nin,w
  1097  0779  00A1               	movwf	?_sprintf+1
  1098  077A  3030               	movlw	main@buffer& (0+255)
  1099  077B  120A  118A  255A   	fcall	_sprintf
      +       120A  118A         
  1100                           
  1101                           ;C_PuertoSerial_usart.c: 194: for (char x = 0; x<17; x++)
  1102  0780  01C5               	clrf	main@x
  1103  0781                     l3576:	
  1104                           
  1105                           ;C_PuertoSerial_usart.c: 195: {
  1106                           ;C_PuertoSerial_usart.c: 196: putch (buffer[x]);
  1107  0781  0845               	movf	main@x,w
  1108  0782  3E30               	addlw	main@buffer& (0+255)
  1109  0783  0084               	movwf	4
  1110  0784  0800               	movf	0,w
  1111  0785  120A  118A  2352   	fcall	_putch
      +       120A  118A         
  1112  078A  3011               	movlw	17
  1113  078B  0AC5               	incf	main@x,f
  1114  078C  0245               	subwf	main@x,w
  1115  078D  1C03               	skipc
  1116  078E  2F81               	goto	l3576
  1117                           
  1118                           ;C_PuertoSerial_usart.c: 197: }
  1119                           ;C_PuertoSerial_usart.c: 198: pause(200);
  1120  078F  30C8               	movlw	200
  1121  0790  00F0               	movwf	?_pause
  1122  0791  01F1               	clrf	?_pause+1
  1123  0792  120A  118A  23EB   	fcall	_pause
      +       120A  118A         
  1124                           
  1125                           ;C_PuertoSerial_usart.c: 200: putch(0x0D);
  1126  0797  300D               	movlw	13
  1127  0798  120A  118A  2352   	fcall	_putch
      +       120A  118A         
  1128                           
  1129                           ;C_PuertoSerial_usart.c: 201: putch(0x0A);
  1130  079D  300A               	movlw	10
  1131  079E  120A  118A  2352   	fcall	_putch
      +       120A  118A         
  1132                           
  1133                           ;C_PuertoSerial_usart.c: 204: gets_Serial(&input);
  1134  07A3  3049               	movlw	_input& (0+255)
  1135  07A4  120A  118A  236D   	fcall	_gets_Serial
      +       120A  118A         
  1136                           
  1137                           ;C_PuertoSerial_usart.c: 207: for (char x = 0; x<15; x++)
  1138  07A9  1283               	bcf	3,5	;RP0=0, select bank0
  1139  07AA  1303               	bcf	3,6	;RP1=0, select bank0
  1140  07AB  01C6               	clrf	main@x_1835
  1141  07AC                     l3592:	
  1142                           
  1143                           ;C_PuertoSerial_usart.c: 208: {
  1144                           ;C_PuertoSerial_usart.c: 209: putch (input[x]);
  1145  07AC  0846               	movf	main@x_1835,w
  1146  07AD  3E49               	addlw	_input& (0+255)
  1147  07AE  0084               	movwf	4
  1148  07AF  1383               	bcf	3,7	;select IRP bank0
  1149  07B0  0800               	movf	0,w
  1150  07B1  120A  118A  2352   	fcall	_putch
      +       120A  118A         
  1151  07B6  300F               	movlw	15
  1152  07B7  0AC6               	incf	main@x_1835,f
  1153  07B8  0246               	subwf	main@x_1835,w
  1154  07B9  1C03               	skipc
  1155  07BA  2FAC               	goto	l3592
  1156                           
  1157                           ;C_PuertoSerial_usart.c: 210: }
  1158                           ;C_PuertoSerial_usart.c: 211: pause(200);
  1159  07BB  30C8               	movlw	200
  1160  07BC  00F0               	movwf	?_pause
  1161  07BD  01F1               	clrf	?_pause+1
  1162  07BE  120A  118A  23EB   	fcall	_pause
      +       120A  118A         
  1163                           
  1164                           ;C_PuertoSerial_usart.c: 215: PORTB = atoi(input);
  1165  07C3  3049               	movlw	_input& (0+255)
  1166  07C4  120A  118A  2407   	fcall	_atoi
      +       120A  118A         
  1167  07C9  0876               	movf	?_atoi,w
  1168  07CA  1283               	bcf	3,5	;RP0=0, select bank0
  1169  07CB  1303               	bcf	3,6	;RP1=0, select bank0
  1170  07CC  0086               	movwf	6	;volatile
  1171                           
  1172                           ;C_PuertoSerial_usart.c: 218: lcd_goto(0);
  1173  07CD  3000               	movlw	0
  1174  07CE  120A  118A  23AD   	fcall	_lcd_goto
      +       120A  118A         
  1175                           
  1176                           ;C_PuertoSerial_usart.c: 219: lcd_puts(input);
  1177  07D3  3049               	movlw	_input& (0+255)
  1178  07D4  00F5               	movwf	?_lcd_puts
  1179  07D5  01F6               	clrf	?_lcd_puts+1
  1180  07D6  120A  118A  23BC   	fcall	_lcd_puts
      +       120A  118A         
  1181                           
  1182                           ;C_PuertoSerial_usart.c: 220: lcd_goto(0x40);
  1183  07DB  3040               	movlw	64
  1184  07DC  120A  118A  23AD   	fcall	_lcd_goto
      +       120A  118A         
  1185                           
  1186                           ;C_PuertoSerial_usart.c: 221: lcd_puts(val);
  1187  07E1  083F               	movf	main@val,w
  1188  07E2  00F5               	movwf	?_lcd_puts
  1189  07E3  3080               	movlw	128
  1190  07E4  00F6               	movwf	?_lcd_puts+1
  1191  07E5  120A  118A  23BC   	fcall	_lcd_puts
      +       120A  118A         
  1192                           
  1193                           ;C_PuertoSerial_usart.c: 223: pause(2000);
  1194  07EA  30D0               	movlw	208
  1195  07EB  00F0               	movwf	?_pause
  1196  07EC  3007               	movlw	7
  1197  07ED  00F1               	movwf	?_pause+1
  1198  07EE  120A  118A  23EB   	fcall	_pause
      +       120A  118A         
  1199                           
  1200                           ;C_PuertoSerial_usart.c: 225: putch(0x0D);
  1201  07F3  300D               	movlw	13
  1202  07F4  120A  118A  2352   	fcall	_putch
      +       120A  118A         
  1203                           
  1204                           ;C_PuertoSerial_usart.c: 226: putch(0x0A);
  1205  07F9  300A               	movlw	10
  1206  07FA  120A  118A  2352   	fcall	_putch
      +       120A  118A         
  1207  07FF  2F37               	goto	l3554
  1208  0800                     __end_of_main:	
  1209                           
  1210                           	psect	text342
  1211  03AD                     __ptext342:	
  1212 ;; =============== function _main ends ============
  1213                           
  1214                           
  1215 ;; *************** function _lcd_goto *****************
  1216 ;; Defined at:
  1217 ;;		line 89 in file "C:\Users\petir\Documents\PIC_PROG\C_PuertoSerial\C_PuertoSerial_usart.c"
  1218 ;; Parameters:    Size  Location     Type
  1219 ;;  pos             1    wreg     unsigned char 
  1220 ;; Auto vars:     Size  Location     Type
  1221 ;;  pos             1    5[COMMON] unsigned char 
  1222 ;; Return value:  Size  Location     Type
  1223 ;;		None               void
  1224 ;; Registers used:
  1225 ;;		wreg, status,2, status,0, pclath, cstack
  1226 ;; Tracked objects:
  1227 ;;		On entry : 60/0
  1228 ;;		On exit  : 60/0
  1229 ;;		Unchanged: FFF9F/0
  1230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1231 ;;      Params:         0       0       0       0       0
  1232 ;;      Locals:         1       0       0       0       0
  1233 ;;      Temps:          0       0       0       0       0
  1234 ;;      Totals:         1       0       0       0       0
  1235 ;;Total ram usage:        1 bytes
  1236 ;; Hardware stack levels used:    1
  1237 ;; Hardware stack levels required when called:    3
  1238 ;; This function calls:
  1239 ;;		_lcd_write
  1240 ;; This function is called by:
  1241 ;;		_main
  1242 ;; This function uses a non-reentrant model
  1243 ;;
  1244  03AD                     _lcd_goto:	
  1245                           
  1246                           ; Regs used in _lcd_goto: [wreg+status,2+status,0+pclath+cstack]
  1247                           ;lcd_goto@pos stored from wreg
  1248  03AD  00F5               	movwf	lcd_goto@pos
  1249                           
  1250                           ;C_PuertoSerial_usart.c: 90: RA7=0;
  1251  03AE  1385               	bcf	5,7
  1252                           
  1253                           ;C_PuertoSerial_usart.c: 91: lcd_write(0x80+pos);
  1254  03AF  3E80               	addlw	128
  1255  03B0  2BD9               	ljmp	_lcd_write
  1256  03B1                     __end_of_lcd_goto:	
  1257  03B1                     __ptext344:	
  1258 ;; =============== function _lcd_puts ends ============
  1259                           
  1260                           
  1261 ;; *************** function _lcd_clear *****************
  1262 ;; Defined at:
  1263 ;;		line 69 in file "C:\Users\petir\Documents\PIC_PROG\C_PuertoSerial\C_PuertoSerial_usart.c"
  1264 ;; Parameters:    Size  Location     Type
  1265 ;;		None
  1266 ;; Auto vars:     Size  Location     Type
  1267 ;;		None
  1268 ;; Return value:  Size  Location     Type
  1269 ;;		None               void
  1270 ;; Registers used:
  1271 ;;		wreg, status,2, status,0, pclath, cstack
  1272 ;; Tracked objects:
  1273 ;;		On entry : 0/0
  1274 ;;		On exit  : 0/0
  1275 ;;		Unchanged: FFF9F/0
  1276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1277 ;;      Params:         0       0       0       0       0
  1278 ;;      Locals:         0       0       0       0       0
  1279 ;;      Temps:          0       0       0       0       0
  1280 ;;      Totals:         0       0       0       0       0
  1281 ;;Total ram usage:        0 bytes
  1282 ;; Hardware stack levels used:    1
  1283 ;; Hardware stack levels required when called:    3
  1284 ;; This function calls:
  1285 ;;		_lcd_write
  1286 ;;		_pause
  1287 ;; This function is called by:
  1288 ;;		_main
  1289 ;; This function uses a non-reentrant model
  1290 ;;
  1291  03B1                     _lcd_clear:	
  1292                           
  1293                           ;C_PuertoSerial_usart.c: 70: RA7=0;
  1294                           
  1295                           ; Regs used in _lcd_clear: [wreg+status,2+status,0+pclath+cstack]
  1296  03B1  1283               	bcf	3,5	;RP0=0, select bank0
  1297  03B2  1303               	bcf	3,6	;RP1=0, select bank0
  1298  03B3  3001               	movlw	1
  1299  03B4  1385               	bcf	5,7
  1300                           
  1301                           ;C_PuertoSerial_usart.c: 71: lcd_write(0x1);
  1302  03B5  23D9  120A  118A   	fcall	_lcd_write
  1303                           
  1304                           ;C_PuertoSerial_usart.c: 72: pause(2);
  1305  03B8  3002               	movlw	2
  1306  03B9  00F0               	movwf	?_pause
  1307  03BA  01F1               	clrf	?_pause+1
  1308  03BB  2BEB               	ljmp	l3224
  1309  03BC                     __end_of_lcd_clear:	
  1310  03BC                     __ptext343:	
  1311 ;; =============== function _lcd_goto ends ============
  1312                           
  1313                           
  1314 ;; *************** function _lcd_puts *****************
  1315 ;; Defined at:
  1316 ;;		line 76 in file "C:\Users\petir\Documents\PIC_PROG\C_PuertoSerial\C_PuertoSerial_usart.c"
  1317 ;; Parameters:    Size  Location     Type
  1318 ;;  s               2    5[COMMON] PTR const unsigned char 
  1319 ;;		 -> ROM(8192), input(17), 
  1320 ;; Auto vars:     Size  Location     Type
  1321 ;;		None
  1322 ;; Return value:  Size  Location     Type
  1323 ;;		None               void
  1324 ;; Registers used:
  1325 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1326 ;; Tracked objects:
  1327 ;;		On entry : 60/0
  1328 ;;		On exit  : 60/0
  1329 ;;		Unchanged: FFE9F/0
  1330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1331 ;;      Params:         2       0       0       0       0
  1332 ;;      Locals:         0       0       0       0       0
  1333 ;;      Temps:          0       0       0       0       0
  1334 ;;      Totals:         2       0       0       0       0
  1335 ;;Total ram usage:        2 bytes
  1336 ;; Hardware stack levels used:    1
  1337 ;; Hardware stack levels required when called:    3
  1338 ;; This function calls:
  1339 ;;		_lcd_write
  1340 ;; This function is called by:
  1341 ;;		_main
  1342 ;; This function uses a non-reentrant model
  1343 ;;
  1344  03BC                     _lcd_puts:	
  1345                           
  1346                           ;C_PuertoSerial_usart.c: 77: RA7=1;
  1347                           
  1348                           ; Regs used in _lcd_puts: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1349  03BC  1785               	bsf	5,7
  1350  03BD                     l3446:	
  1351                           ;C_PuertoSerial_usart.c: 78: while(*s)
  1352                           
  1353  03BD  0876               	movf	lcd_puts@s+1,w
  1354  03BE  00FF               	movwf	127
  1355  03BF  0875               	movf	lcd_puts@s,w
  1356  03C0  0084               	movwf	4
  1357  03C1  120A  118A  2003   	fcall	stringtab
      +       120A  118A         
  1358  03C6  3800               	iorlw	0
  1359  03C7  1903               	btfsc	3,2
  1360  03C8  0008               	return
  1361                           
  1362                           ;C_PuertoSerial_usart.c: 79: lcd_write(*s++);
  1363  03C9  0876               	movf	lcd_puts@s+1,w
  1364  03CA  00FF               	movwf	127
  1365  03CB  0875               	movf	lcd_puts@s,w
  1366  03CC  0084               	movwf	4
  1367  03CD  120A  118A  2003   	fcall	stringtab
      +       120A  118A         
  1368  03D2  23D9  120A  118A   	fcall	_lcd_write
  1369  03D5  0AF5               	incf	lcd_puts@s,f
  1370  03D6  1903               	skipnz
  1371  03D7  0AF6               	incf	lcd_puts@s+1,f
  1372  03D8  2BBD               	goto	l3446
  1373  03D9                     __end_of_lcd_puts:	
  1374  03D9                     __ptext345:	
  1375 ;; =============== function _lcd_clear ends ============
  1376                           
  1377                           
  1378 ;; *************** function _lcd_write *****************
  1379 ;; Defined at:
  1380 ;;		line 60 in file "C:\Users\petir\Documents\PIC_PROG\C_PuertoSerial\C_PuertoSerial_usart.c"
  1381 ;; Parameters:    Size  Location     Type
  1382 ;;  c               1    wreg     unsigned char 
  1383 ;; Auto vars:     Size  Location     Type
  1384 ;;  c               1    4[COMMON] unsigned char 
  1385 ;; Return value:  Size  Location     Type
  1386 ;;		None               void
  1387 ;; Registers used:
  1388 ;;		wreg, status,2, status,0, pclath, cstack
  1389 ;; Tracked objects:
  1390 ;;		On entry : 0/0
  1391 ;;		On exit  : 60/0
  1392 ;;		Unchanged: FFF9F/0
  1393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1394 ;;      Params:         0       0       0       0       0
  1395 ;;      Locals:         1       0       0       0       0
  1396 ;;      Temps:          0       0       0       0       0
  1397 ;;      Totals:         1       0       0       0       0
  1398 ;;Total ram usage:        1 bytes
  1399 ;; Hardware stack levels used:    1
  1400 ;; Hardware stack levels required when called:    2
  1401 ;; This function calls:
  1402 ;;		_pause
  1403 ;; This function is called by:
  1404 ;;		_lcd_clear
  1405 ;;		_lcd_puts
  1406 ;;		_lcd_goto
  1407 ;;		_main
  1408 ;; This function uses a non-reentrant model
  1409 ;;
  1410  03D9                     _lcd_write:	
  1411                           
  1412                           ; Regs used in _lcd_write: [wreg+status,2+status,0+pclath+cstack]
  1413                           ;lcd_write@c stored from wreg
  1414  03D9  00F4               	movwf	lcd_write@c
  1415                           
  1416                           ;C_PuertoSerial_usart.c: 61: pause(1);
  1417  03DA  01F0               	clrf	?_pause
  1418  03DB  0AF0               	incf	?_pause,f
  1419  03DC  01F1               	clrf	?_pause+1
  1420  03DD  23EB               	fcall	_pause
  1421                           
  1422                           ;C_PuertoSerial_usart.c: 62: PORTD=((c >> 4) & 0x0F);
  1423  03DE  0E74               	swapf	lcd_write@c,w
  1424  03DF  390F               	andlw	15
  1425  03E0  1283               	bcf	3,5	;RP0=0, select bank0
  1426  03E1  1303               	bcf	3,6	;RP1=0, select bank0
  1427  03E2  0088               	movwf	8	;volatile
  1428                           
  1429                           ;C_PuertoSerial_usart.c: 63: ((RA6=1),(RA6=0));
  1430  03E3  1705               	bsf	5,6
  1431  03E4  1305               	bcf	5,6
  1432                           
  1433                           ;C_PuertoSerial_usart.c: 64: PORTD=(c & 0x0F);
  1434  03E5  0874               	movf	lcd_write@c,w
  1435  03E6  390F               	andlw	15
  1436  03E7  0088               	movwf	8	;volatile
  1437                           
  1438                           ;C_PuertoSerial_usart.c: 65: ((RA6=1),(RA6=0));
  1439  03E8  1705               	bsf	5,6
  1440  03E9  1305               	bcf	5,6
  1441  03EA  0008               	return
  1442  03EB                     __end_of_lcd_write:	
  1443  03EB                     __ptext351:	
  1444 ;; =============== function _gets_Serial ends ============
  1445                           
  1446                           
  1447 ;; *************** function _pause *****************
  1448 ;; Defined at:
  1449 ;;		line 21 in file "C:\Users\petir\Documents\PIC_PROG\C_PuertoSerial\C_PuertoSerial_usart.c"
  1450 ;; Parameters:    Size  Location     Type
  1451 ;;  msvalue         2    0[COMMON] unsigned short 
  1452 ;; Auto vars:     Size  Location     Type
  1453 ;;  x               2    2[COMMON] unsigned short 
  1454 ;; Return value:  Size  Location     Type
  1455 ;;		None               void
  1456 ;; Registers used:
  1457 ;;		wreg, status,2, status,0, pclath, cstack
  1458 ;; Tracked objects:
  1459 ;;		On entry : 0/0
  1460 ;;		On exit  : 0/0
  1461 ;;		Unchanged: FFF9F/0
  1462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1463 ;;      Params:         2       0       0       0       0
  1464 ;;      Locals:         2       0       0       0       0
  1465 ;;      Temps:          0       0       0       0       0
  1466 ;;      Totals:         4       0       0       0       0
  1467 ;;Total ram usage:        4 bytes
  1468 ;; Hardware stack levels used:    1
  1469 ;; Hardware stack levels required when called:    1
  1470 ;; This function calls:
  1471 ;;		_msecbase
  1472 ;; This function is called by:
  1473 ;;		_lcd_write
  1474 ;;		_lcd_clear
  1475 ;;		_main
  1476 ;; This function uses a non-reentrant model
  1477 ;;
  1478  03EB                     _pause:	
  1479  03EB                     l3224:	
  1480                           ; Regs used in _pause: [wreg+status,2+status,0+pclath+cstack]
  1481                           
  1482                           
  1483                           ;C_PuertoSerial_usart.c: 22: for (unsigned short x=0; x<=msvalue; x++) msecbase();
  1484  03EB  01F2               	clrf	pause@x
  1485  03EC  01F3               	clrf	pause@x+1
  1486  03ED                     l3230:	
  1487  03ED  0873               	movf	pause@x+1,w
  1488  03EE  0271               	subwf	pause@msvalue+1,w
  1489  03EF  1D03               	skipz
  1490  03F0  2BF3               	goto	u795
  1491  03F1  0872               	movf	pause@x,w
  1492  03F2  0270               	subwf	pause@msvalue,w
  1493  03F3                     u795:	
  1494  03F3  1C03               	btfss	3,0
  1495  03F4  0008               	return
  1496  03F5  23FC  120A  118A   	fcall	_msecbase
  1497  03F8  0AF2               	incf	pause@x,f
  1498  03F9  1903               	skipnz
  1499  03FA  0AF3               	incf	pause@x+1,f
  1500  03FB  2BED               	goto	l3230
  1501  03FC                     __end_of_pause:	
  1502  03FC                     __ptext359:	
  1503 ;; =============== function _putch ends ============
  1504                           
  1505                           
  1506 ;; *************** function _msecbase *****************
  1507 ;; Defined at:
  1508 ;;		line 12 in file "C:\Users\petir\Documents\PIC_PROG\C_PuertoSerial\C_PuertoSerial_usart.c"
  1509 ;; Parameters:    Size  Location     Type
  1510 ;;		None
  1511 ;; Auto vars:     Size  Location     Type
  1512 ;;		None
  1513 ;; Return value:  Size  Location     Type
  1514 ;;		None               void
  1515 ;; Registers used:
  1516 ;;		wreg
  1517 ;; Tracked objects:
  1518 ;;		On entry : 0/0
  1519 ;;		On exit  : 0/0
  1520 ;;		Unchanged: FFF9F/0
  1521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1522 ;;      Params:         0       0       0       0       0
  1523 ;;      Locals:         0       0       0       0       0
  1524 ;;      Temps:          0       0       0       0       0
  1525 ;;      Totals:         0       0       0       0       0
  1526 ;;Total ram usage:        0 bytes
  1527 ;; Hardware stack levels used:    1
  1528 ;; This function calls:
  1529 ;;		Nothing
  1530 ;; This function is called by:
  1531 ;;		_pause
  1532 ;; This function uses a non-reentrant model
  1533 ;;
  1534  03FC                     _msecbase:	
  1535                           
  1536                           ;C_PuertoSerial_usart.c: 15: OPTION_REG = 0b00000001;
  1537                           
  1538                           ; Regs used in _msecbase: [wreg]
  1539  03FC  3001               	movlw	1
  1540  03FD  1683               	bsf	3,5	;RP0=1, select bank1
  1541  03FE  1303               	bcf	3,6	;RP1=0, select bank1
  1542  03FF  0081               	movwf	1	;volatile
  1543                           
  1544                           ;C_PuertoSerial_usart.c: 16: TMR0 = 0x07;
  1545  0400  3007               	movlw	7
  1546  0401  1283               	bcf	3,5	;RP0=0, select bank0
  1547  0402  0081               	movwf	1	;volatile
  1548  0403                     l1057:	
  1549                           ;C_PuertoSerial_usart.c: 17: while(!T0IF);
  1550                           
  1551  0403  1D0B               	btfss	11,2
  1552  0404  2C03               	goto	l1057
  1553                           
  1554                           ;C_PuertoSerial_usart.c: 18: T0IF = 0;
  1555  0405  110B               	bcf	11,2
  1556  0406  0008               	return
  1557  0407                     __end_of_msecbase:	
  1558                           
  1559                           	psect	text346
  1560  0488                     __ptext346:	
  1561 ;; =============== function _lcd_write ends ============
  1562                           
  1563                           
  1564 ;; *************** function ___awtoft *****************
  1565 ;; Defined at:
  1566 ;;		line 33 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\awtoft.c"
  1567 ;; Parameters:    Size  Location     Type
  1568 ;;  c               2    8[COMMON] int 
  1569 ;; Auto vars:     Size  Location     Type
  1570 ;;  sign            1   11[COMMON] unsigned char 
  1571 ;; Return value:  Size  Location     Type
  1572 ;;                  3    8[COMMON] float 
  1573 ;; Registers used:
  1574 ;;		wreg, status,2, status,0, pclath, cstack
  1575 ;; Tracked objects:
  1576 ;;		On entry : 60/0
  1577 ;;		On exit  : 60/0
  1578 ;;		Unchanged: FFF9F/0
  1579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1580 ;;      Params:         3       0       0       0       0
  1581 ;;      Locals:         1       0       0       0       0
  1582 ;;      Temps:          0       0       0       0       0
  1583 ;;      Totals:         4       0       0       0       0
  1584 ;;Total ram usage:        4 bytes
  1585 ;; Hardware stack levels used:    1
  1586 ;; Hardware stack levels required when called:    1
  1587 ;; This function calls:
  1588 ;;		___ftpack
  1589 ;; This function is called by:
  1590 ;;		_main
  1591 ;; This function uses a non-reentrant model
  1592 ;;
  1593  0488                     ___awtoft:	
  1594                           
  1595                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  1596  0488  01FB               	clrf	___awtoft@sign
  1597  0489  1FF9               	btfss	___awtoft@c+1,7
  1598  048A  2C92               	goto	l3418
  1599  048B  09F8               	comf	___awtoft@c,f
  1600  048C  09F9               	comf	___awtoft@c+1,f
  1601  048D  0AF8               	incf	___awtoft@c,f
  1602  048E  1903               	skipnz
  1603  048F  0AF9               	incf	___awtoft@c+1,f
  1604  0490  01FB               	clrf	___awtoft@sign
  1605  0491  0AFB               	incf	___awtoft@sign,f
  1606  0492                     l3418:	
  1607  0492  0878               	movf	___awtoft@c,w
  1608  0493  00F0               	movwf	?___ftpack
  1609  0494  0879               	movf	___awtoft@c+1,w
  1610  0495  00F1               	movwf	?___ftpack+1
  1611  0496  308E               	movlw	142
  1612  0497  01F2               	clrf	?___ftpack+2
  1613  0498  00F3               	movwf	?___ftpack+3
  1614  0499  087B               	movf	___awtoft@sign,w
  1615  049A  00F4               	movwf	?___ftpack+4
  1616  049B  2512               	fcall	___ftpack
  1617  049C  0870               	movf	?___ftpack,w
  1618  049D  00F8               	movwf	?___awtoft
  1619  049E  0871               	movf	?___ftpack+1,w
  1620  049F  00F9               	movwf	?___awtoft+1
  1621  04A0  0872               	movf	?___ftpack+2,w
  1622  04A1  00FA               	movwf	?___awtoft+2
  1623  04A2  0008               	return
  1624  04A3                     __end_of___awtoft:	
  1625  04A3                     __ptext347:	
  1626 ;; =============== function ___awtoft ends ============
  1627                           
  1628                           
  1629 ;; *************** function ___ftmul *****************
  1630 ;; Defined at:
  1631 ;;		line 52 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\ftmul.c"
  1632 ;; Parameters:    Size  Location     Type
  1633 ;;  f1              3    0[BANK0 ] float 
  1634 ;;  f2              3    3[BANK0 ] float 
  1635 ;; Auto vars:     Size  Location     Type
  1636 ;;  f3_as_produc    3   10[BANK0 ] unsigned um
  1637 ;;  sign            1   14[BANK0 ] unsigned char 
  1638 ;;  cntr            1   13[BANK0 ] unsigned char 
  1639 ;;  exp             1    9[BANK0 ] unsigned char 
  1640 ;; Return value:  Size  Location     Type
  1641 ;;                  3    0[BANK0 ] float 
  1642 ;; Registers used:
  1643 ;;		wreg, status,2, status,0, pclath, cstack
  1644 ;; Tracked objects:
  1645 ;;		On entry : 60/0
  1646 ;;		On exit  : 60/0
  1647 ;;		Unchanged: FFF9F/0
  1648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1649 ;;      Params:         0       6       0       0       0
  1650 ;;      Locals:         0       6       0       0       0
  1651 ;;      Temps:          0       3       0       0       0
  1652 ;;      Totals:         0      15       0       0       0
  1653 ;;Total ram usage:       15 bytes
  1654 ;; Hardware stack levels used:    1
  1655 ;; Hardware stack levels required when called:    1
  1656 ;; This function calls:
  1657 ;;		___ftpack
  1658 ;; This function is called by:
  1659 ;;		_main
  1660 ;; This function uses a non-reentrant model
  1661 ;;
  1662  04A3                     ___ftmul:	
  1663                           
  1664                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  1665  04A3  0820               	movf	___ftmul@f1,w
  1666  04A4  00A6               	movwf	??___ftmul
  1667  04A5  0821               	movf	___ftmul@f1+1,w
  1668  04A6  00A7               	movwf	??___ftmul+1
  1669  04A7  0822               	movf	___ftmul@f1+2,w
  1670  04A8  00A8               	movwf	??___ftmul+2
  1671  04A9  1003               	clrc
  1672  04AA  0D27               	rlf	??___ftmul+1,w
  1673  04AB  0D28               	rlf	??___ftmul+2,w
  1674  04AC  00A9               	movwf	___ftmul@exp
  1675  04AD  08A9               	movf	___ftmul@exp,f
  1676  04AE  1D03               	skipz
  1677  04AF  2CB4               	goto	l3360
  1678  04B0  01A0               	clrf	?___ftmul
  1679  04B1  01A1               	clrf	?___ftmul+1
  1680  04B2  01A2               	clrf	?___ftmul+2
  1681  04B3  0008               	return
  1682  04B4                     l3360:	
  1683  04B4  0823               	movf	___ftmul@f2,w
  1684  04B5  00A6               	movwf	??___ftmul
  1685  04B6  0824               	movf	___ftmul@f2+1,w
  1686  04B7  00A7               	movwf	??___ftmul+1
  1687  04B8  0825               	movf	___ftmul@f2+2,w
  1688  04B9  00A8               	movwf	??___ftmul+2
  1689  04BA  1003               	clrc
  1690  04BB  0D27               	rlf	??___ftmul+1,w
  1691  04BC  0D28               	rlf	??___ftmul+2,w
  1692  04BD  00AE               	movwf	___ftmul@sign
  1693  04BE  08AE               	movf	___ftmul@sign,f
  1694  04BF  1D03               	skipz
  1695  04C0  2CC5               	goto	l3366
  1696  04C1  01A0               	clrf	?___ftmul
  1697  04C2  01A1               	clrf	?___ftmul+1
  1698  04C3  01A2               	clrf	?___ftmul+2
  1699  04C4  0008               	return
  1700  04C5                     l3366:	
  1701  04C5  082E               	movf	___ftmul@sign,w
  1702  04C6  3E7B               	addlw	123
  1703  04C7  07A9               	addwf	___ftmul@exp,f
  1704  04C8  0822               	movf	___ftmul@f1+2,w
  1705  04C9  00AE               	movwf	___ftmul@sign
  1706  04CA  0825               	movf	___ftmul@f2+2,w
  1707  04CB  06AE               	xorwf	___ftmul@sign,f
  1708  04CC  3080               	movlw	128
  1709  04CD  05AE               	andwf	___ftmul@sign,f
  1710  04CE  3007               	movlw	7
  1711  04CF  17A1               	bsf	___ftmul@f1+1,7
  1712  04D0  17A4               	bsf	___ftmul@f2+1,7
  1713  04D1  01A5               	clrf	___ftmul@f2+2
  1714  04D2  01AA               	clrf	___ftmul@f3_as_product
  1715  04D3  01AB               	clrf	___ftmul@f3_as_product+1
  1716  04D4  01AC               	clrf	___ftmul@f3_as_product+2
  1717  04D5  00AD               	movwf	___ftmul@cntr
  1718  04D6                     l3384:	
  1719  04D6  1C20               	btfss	___ftmul@f1,0
  1720  04D7  2CE0               	goto	l3388
  1721  04D8  0823               	movf	___ftmul@f2,w
  1722  04D9  2550  120A  118A   	fcall	PL2	;call to abstracted procedure
  1723  04DC  1803               	skipnc
  1724  04DD  0A25               	incf	___ftmul@f2+2,w
  1725  04DE  1D03               	btfss	3,2
  1726  04DF  07AC               	addwf	___ftmul@f3_as_product+2,f
  1727  04E0                     l3388:	
  1728  04E0  1003               	clrc
  1729  04E1  0CA2               	rrf	___ftmul@f1+2,f
  1730  04E2  0CA1               	rrf	___ftmul@f1+1,f
  1731  04E3  0CA0               	rrf	___ftmul@f1,f
  1732  04E4  1003               	clrc
  1733  04E5  0DA3               	rlf	___ftmul@f2,f
  1734  04E6  0DA4               	rlf	___ftmul@f2+1,f
  1735  04E7  0DA5               	rlf	___ftmul@f2+2,f
  1736  04E8  0BAD               	decfsz	___ftmul@cntr,f
  1737  04E9  2CD6               	goto	l3384
  1738  04EA  3009               	movlw	9
  1739  04EB  00AD               	movwf	___ftmul@cntr
  1740  04EC                     l3396:	
  1741  04EC  1C20               	btfss	___ftmul@f1,0
  1742  04ED  2CF6               	goto	l3400
  1743  04EE  0823               	movf	___ftmul@f2,w
  1744  04EF  2550  120A  118A   	fcall	PL2	;call to abstracted procedure
  1745  04F2  1803               	skipnc
  1746  04F3  0A25               	incf	___ftmul@f2+2,w
  1747  04F4  1D03               	btfss	3,2
  1748  04F5  07AC               	addwf	___ftmul@f3_as_product+2,f
  1749  04F6                     l3400:	
  1750  04F6  1003               	clrc
  1751  04F7  0CA2               	rrf	___ftmul@f1+2,f
  1752  04F8  0CA1               	rrf	___ftmul@f1+1,f
  1753  04F9  0CA0               	rrf	___ftmul@f1,f
  1754  04FA  1003               	clrc
  1755  04FB  0CAC               	rrf	___ftmul@f3_as_product+2,f
  1756  04FC  0CAB               	rrf	___ftmul@f3_as_product+1,f
  1757  04FD  0CAA               	rrf	___ftmul@f3_as_product,f
  1758  04FE  0BAD               	decfsz	___ftmul@cntr,f
  1759  04FF  2CEC               	goto	l3396
  1760  0500  082A               	movf	___ftmul@f3_as_product,w
  1761  0501  00F0               	movwf	?___ftpack
  1762  0502  082B               	movf	___ftmul@f3_as_product+1,w
  1763  0503  00F1               	movwf	?___ftpack+1
  1764  0504  082C               	movf	___ftmul@f3_as_product+2,w
  1765  0505  00F2               	movwf	?___ftpack+2
  1766  0506  0829               	movf	___ftmul@exp,w
  1767  0507  00F3               	movwf	?___ftpack+3
  1768  0508  082E               	movf	___ftmul@sign,w
  1769  0509  00F4               	movwf	?___ftpack+4
  1770  050A  2512               	fcall	___ftpack
  1771  050B  0870               	movf	?___ftpack,w
  1772  050C  00A0               	movwf	?___ftmul
  1773  050D  0871               	movf	?___ftpack+1,w
  1774  050E  00A1               	movwf	?___ftmul+1
  1775  050F  0872               	movf	?___ftpack+2,w
  1776  0510  00A2               	movwf	?___ftmul+2
  1777  0511  0008               	return
  1778  0512                     __end_of___ftmul:	
  1779  0512                     __ptext352:	
  1780 ;; =============== function _pause ends ============
  1781                           
  1782                           
  1783 ;; *************** function ___ftpack *****************
  1784 ;; Defined at:
  1785 ;;		line 63 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\float.c"
  1786 ;; Parameters:    Size  Location     Type
  1787 ;;  arg             3    0[COMMON] unsigned um
  1788 ;;  exp             1    3[COMMON] unsigned char 
  1789 ;;  sign            1    4[COMMON] unsigned char 
  1790 ;; Auto vars:     Size  Location     Type
  1791 ;;		None
  1792 ;; Return value:  Size  Location     Type
  1793 ;;                  3    0[COMMON] float 
  1794 ;; Registers used:
  1795 ;;		wreg, status,2, status,0
  1796 ;; Tracked objects:
  1797 ;;		On entry : 60/0
  1798 ;;		On exit  : 60/0
  1799 ;;		Unchanged: FFF9F/0
  1800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1801 ;;      Params:         5       0       0       0       0
  1802 ;;      Locals:         0       0       0       0       0
  1803 ;;      Temps:          3       0       0       0       0
  1804 ;;      Totals:         8       0       0       0       0
  1805 ;;Total ram usage:        8 bytes
  1806 ;; Hardware stack levels used:    1
  1807 ;; This function calls:
  1808 ;;		Nothing
  1809 ;; This function is called by:
  1810 ;;		___ftmul
  1811 ;;		___awtoft
  1812 ;; This function uses a non-reentrant model
  1813 ;;
  1814  0512                     ___ftpack:	
  1815                           
  1816                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  1817  0512  0873               	movf	___ftpack@exp,w
  1818  0513  1903               	btfsc	3,2
  1819  0514  2D1A               	goto	l3200
  1820  0515  0872               	movf	___ftpack@arg+2,w
  1821  0516  0471               	iorwf	___ftpack@arg+1,w
  1822  0517  0470               	iorwf	___ftpack@arg,w
  1823  0518  1D03               	skipz
  1824  0519  2D23               	goto	l3206
  1825  051A                     l3200:	
  1826  051A  01F0               	clrf	?___ftpack
  1827  051B  01F1               	clrf	?___ftpack+1
  1828  051C  01F2               	clrf	?___ftpack+2
  1829  051D  0008               	return
  1830  051E                     l3204:	
  1831  051E  0AF3               	incf	___ftpack@exp,f
  1832  051F  1003               	clrc
  1833  0520  0CF2               	rrf	___ftpack@arg+2,f
  1834  0521  0CF1               	rrf	___ftpack@arg+1,f
  1835  0522  0CF0               	rrf	___ftpack@arg,f
  1836  0523                     l3206:	
  1837  0523  30FE               	movlw	254
  1838  0524  0572               	andwf	___ftpack@arg+2,w
  1839  0525  1903               	btfsc	3,2
  1840  0526  2D32               	goto	l3210
  1841  0527  2D1E               	goto	l3204
  1842  0528                     l3208:	
  1843  0528  0AF3               	incf	___ftpack@exp,f
  1844  0529  0AF0               	incf	___ftpack@arg,f
  1845  052A  1903               	skipnz
  1846  052B  0AF1               	incf	___ftpack@arg+1,f
  1847  052C  1903               	skipnz
  1848  052D  0AF2               	incf	___ftpack@arg+2,f
  1849  052E  1003               	clrc
  1850  052F  0CF2               	rrf	___ftpack@arg+2,f
  1851  0530  0CF1               	rrf	___ftpack@arg+1,f
  1852  0531  0CF0               	rrf	___ftpack@arg,f
  1853  0532                     l3210:	
  1854  0532  30FF               	movlw	255
  1855  0533  0572               	andwf	___ftpack@arg+2,w
  1856  0534  1903               	btfsc	3,2
  1857  0535  2D3C               	goto	l3214
  1858  0536  2D28               	goto	l3208
  1859  0537                     l3212:	
  1860  0537  03F3               	decf	___ftpack@exp,f
  1861  0538  1003               	clrc
  1862  0539  0DF0               	rlf	___ftpack@arg,f
  1863  053A  0DF1               	rlf	___ftpack@arg+1,f
  1864  053B  0DF2               	rlf	___ftpack@arg+2,f
  1865  053C                     l3214:	
  1866  053C  1FF1               	btfss	___ftpack@arg+1,7
  1867  053D  2D37               	goto	l3212
  1868  053E  1C73               	btfss	___ftpack@exp,0
  1869  053F  13F1               	bcf	___ftpack@arg+1,7
  1870  0540  1003               	clrc
  1871  0541  0CF3               	rrf	___ftpack@exp,f
  1872  0542  0873               	movf	___ftpack@exp,w
  1873  0543  00F7               	movwf	??___ftpack+2
  1874  0544  01F6               	clrf	??___ftpack+1
  1875  0545  01F5               	clrf	??___ftpack
  1876  0546  0875               	movf	??___ftpack,w
  1877  0547  04F0               	iorwf	___ftpack@arg,f
  1878  0548  0876               	movf	??___ftpack+1,w
  1879  0549  04F1               	iorwf	___ftpack@arg+1,f
  1880  054A  0877               	movf	??___ftpack+2,w
  1881  054B  04F2               	iorwf	___ftpack@arg+2,f
  1882  054C  0874               	movf	___ftpack@sign,w
  1883  054D  1D03               	skipz
  1884  054E  17F2               	bsf	___ftpack@arg+2,7
  1885  054F  0008               	return
  1886  0550                     __end_of___ftpack:	
  1887  0550                     PL2:	
  1888  0550  07AA               	addwf	___ftmul@f3_as_product,f
  1889  0551  0824               	movf	___ftmul@f2+1,w
  1890  0552  1103               	clrz
  1891  0553  1803               	skipnc
  1892  0554  0A24               	incf	___ftmul@f2+1,w
  1893  0555  1D03               	btfss	3,2
  1894  0556  07AB               	addwf	___ftmul@f3_as_product+1,f
  1895  0557  0825               	movf	___ftmul@f2+2,w
  1896  0558  1103               	clrz
  1897  0559  0008               	return
  1898                           
  1899                           	psect	text348
  1900  0407                     __ptext348:	
  1901 ;; =============== function ___ftmul ends ============
  1902                           
  1903                           
  1904 ;; *************** function _atoi *****************
  1905 ;; Defined at:
  1906 ;;		line 6 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\atoi.c"
  1907 ;; Parameters:    Size  Location     Type
  1908 ;;  s               1    wreg     PTR const unsigned char 
  1909 ;;		 -> input(17), 
  1910 ;; Auto vars:     Size  Location     Type
  1911 ;;  s               1   13[COMMON] PTR const unsigned char 
  1912 ;;		 -> input(17), 
  1913 ;;  a               2   11[COMMON] int 
  1914 ;;  sign            1   10[COMMON] unsigned char 
  1915 ;; Return value:  Size  Location     Type
  1916 ;;                  2    6[COMMON] int 
  1917 ;; Registers used:
  1918 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1919 ;; Tracked objects:
  1920 ;;		On entry : 100/0
  1921 ;;		On exit  : 100/0
  1922 ;;		Unchanged: FFEFF/0
  1923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1924 ;;      Params:         2       0       0       0       0
  1925 ;;      Locals:         4       0       0       0       0
  1926 ;;      Temps:          2       0       0       0       0
  1927 ;;      Totals:         8       0       0       0       0
  1928 ;;Total ram usage:        8 bytes
  1929 ;; Hardware stack levels used:    1
  1930 ;; Hardware stack levels required when called:    1
  1931 ;; This function calls:
  1932 ;;		___wmul
  1933 ;;		_isdigit
  1934 ;; This function is called by:
  1935 ;;		_main
  1936 ;; This function uses a non-reentrant model
  1937 ;;
  1938  0407                     _atoi:	
  1939                           
  1940                           ; Regs used in _atoi: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1941                           ;atoi@s stored from wreg
  1942  0407  00FD               	movwf	atoi@s
  1943  0408                     l3324:	
  1944  0408  087D               	movf	atoi@s,w
  1945  0409  0084               	movwf	4
  1946  040A  0800               	movf	0,w
  1947  040B  3A20               	xorlw	32
  1948  040C  1D03               	btfss	3,2
  1949  040D  2C10               	goto	l3326
  1950  040E                     l3322:	
  1951  040E  0AFD               	incf	atoi@s,f
  1952  040F  2C08               	goto	l3324
  1953  0410                     l3326:	
  1954  0410  087D               	movf	atoi@s,w
  1955  0411  0084               	movwf	4
  1956  0412  0800               	movf	0,w
  1957  0413  3A09               	xorlw	9
  1958  0414  1903               	skipnz
  1959  0415  2C0E               	goto	l3322
  1960  0416  01FB               	clrf	atoi@a
  1961  0417  01FC               	clrf	atoi@a+1
  1962  0418  01FA               	clrf	atoi@sign
  1963  0419  087D               	movf	atoi@s,w
  1964  041A  0084               	movwf	4
  1965  041B  0800               	movf	0,w
  1966  041C  3A2D               	xorlw	45
  1967  041D  1D03               	skipz
  1968  041E  2C21               	goto	l3334
  1969  041F  0AFA               	incf	atoi@sign,f
  1970  0420  2C4B               	goto	l3336
  1971  0421                     l3334:	
  1972  0421  087D               	movf	atoi@s,w
  1973  0422  0084               	movwf	4
  1974  0423  0800               	movf	0,w
  1975  0424  3A2B               	xorlw	43
  1976  0425  1903               	btfsc	3,2
  1977  0426  2C4B               	goto	l3336
  1978  0427                     l3342:	
  1979  0427  087D               	movf	atoi@s,w
  1980  0428  0084               	movwf	4
  1981  0429  0800               	movf	0,w
  1982  042A  2461  120A  118A   	fcall	_isdigit
  1983  042D  1C03               	btfss	3,0
  1984  042E  2C4D               	goto	l3344
  1985  042F  087D               	movf	atoi@s,w
  1986  0430  0084               	movwf	4
  1987  0431  087C               	movf	atoi@a+1,w
  1988  0432  00F1               	movwf	?___wmul+1
  1989  0433  087B               	movf	atoi@a,w
  1990  0434  00F0               	movwf	?___wmul
  1991  0435  300A               	movlw	10
  1992  0436  00F2               	movwf	?___wmul+2
  1993  0437  01F3               	clrf	?___wmul+3
  1994  0438  246F  120A  118A   	fcall	___wmul
  1995  043B  0800               	movf	0,w
  1996  043C  0770               	addwf	?___wmul,w
  1997  043D  00F8               	movwf	??_atoi
  1998  043E  3000               	movlw	0
  1999  043F  1803               	skipnc
  2000  0440  3001               	movlw	1
  2001  0441  0771               	addwf	?___wmul+1,w
  2002  0442  00F9               	movwf	??_atoi+1
  2003  0443  0878               	movf	??_atoi,w
  2004  0444  3ED0               	addlw	208
  2005  0445  00FB               	movwf	atoi@a
  2006  0446  0879               	movf	??_atoi+1,w
  2007  0447  1803               	skipnc
  2008  0448  3E01               	addlw	1
  2009  0449  3EFF               	addlw	255
  2010  044A  00FC               	movwf	atoi@a+1
  2011  044B                     l3336:	
  2012  044B  0AFD               	incf	atoi@s,f
  2013  044C  2C27               	goto	l3342
  2014  044D                     l3344:	
  2015  044D  087A               	movf	atoi@sign,w
  2016  044E  1903               	btfsc	3,2
  2017  044F  2C5C               	goto	l3350
  2018  0450  097B               	comf	atoi@a,w
  2019  0451  00F8               	movwf	??_atoi
  2020  0452  097C               	comf	atoi@a+1,w
  2021  0453  00F9               	movwf	??_atoi+1
  2022  0454  0AF8               	incf	??_atoi,f
  2023  0455  1903               	skipnz
  2024  0456  0AF9               	incf	??_atoi+1,f
  2025  0457  0878               	movf	??_atoi,w
  2026  0458  00F6               	movwf	?_atoi
  2027  0459  0879               	movf	??_atoi+1,w
  2028  045A  00F7               	movwf	?_atoi+1
  2029  045B  0008               	return
  2030  045C                     l3350:	
  2031  045C  087C               	movf	atoi@a+1,w
  2032  045D  00F7               	movwf	?_atoi+1
  2033  045E  087B               	movf	atoi@a,w
  2034  045F  00F6               	movwf	?_atoi
  2035  0460  0008               	return
  2036  0461                     __end_of_atoi:	
  2037  0461                     __ptext356:	
  2038 ;; =============== function ___wmul ends ============
  2039                           
  2040                           
  2041 ;; *************** function _isdigit *****************
  2042 ;; Defined at:
  2043 ;;		line 13 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\isdigit.c"
  2044 ;; Parameters:    Size  Location     Type
  2045 ;;  c               1    wreg     unsigned char 
  2046 ;; Auto vars:     Size  Location     Type
  2047 ;;  c               1    1[COMMON] unsigned char 
  2048 ;; Return value:  Size  Location     Type
  2049 ;;		None               void
  2050 ;; Registers used:
  2051 ;;		wreg, status,2, status,0
  2052 ;; Tracked objects:
  2053 ;;		On entry : 100/0
  2054 ;;		On exit  : 100/0
  2055 ;;		Unchanged: FFEFF/0
  2056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2057 ;;      Params:         0       0       0       0       0
  2058 ;;      Locals:         2       0       0       0       0
  2059 ;;      Temps:          0       0       0       0       0
  2060 ;;      Totals:         2       0       0       0       0
  2061 ;;Total ram usage:        2 bytes
  2062 ;; Hardware stack levels used:    1
  2063 ;; This function calls:
  2064 ;;		Nothing
  2065 ;; This function is called by:
  2066 ;;		_atoi
  2067 ;; This function uses a non-reentrant model
  2068 ;;
  2069  0461                     _isdigit:	
  2070                           
  2071                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2072                           ;isdigit@c stored from wreg
  2073  0461  00F1               	movwf	isdigit@c
  2074  0462  303A               	movlw	58
  2075  0463  01F0               	clrf	_isdigit$2389
  2076  0464  0271               	subwf	isdigit@c,w
  2077  0465  1803               	skipnc
  2078  0466  2C6D               	goto	l3130
  2079  0467  3030               	movlw	48
  2080  0468  0271               	subwf	isdigit@c,w
  2081  0469  1C03               	skipc
  2082  046A  2C6D               	goto	l3130
  2083  046B  01F0               	clrf	_isdigit$2389
  2084  046C  0AF0               	incf	_isdigit$2389,f
  2085  046D                     l3130:	
  2086  046D  0C70               	rrf	_isdigit$2389,w
  2087  046E  0008               	return
  2088  046F                     __end_of_isdigit:	
  2089  046F                     __ptext355:	
  2090 ;; =============== function ___lwdiv ends ============
  2091                           
  2092                           
  2093 ;; *************** function ___wmul *****************
  2094 ;; Defined at:
  2095 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\wmul.c"
  2096 ;; Parameters:    Size  Location     Type
  2097 ;;  multiplier      2    0[COMMON] unsigned int 
  2098 ;;  multiplicand    2    2[COMMON] unsigned int 
  2099 ;; Auto vars:     Size  Location     Type
  2100 ;;  product         2    4[COMMON] unsigned int 
  2101 ;; Return value:  Size  Location     Type
  2102 ;;                  2    0[COMMON] unsigned int 
  2103 ;; Registers used:
  2104 ;;		wreg, status,2, status,0
  2105 ;; Tracked objects:
  2106 ;;		On entry : 100/0
  2107 ;;		On exit  : 100/0
  2108 ;;		Unchanged: FFEFF/0
  2109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2110 ;;      Params:         4       0       0       0       0
  2111 ;;      Locals:         2       0       0       0       0
  2112 ;;      Temps:          0       0       0       0       0
  2113 ;;      Totals:         6       0       0       0       0
  2114 ;;Total ram usage:        6 bytes
  2115 ;; Hardware stack levels used:    1
  2116 ;; This function calls:
  2117 ;;		Nothing
  2118 ;; This function is called by:
  2119 ;;		_atoi
  2120 ;; This function uses a non-reentrant model
  2121 ;;
  2122  046F                     ___wmul:	
  2123                           
  2124                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2125  046F  01F4               	clrf	___wmul@product
  2126  0470  01F5               	clrf	___wmul@product+1
  2127  0471                     l3136:	
  2128  0471  1C70               	btfss	___wmul@multiplier,0
  2129  0472  2C79               	goto	l3140
  2130  0473  0872               	movf	___wmul@multiplicand,w
  2131  0474  07F4               	addwf	___wmul@product,f
  2132  0475  1803               	skipnc
  2133  0476  0AF5               	incf	___wmul@product+1,f
  2134  0477  0873               	movf	___wmul@multiplicand+1,w
  2135  0478  07F5               	addwf	___wmul@product+1,f
  2136  0479                     l3140:	
  2137  0479  1003               	clrc
  2138  047A  0DF2               	rlf	___wmul@multiplicand,f
  2139  047B  0DF3               	rlf	___wmul@multiplicand+1,f
  2140  047C  1003               	clrc
  2141  047D  0CF1               	rrf	___wmul@multiplier+1,f
  2142  047E  0CF0               	rrf	___wmul@multiplier,f
  2143  047F  0871               	movf	___wmul@multiplier+1,w
  2144  0480  0470               	iorwf	___wmul@multiplier,w
  2145  0481  1D03               	skipz
  2146  0482  2C71               	goto	l3136
  2147  0483  0875               	movf	___wmul@product+1,w
  2148  0484  00F1               	movwf	?___wmul+1
  2149  0485  0874               	movf	___wmul@product,w
  2150  0486  00F0               	movwf	?___wmul
  2151  0487  0008               	return
  2152  0488                     __end_of___wmul:	
  2153                           
  2154                           	psect	text349
  2155  055A                     __ptext349:	
  2156 ;; =============== function _atoi ends ============
  2157                           
  2158                           
  2159 ;; *************** function _sprintf *****************
  2160 ;; Defined at:
  2161 ;;		line 488 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\lib\doprnt.c"
  2162 ;; Parameters:    Size  Location     Type
  2163 ;;  sp              1    wreg     PTR unsigned char 
  2164 ;;		 -> main@buffer(15), 
  2165 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  2166 ;;		 -> STR_1(17), 
  2167 ;; Auto vars:     Size  Location     Type
  2168 ;;  sp              1   10[BANK0 ] PTR unsigned char 
  2169 ;;		 -> main@buffer(15), 
  2170 ;;  _val            4    6[BANK0 ] struct .
  2171 ;;  c               1   11[BANK0 ] char 
  2172 ;;  prec            1    5[BANK0 ] char 
  2173 ;;  flag            1    4[BANK0 ] unsigned char 
  2174 ;;  ap              1    3[BANK0 ] PTR void [1]
  2175 ;;		 -> ?_sprintf(2), 
  2176 ;; Return value:  Size  Location     Type
  2177 ;;                  2    0[BANK0 ] int 
  2178 ;; Registers used:
  2179 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2180 ;; Tracked objects:
  2181 ;;		On entry : 60/0
  2182 ;;		On exit  : 160/0
  2183 ;;		Unchanged: FFE9F/0
  2184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2185 ;;      Params:         0       3       0       0       0
  2186 ;;      Locals:         0       9       0       0       0
  2187 ;;      Temps:          2       0       0       0       0
  2188 ;;      Totals:         2      12       0       0       0
  2189 ;;Total ram usage:       14 bytes
  2190 ;; Hardware stack levels used:    1
  2191 ;; Hardware stack levels required when called:    1
  2192 ;; This function calls:
  2193 ;;		___lwdiv
  2194 ;;		___lwmod
  2195 ;; This function is called by:
  2196 ;;		_main
  2197 ;; This function uses a non-reentrant model
  2198 ;;
  2199  055A                     _sprintf:	
  2200                           
  2201                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2202                           ;sprintf@sp stored from wreg
  2203  055A  00AA               	movwf	sprintf@sp
  2204  055B  3021               	movlw	(?_sprintf+1)& (0+255)
  2205  055C  00A3               	movwf	sprintf@ap
  2206  055D                     l3314:	
  2207  055D  0820               	movf	sprintf@f,w
  2208  055E  0AA0               	incf	sprintf@f,f
  2209  055F  0084               	movwf	4
  2210  0560  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  2211  0565  00AB               	movwf	sprintf@c
  2212  0566  08AB               	movf	sprintf@c,f
  2213  0567  1903               	btfsc	3,2
  2214  0568  2DF0               	goto	l3316
  2215  0569  082B               	movf	sprintf@c,w
  2216  056A  3A25               	xorlw	37
  2217  056B  1903               	skipnz
  2218  056C  2D72               	goto	l3270
  2219  056D  082A               	movf	sprintf@sp,w
  2220  056E  2643  120A  118A   	fcall	PL3	;call to abstracted procedure
  2221  0571  2D5D               	goto	l3314
  2222  0572                     l3270:	
  2223  0572  01A4               	clrf	sprintf@flag
  2224  0573  0820               	movf	sprintf@f,w
  2225  0574  0AA0               	incf	sprintf@f,f
  2226  0575  0084               	movwf	4
  2227  0576  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  2228  057B  00AB               	movwf	sprintf@c
  2229                           
  2230                           ; Switch size 1, requested type "space"
  2231                           ; Number of cases is 3, Range of values is 0 to 105
  2232                           ; switch strategies available:
  2233                           ; Name         Instructions Cycles
  2234                           ; simple_byte           10     6 (average)
  2235                           ; jumptable            260     6 (fixed)
  2236                           ; rangetable           110     6 (fixed)
  2237                           ; spacedrange          218     9 (fixed)
  2238                           ; locatedrange         106     3 (fixed)
  2239                           ;	Chosen strategy is simple_byte
  2240  057C  3A00               	xorlw	0	; case 0
  2241  057D  1903               	skipnz
  2242  057E  2DF0               	goto	l3316
  2243  057F  3A64               	xorlw	100	; case 100
  2244  0580  1903               	skipnz
  2245  0581  2D86               	goto	l3276
  2246  0582  3A0D               	xorlw	13	; case 105
  2247  0583  1903               	skipnz
  2248  0584  2D86               	goto	l3276
  2249  0585  2D5D               	goto	l3314
  2250  0586                     l3276:	
  2251  0586  0823               	movf	sprintf@ap,w
  2252  0587  0084               	movwf	4
  2253  0588  1383               	bcf	3,7	;select IRP bank0
  2254  0589  0800               	movf	0,w
  2255  058A  00A6               	movwf	sprintf@_val
  2256  058B  0A84               	incf	4,f
  2257  058C  0800               	movf	0,w
  2258  058D  00A7               	movwf	sprintf@_val+1
  2259  058E  0AA3               	incf	sprintf@ap,f
  2260  058F  0AA3               	incf	sprintf@ap,f
  2261  0590  1FA7               	btfss	sprintf@_val+1,7
  2262  0591  2D99               	goto	l3286
  2263  0592  3003               	movlw	3
  2264  0593  04A4               	iorwf	sprintf@flag,f
  2265  0594  09A6               	comf	sprintf@_val,f
  2266  0595  09A7               	comf	sprintf@_val+1,f
  2267  0596  0AA6               	incf	sprintf@_val,f
  2268  0597  1903               	skipnz
  2269  0598  0AA7               	incf	sprintf@_val+1,f
  2270  0599                     l3286:	
  2271  0599  01AB               	clrf	sprintf@c
  2272  059A  0AAB               	incf	sprintf@c,f
  2273  059B                     l3290:	
  2274  059B  1003               	clrc
  2275  059C  0D2B               	rlf	sprintf@c,w
  2276  059D  3E01               	addlw	low (_dpowers-__stringbase)
  2277  059E  0084               	movwf	4
  2278  059F  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  2279  05A4  00FC               	movwf	??_sprintf
  2280  05A5  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  2281  05AA  00FD               	movwf	??_sprintf+1
  2282  05AB  0227               	subwf	sprintf@_val+1,w
  2283  05AC  1D03               	skipz
  2284  05AD  2DB0               	goto	u865
  2285  05AE  087C               	movf	??_sprintf,w
  2286  05AF  0226               	subwf	sprintf@_val,w
  2287  05B0                     u865:	
  2288  05B0  1C03               	btfss	3,0
  2289  05B1  2DB7               	goto	l3298
  2290  05B2  0AAB               	incf	sprintf@c,f
  2291  05B3  082B               	movf	sprintf@c,w
  2292  05B4  3A05               	xorlw	5
  2293  05B5  1D03               	skipz
  2294  05B6  2D9B               	goto	l3290
  2295  05B7                     l3298:	
  2296  05B7  0824               	movf	sprintf@flag,w
  2297  05B8  3903               	andlw	3
  2298  05B9  1903               	btfsc	3,2
  2299  05BA  2DC1               	goto	l3304
  2300  05BB  082A               	movf	sprintf@sp,w
  2301  05BC  0084               	movwf	4
  2302  05BD  302D               	movlw	45
  2303  05BE  1383               	bcf	3,7	;select IRP bank0
  2304  05BF  0080               	movwf	0
  2305  05C0  0AAA               	incf	sprintf@sp,f
  2306  05C1                     l3304:	
  2307  05C1  082B               	movf	sprintf@c,w
  2308  05C2  00A5               	movwf	sprintf@prec
  2309  05C3  2DEC               	goto	l3312
  2310  05C4                     l3306:	
  2311  05C4  300A               	movlw	10
  2312  05C5  00F7               	movwf	?___lwmod
  2313  05C6  01F8               	clrf	?___lwmod+1
  2314  05C7  1003               	clrc
  2315  05C8  0D25               	rlf	sprintf@prec,w
  2316  05C9  3E01               	addlw	low (_dpowers-__stringbase)
  2317  05CA  0084               	movwf	4
  2318  05CB  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  2319  05D0  00F0               	movwf	?___lwdiv
  2320  05D1  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  2321  05D6  00F1               	movwf	?___lwdiv+1
  2322  05D7  0827               	movf	sprintf@_val+1,w
  2323  05D8  00F3               	movwf	?___lwdiv+3
  2324  05D9  0826               	movf	sprintf@_val,w
  2325  05DA  00F2               	movwf	?___lwdiv+2
  2326  05DB  25F5  120A  118A   	fcall	___lwdiv
  2327  05DE  0871               	movf	?___lwdiv+1,w
  2328  05DF  00FA               	movwf	?___lwmod+3
  2329  05E0  0870               	movf	?___lwdiv,w
  2330  05E1  00F9               	movwf	?___lwmod+2
  2331  05E2  261F  120A  118A   	fcall	___lwmod
  2332  05E5  0877               	movf	?___lwmod,w
  2333  05E6  3E30               	addlw	48
  2334  05E7  00AB               	movwf	sprintf@c
  2335  05E8  082A               	movf	sprintf@sp,w
  2336  05E9  2643  120A  118A   	fcall	PL3	;call to abstracted procedure
  2337  05EC                     l3312:	
  2338  05EC  03A5               	decf	sprintf@prec,f
  2339  05ED  0F25               	incfsz	sprintf@prec,w
  2340  05EE  2DC4               	goto	l3306
  2341  05EF  2D5D               	goto	l3314
  2342  05F0                     l3316:	
  2343  05F0  082A               	movf	sprintf@sp,w
  2344  05F1  0084               	movwf	4
  2345  05F2  1383               	bcf	3,7	;select IRP bank0
  2346  05F3  0180               	clrf	0
  2347  05F4  0008               	return
  2348  05F5                     __end_of_sprintf:	
  2349  05F5                     __ptext354:	
  2350 ;; =============== function ___lwmod ends ============
  2351                           
  2352                           
  2353 ;; *************** function ___lwdiv *****************
  2354 ;; Defined at:
  2355 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\lwdiv.c"
  2356 ;; Parameters:    Size  Location     Type
  2357 ;;  divisor         2    0[COMMON] unsigned int 
  2358 ;;  dividend        2    2[COMMON] unsigned int 
  2359 ;; Auto vars:     Size  Location     Type
  2360 ;;  quotient        2    4[COMMON] unsigned int 
  2361 ;;  counter         1    6[COMMON] unsigned char 
  2362 ;; Return value:  Size  Location     Type
  2363 ;;                  2    0[COMMON] unsigned int 
  2364 ;; Registers used:
  2365 ;;		wreg, status,2, status,0
  2366 ;; Tracked objects:
  2367 ;;		On entry : 60/0
  2368 ;;		On exit  : 60/0
  2369 ;;		Unchanged: FFF9F/0
  2370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2371 ;;      Params:         4       0       0       0       0
  2372 ;;      Locals:         3       0       0       0       0
  2373 ;;      Temps:          0       0       0       0       0
  2374 ;;      Totals:         7       0       0       0       0
  2375 ;;Total ram usage:        7 bytes
  2376 ;; Hardware stack levels used:    1
  2377 ;; This function calls:
  2378 ;;		Nothing
  2379 ;; This function is called by:
  2380 ;;		_sprintf
  2381 ;; This function uses a non-reentrant model
  2382 ;;
  2383  05F5                     ___lwdiv:	
  2384                           
  2385                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2386  05F5  01F4               	clrf	___lwdiv@quotient
  2387  05F6  01F5               	clrf	___lwdiv@quotient+1
  2388  05F7  0871               	movf	___lwdiv@divisor+1,w
  2389  05F8  0470               	iorwf	___lwdiv@divisor,w
  2390  05F9  1903               	skipnz
  2391  05FA  2E1A               	goto	l3172
  2392  05FB  01F6               	clrf	___lwdiv@counter
  2393  05FC                     L3:	
  2394  05FC  0AF6               	incf	___lwdiv@counter,f
  2395  05FD  1BF1               	btfsc	___lwdiv@divisor+1,7
  2396  05FE  2E03               	goto	l3160
  2397  05FF  1003               	clrc
  2398  0600  0DF0               	rlf	___lwdiv@divisor,f
  2399  0601  0DF1               	rlf	___lwdiv@divisor+1,f
  2400  0602  2DFC               	goto	L3
  2401  0603                     l3160:	
  2402  0603  1003               	clrc
  2403  0604  0DF4               	rlf	___lwdiv@quotient,f
  2404  0605  0DF5               	rlf	___lwdiv@quotient+1,f
  2405  0606  0871               	movf	___lwdiv@divisor+1,w
  2406  0607  0273               	subwf	___lwdiv@dividend+1,w
  2407  0608  1D03               	skipz
  2408  0609  2E0C               	goto	u665
  2409  060A  0870               	movf	___lwdiv@divisor,w
  2410  060B  0272               	subwf	___lwdiv@dividend,w
  2411  060C                     u665:	
  2412  060C  1C03               	skipc
  2413  060D  2E16               	goto	L4
  2414  060E  0870               	movf	___lwdiv@divisor,w
  2415  060F  02F2               	subwf	___lwdiv@dividend,f
  2416  0610  0871               	movf	___lwdiv@divisor+1,w
  2417  0611  1C03               	skipc
  2418  0612  03F3               	decf	___lwdiv@dividend+1,f
  2419  0613  02F3               	subwf	___lwdiv@dividend+1,f
  2420  0614  1474               	bsf	___lwdiv@quotient,0
  2421  0615  1003               	clrc
  2422  0616                     L4:	
  2423  0616  0CF1               	rrf	___lwdiv@divisor+1,f
  2424  0617  0CF0               	rrf	___lwdiv@divisor,f
  2425  0618  0BF6               	decfsz	___lwdiv@counter,f
  2426  0619  2E03               	goto	l3160
  2427  061A                     l3172:	
  2428  061A  0875               	movf	___lwdiv@quotient+1,w
  2429  061B  00F1               	movwf	?___lwdiv+1
  2430  061C  0874               	movf	___lwdiv@quotient,w
  2431  061D  00F0               	movwf	?___lwdiv
  2432  061E  0008               	return
  2433  061F                     __end_of___lwdiv:	
  2434  061F                     __ptext353:	
  2435 ;; =============== function ___ftpack ends ============
  2436                           
  2437                           
  2438 ;; *************** function ___lwmod *****************
  2439 ;; Defined at:
  2440 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\lwmod.c"
  2441 ;; Parameters:    Size  Location     Type
  2442 ;;  divisor         2    7[COMMON] unsigned int 
  2443 ;;  dividend        2    9[COMMON] unsigned int 
  2444 ;; Auto vars:     Size  Location     Type
  2445 ;;  counter         1   11[COMMON] unsigned char 
  2446 ;; Return value:  Size  Location     Type
  2447 ;;                  2    7[COMMON] unsigned int 
  2448 ;; Registers used:
  2449 ;;		wreg, status,2, status,0
  2450 ;; Tracked objects:
  2451 ;;		On entry : 60/0
  2452 ;;		On exit  : 60/0
  2453 ;;		Unchanged: FFF9F/0
  2454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2455 ;;      Params:         4       0       0       0       0
  2456 ;;      Locals:         1       0       0       0       0
  2457 ;;      Temps:          0       0       0       0       0
  2458 ;;      Totals:         5       0       0       0       0
  2459 ;;Total ram usage:        5 bytes
  2460 ;; Hardware stack levels used:    1
  2461 ;; This function calls:
  2462 ;;		Nothing
  2463 ;; This function is called by:
  2464 ;;		_sprintf
  2465 ;; This function uses a non-reentrant model
  2466 ;;
  2467  061F                     ___lwmod:	
  2468                           
  2469                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2470  061F  0878               	movf	___lwmod@divisor+1,w
  2471  0620  0477               	iorwf	___lwmod@divisor,w
  2472  0621  1903               	skipnz
  2473  0622  2E3E               	goto	l3192
  2474  0623  01FB               	clrf	___lwmod@counter
  2475  0624                     L1:	
  2476  0624  0AFB               	incf	___lwmod@counter,f
  2477  0625  1BF8               	btfsc	___lwmod@divisor+1,7
  2478  0626  2E2B               	goto	l3184
  2479  0627  1003               	clrc
  2480  0628  0DF7               	rlf	___lwmod@divisor,f
  2481  0629  0DF8               	rlf	___lwmod@divisor+1,f
  2482  062A  2E24               	goto	L1
  2483  062B                     l3184:	
  2484  062B  0878               	movf	___lwmod@divisor+1,w
  2485  062C  027A               	subwf	___lwmod@dividend+1,w
  2486  062D  1D03               	skipz
  2487  062E  2E31               	goto	u705
  2488  062F  0877               	movf	___lwmod@divisor,w
  2489  0630  0279               	subwf	___lwmod@dividend,w
  2490  0631                     u705:	
  2491  0631  1C03               	skipc
  2492  0632  2E3A               	goto	L2
  2493  0633  0877               	movf	___lwmod@divisor,w
  2494  0634  02F9               	subwf	___lwmod@dividend,f
  2495  0635  0878               	movf	___lwmod@divisor+1,w
  2496  0636  1C03               	skipc
  2497  0637  03FA               	decf	___lwmod@dividend+1,f
  2498  0638  02FA               	subwf	___lwmod@dividend+1,f
  2499  0639  1003               	clrc
  2500  063A                     L2:	
  2501  063A  0CF8               	rrf	___lwmod@divisor+1,f
  2502  063B  0CF7               	rrf	___lwmod@divisor,f
  2503  063C  0BFB               	decfsz	___lwmod@counter,f
  2504  063D  2E2B               	goto	l3184
  2505  063E                     l3192:	
  2506  063E  087A               	movf	___lwmod@dividend+1,w
  2507  063F  00F8               	movwf	?___lwmod+1
  2508  0640  0879               	movf	___lwmod@dividend,w
  2509  0641  00F7               	movwf	?___lwmod
  2510  0642  0008               	return
  2511  0643                     __end_of___lwmod:	
  2512  0643                     PL3:	
  2513  0643  0084               	movwf	4
  2514  0644  082B               	movf	sprintf@c,w
  2515  0645  1383               	bcf	3,7	;select IRP bank0
  2516  0646  0080               	movwf	0
  2517  0647  0AAA               	incf	sprintf@sp,f
  2518  0648  0008               	return
  2519                           
  2520                           	psect	text350
  2521  036D                     __ptext350:	
  2522 ;; =============== function _sprintf ends ============
  2523                           
  2524                           
  2525 ;; *************** function _gets_Serial *****************
  2526 ;; Defined at:
  2527 ;;		line 244 in file "C:\Users\petir\Documents\PIC_PROG\C_PuertoSerial\C_PuertoSerial_usart.c"
  2528 ;; Parameters:    Size  Location     Type
  2529 ;;  s               1    wreg     PTR unsigned char 
  2530 ;;		 -> input(17), main@buffer(15), 
  2531 ;; Auto vars:     Size  Location     Type
  2532 ;;  s               1    1[COMMON] PTR unsigned char 
  2533 ;;		 -> input(17), main@buffer(15), 
  2534 ;;  c               1    6[COMMON] unsigned char 
  2535 ;;  i               2    4[COMMON] int 
  2536 ;;  i               2    2[COMMON] int 
  2537 ;; Return value:  Size  Location     Type
  2538 ;;		None               void
  2539 ;; Registers used:
  2540 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2541 ;; Tracked objects:
  2542 ;;		On entry : 0/0
  2543 ;;		On exit  : 0/0
  2544 ;;		Unchanged: FFE00/0
  2545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2546 ;;      Params:         0       0       0       0       0
  2547 ;;      Locals:         6       0       0       0       0
  2548 ;;      Temps:          1       0       0       0       0
  2549 ;;      Totals:         7       0       0       0       0
  2550 ;;Total ram usage:        7 bytes
  2551 ;; Hardware stack levels used:    1
  2552 ;; Hardware stack levels required when called:    1
  2553 ;; This function calls:
  2554 ;;		_getch
  2555 ;; This function is called by:
  2556 ;;		_main
  2557 ;; This function uses a non-reentrant model
  2558 ;;
  2559  036D                     _gets_Serial:	
  2560                           
  2561                           ; Regs used in _gets_Serial: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2562                           ;gets_Serial@s stored from wreg
  2563  036D  00F1               	movwf	gets_Serial@s
  2564                           
  2565                           ;C_PuertoSerial_usart.c: 246: for(int i=0; i<=16; i++) *(s+i)=0;
  2566  036E  01F2               	clrf	gets_Serial@i
  2567  036F  01F3               	clrf	gets_Serial@i+1
  2568  0370                     l3238:	
  2569  0370  0872               	movf	gets_Serial@i,w
  2570  0371  0771               	addwf	gets_Serial@s,w
  2571  0372  00F0               	movwf	??_gets_Serial
  2572  0373  0084               	movwf	4
  2573  0374  1383               	bcf	3,7	;select IRP bank0
  2574  0375  0180               	clrf	0
  2575  0376  0AF2               	incf	gets_Serial@i,f
  2576  0377  1903               	skipnz
  2577  0378  0AF3               	incf	gets_Serial@i+1,f
  2578  0379  0873               	movf	gets_Serial@i+1,w
  2579  037A  3A80               	xorlw	128
  2580  037B  00FF               	movwf	127
  2581  037C  3080               	movlw	128
  2582  037D  027F               	subwf	127,w
  2583  037E  1D03               	skipz
  2584  037F  2B82               	goto	u805
  2585  0380  3011               	movlw	17
  2586  0381  0272               	subwf	gets_Serial@i,w
  2587  0382                     u805:	
  2588  0382  1C03               	skipc
  2589  0383  2B70               	goto	l3238
  2590                           
  2591                           ;C_PuertoSerial_usart.c: 247: for(int i=0; i<16; i++){
  2592  0384  01F4               	clrf	gets_Serial@i_1843
  2593  0385  01F5               	clrf	gets_Serial@i_1843+1
  2594  0386                     l3250:	
  2595                           
  2596                           ;C_PuertoSerial_usart.c: 248: char c=getch();
  2597  0386  23A7  120A  118A   	fcall	_getch
  2598  0389  00F6               	movwf	gets_Serial@c
  2599                           
  2600                           ;C_PuertoSerial_usart.c: 250: if(c==10 | c==13) break;
  2601  038A  3A0A               	xorlw	10
  2602  038B  1903               	skipnz
  2603  038C  0008               	return
  2604  038D  0876               	movf	gets_Serial@c,w
  2605  038E  3A0D               	xorlw	13
  2606  038F  1903               	btfsc	3,2
  2607  0390  0008               	return
  2608                           
  2609                           ;C_PuertoSerial_usart.c: 251: *(s+i)=c;
  2610  0391  0874               	movf	gets_Serial@i_1843,w
  2611  0392  0771               	addwf	gets_Serial@s,w
  2612  0393  00F0               	movwf	??_gets_Serial
  2613  0394  0084               	movwf	4
  2614  0395  0876               	movf	gets_Serial@c,w
  2615  0396  1383               	bcf	3,7	;select IRP bank0
  2616  0397  0080               	movwf	0
  2617  0398  0AF4               	incf	gets_Serial@i_1843,f
  2618  0399  1903               	skipnz
  2619  039A  0AF5               	incf	gets_Serial@i_1843+1,f
  2620  039B  0875               	movf	gets_Serial@i_1843+1,w
  2621  039C  3A80               	xorlw	128
  2622  039D  00FF               	movwf	127
  2623  039E  3080               	movlw	128
  2624  039F  027F               	subwf	127,w
  2625  03A0  1D03               	skipz
  2626  03A1  2BA4               	goto	u835
  2627  03A2  3010               	movlw	16
  2628  03A3  0274               	subwf	gets_Serial@i_1843,w
  2629  03A4                     u835:	
  2630  03A4  1803               	btfsc	3,0
  2631  03A5  0008               	return
  2632  03A6  2B86               	goto	l3250
  2633  03A7                     __end_of_gets_Serial:	
  2634  03A7                     __ptext357:	
  2635 ;; =============== function _isdigit ends ============
  2636                           
  2637                           
  2638 ;; *************** function _getch *****************
  2639 ;; Defined at:
  2640 ;;		line 239 in file "C:\Users\petir\Documents\PIC_PROG\C_PuertoSerial\C_PuertoSerial_usart.c"
  2641 ;; Parameters:    Size  Location     Type
  2642 ;;		None
  2643 ;; Auto vars:     Size  Location     Type
  2644 ;;		None
  2645 ;; Return value:  Size  Location     Type
  2646 ;;                  1    wreg      unsigned char 
  2647 ;; Registers used:
  2648 ;;		wreg
  2649 ;; Tracked objects:
  2650 ;;		On entry : 0/0
  2651 ;;		On exit  : 60/0
  2652 ;;		Unchanged: FFF9F/0
  2653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2654 ;;      Params:         0       0       0       0       0
  2655 ;;      Locals:         0       0       0       0       0
  2656 ;;      Temps:          0       0       0       0       0
  2657 ;;      Totals:         0       0       0       0       0
  2658 ;;Total ram usage:        0 bytes
  2659 ;; Hardware stack levels used:    1
  2660 ;; This function calls:
  2661 ;;		Nothing
  2662 ;; This function is called by:
  2663 ;;		_gets_Serial
  2664 ;; This function uses a non-reentrant model
  2665 ;;
  2666  03A7                     _getch:	
  2667  03A7                     l1110:	
  2668                           ;C_PuertoSerial_usart.c: 240: while(!RCIF) continue;
  2669                           
  2670                           ; Regs used in _getch: [wreg]
  2671                           
  2672  03A7  1283               	bcf	3,5	;RP0=0, select bank0
  2673  03A8  1303               	bcf	3,6	;RP1=0, select bank0
  2674  03A9  1E8C               	btfss	12,5
  2675  03AA  2BA7               	goto	l1110
  2676                           
  2677                           ;C_PuertoSerial_usart.c: 241: return RCREG;
  2678  03AB  081A               	movf	26,w	;volatile
  2679  03AC  0008               	return
  2680  03AD                     __end_of_getch:	
  2681                           
  2682                           	psect	text358
  2683  0352                     __ptext358:	
  2684 ;; =============== function _getch ends ============
  2685                           
  2686                           
  2687 ;; *************** function _putch *****************
  2688 ;; Defined at:
  2689 ;;		line 233 in file "C:\Users\petir\Documents\PIC_PROG\C_PuertoSerial\C_PuertoSerial_usart.c"
  2690 ;; Parameters:    Size  Location     Type
  2691 ;;  dato            1    wreg     unsigned char 
  2692 ;; Auto vars:     Size  Location     Type
  2693 ;;  dato            1    0[COMMON] unsigned char 
  2694 ;; Return value:  Size  Location     Type
  2695 ;;		None               void
  2696 ;; Registers used:
  2697 ;;		wreg
  2698 ;; Tracked objects:
  2699 ;;		On entry : 0/0
  2700 ;;		On exit  : 60/0
  2701 ;;		Unchanged: FFF9F/0
  2702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2703 ;;      Params:         0       0       0       0       0
  2704 ;;      Locals:         1       0       0       0       0
  2705 ;;      Temps:          0       0       0       0       0
  2706 ;;      Totals:         1       0       0       0       0
  2707 ;;Total ram usage:        1 bytes
  2708 ;; Hardware stack levels used:    1
  2709 ;; This function calls:
  2710 ;;		Nothing
  2711 ;; This function is called by:
  2712 ;;		_main
  2713 ;; This function uses a non-reentrant model
  2714 ;;
  2715  0352                     _putch:	
  2716                           
  2717                           ; Regs used in _putch: [wreg]
  2718                           ;putch@dato stored from wreg
  2719  0352  00F0               	movwf	putch@dato
  2720  0353                     l1104:	
  2721                           ;C_PuertoSerial_usart.c: 234: while(!TXIF) continue;
  2722                           
  2723  0353  1283               	bcf	3,5	;RP0=0, select bank0
  2724  0354  1303               	bcf	3,6	;RP1=0, select bank0
  2725  0355  1E0C               	btfss	12,4
  2726  0356  2B53               	goto	l1104
  2727                           
  2728                           ;C_PuertoSerial_usart.c: 235: TXREG=dato;
  2729  0357  0870               	movf	putch@dato,w
  2730  0358  0099               	movwf	25	;volatile
  2731  0359  0008               	return
  2732  035A                     __end_of_putch:	
  2733                           
  2734                           	psect	text360
  2735  0000                     __ptext360:	
  2736 ;; =============== function _msecbase ends ============
  2737                           
  2738  007E                     btemp	set	126	;btemp
  2739  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.82 build 9453 
Symbol Table                                                                                   Wed Nov 06 20:19:24 2019

                    pc 0002                     fsr 0004    ___wmul@multiplicand 0072           ?_gets_Serial 0070  
                  _RA6 002E                    _RA7 002F                    _RE1 0049                    _PR2 0092  
                  u705 0631                    u805 0382                    u665 060C                    u835 03A4  
                  u865 05B0                    u795 03F3                    _nin 0047                    fsr0 0004  
                  indf 0000            lcd_goto@pos 0075                   l1110 03A7                   l1104 0353  
                 l1113 0000                   l1107 0000                   l1060 0000                   l1151 0000  
                 l1072 0000                   l1057 0403                   l1066 0000                   l1084 0000  
                 l1092 0741                   l1069 0000                   l3110 0000                   l1078 0000  
                 l2151 0000                   l3112 0000                   l3200 051A                   l3130 046D  
                 l3122 0000                   l3210 0532                   l2163 0000                   l3116 0000  
                 l3124 0000                   l3140 0479                   l3220 0000                   l3212 0537  
                 l3204 051E                   l2173 0000                   l3142 0000                   l3134 0000  
                 l3150 0000                   l3222 0000                   l3214 053C                   l3206 0523  
                 l3230 03ED                   l3310 0000                   l3302 0000                   l2183 0000  
                 l3144 0000                   l3136 0471                   l3160 0603                   l3152 0000  
                 l3208 0528                   l3224 03EB                   l3240 0000                   l3232 0000  
                 l3312 05EC                   l3304 05C1                   l3320 0000                   l3400 04F6  
                 l3170 0000                   l3162 0000                   l3218 0000                   l3250 0386  
                 l3242 0000                   l3306 05C4                   l3314 055D                   l3330 0000  
                 l3322 040E                   l3402 0000                   l3410 0000                   l3172 061A  
                 l3228 0000                   l3260 0000                   l3252 0000                   l3308 0000  
                 l3316 05F0                   l3324 0408                   l3404 0000                   l3412 0000  
                 l3500 0000                   l3166 0000                   l3190 0000                   l3238 0370  
                 l3270 0572                   l3262 0000                   l3350 045C                   l3342 0427  
                 l3334 0421                   l3326 0410                   l3406 0000                   l3430 0000  
                 l3422 0000                   l3510 0000                   l3502 0000                   l3184 062B  
                 l3192 063E                   l3176 0000                   l3280 0000                   l3344 044D  
                 l3336 044B                   l3360 04B4                   l3416 0000                   l3432 0000  
                 l3424 0000                   l3440 0000                   l3600 0000                   l3520 0000  
                 l3512 0000                   l3504 0000                   l2297 0000                   l3258 0000  
                 l3290 059B                   l3274 0000                   l3346 0000                   l3370 0000  
                 l3354 0000                   l3418 0492                   l3434 0000                   l3426 0000  
                 l3450 0000                   l3610 0000                   l3602 0000                   l3530 0000  
                 l3514 0000                   l3506 0000                   l3196 0000                   l3284 0000  
                 l3276 0586                   l3268 0000                   l3380 0000                   l3372 0000  
                 l3428 0000                   l3436 0000                   l3444 0000                   l3612 0000  
                 l3604 0000                   l3540 06FB                   l3516 0000                   l3508 0000  
                 l3460 0000                   l3452 0000                   l3198 0000                   l3286 0599  
                 l3278 0000                   l3390 0000                   l3382 0000                   l3374 0000  
                 l3366 04C5                   l3438 0000                   l3446 03BD                   l3614 0000  
                 l3606 0000                   l3550 0000                   l3542 0000                   l3534 0000  
                 l3526 06CC                   l3518 0000                   l3470 0000                   l3462 0000  
                 l3454 0000                   l3296 0000                   l3392 0000                   l3384 04D6  
                 l3376 0000                   l3368 0000                   l3448 0000                   l3608 0000  
                 l3552 0000                   l3544 0000                   l3528 0000                   l3480 0000  
                 l3472 0000                   l3464 0000                   l3456 0000                   l3298 05B7  
                 l3394 0000                   l3378 0000                   l3570 0000                   l3562 0000  
                 l3554 0737                   l3490 0000                   l3482 0000                   l3474 0000  
                 l3466 0000                   l3458 0000                   l3396 04EC                   l3388 04E0  
                 l3580 0000                   l3564 0000                   l3556 0000                   l3548 0000  
                 l3492 0000                   l3484 0000                   l3476 0000                   l3468 0000  
                 l3566 0000                   l3558 0000                   l3494 0000                   l3486 0000  
                 l3478 0000                   l3592 07AC                   l3584 0000                   l3576 0781  
                 l3568 0000                   l3496 0000                   l3488 0000                   l3594 0000  
                 l3586 0000                   l3578 0000                   l3498 0000                   l3596 0000  
                 STR_1 001D                   _T0IF 005A                   u1105 0751                   u1075 06EA  
                 u1085 0719                   _RCIF 0065                   _TMR0 0001                   _TXIF 0064  
                 _atoi 0407                   _main 0649           ___ftpack@arg 0070           ___ftpack@exp 0073  
                 btemp 007E                   start 0000           ___ftmul@cntr 002D           ___ftmul@sign 002E  
                ?_atoi 0076                  ?_main 0070                  _ANSEL 0188        __end_of___ftmul 0512  
      __end_of___lwdiv 061F        __end_of___lwmod 0643                  _RCREG 001A                  _RCSTA 0018  
                _SPBRG 0099                  _PORTA 0005                  _PORTB 0006                  _PORTD 0008  
                _TRISA 0085                  _TRISB 0086                  _TRISD 0088                  _TRISE 0089  
                _TXREG 0019                  _TXSTA 0098      gets_Serial@i_1843 0074          ___awtoft@sign 007B  
                _getch 03A7        __end_of_isdigit 046F                  _input 0049                  _pause 03EB  
        ___ftpack@sign 0074                  atoi@a 007B                  atoi@s 007D                  _putch 0352  
                main@i 0041                  main@x 0045                  pclath 000A                  status 0003  
                wtemp0 007E        __end_of_sprintf 05F5           gets_Serial@c 0076           gets_Serial@i 0072  
         gets_Serial@s 0071           __end_of_atoi 0461           __end_of_main 0800                 ??_atoi 0078  
               ??_main 002F                 ?_getch 0070                 _ADCON0 001F                 _ADCON1 009F  
               _ADRESH 001E                 _ADRESL 009E                 _CCPR1L 0015                 ?_pause 0070  
     __end_of___awtoft 04A3                 ?_putch 0070       __end_of___ftpack 0550                 _ANSELH 0189  
               _OSCCON 008F                 _TMR2ON 0092                 _TRISC6 043E                 _TRISC7 043F  
     __end_of_lcd_goto 03B1       __end_of_lcd_puts 03D9                 ___wmul 046F              ??___ftmul 0026  
            ??___lwdiv 0074              ??___lwmod 007B       __end_of_msecbase 0407                 clrloop 035B  
___ftmul@f3_as_product 002A   __size_of_gets_Serial 003A              ??_isdigit 0070                 pause@x 0072  
            ??_sprintf 007C             ___awtoft@c 0078             ___ftmul@f1 0020             ___ftmul@f2 0023  
       __pcstackCOMMON 0070          __end_of_getch 03AD          __end_of_pause 03FC          __end_of_putch 035A  
   __size_of_lcd_clear 000B                ??_getch 0070     __size_of_lcd_write 0012                ??_pause 0072  
              ??_putch 0070             __pbssBANK0 0047             __pmaintext 0649                ?___wmul 0070  
              _CCP1CON 0017                _CCP2CON 001D                _BAUDCTL 0187              ?___awtoft 0078  
            ?___ftpack 0070                _T2CKPS0 0090                _T2CKPS1 0091                _GO_DONE 00F9  
            ?_lcd_goto 0070              ?_lcd_puts 0075              ?_msecbase 0070      __end_of_lcd_clear 03BC  
    __end_of_lcd_write 03EB        __size_of___wmul 0019                ___ftmul 04A3                ___lwdiv 05F5  
              ___lwmod 061F             ??___awtoft 007B             ??___ftpack 0075                _dpowers 0013  
              _isdigit 0461                _sprintf 055A                main@val 003F             ??_lcd_goto 0075  
           ??_lcd_puts 0077   end_of_initialization 0369             ??_msecbase 0070             main@i_1830 0043  
           main@x_1835 0046             main@buffer 0030             lcd_write@c 0074            ___ftmul@exp 0029  
        ??_gets_Serial 0070         __end_of___wmul 0488    start_initialization 0362               ??___wmul 0074  
         pause@msvalue 0070      __size_of___awtoft 001B      __size_of___ftpack 003E    __end_of_gets_Serial 03A7  
        __pcstackBANK0 0020           _isdigit$2389 0070      __size_of_lcd_goto 0004            sprintf@_val 0026  
          sprintf@flag 0024      __size_of_lcd_puts 001D            sprintf@prec 0025       ___lwdiv@dividend 0072  
    __size_of_msecbase 000B              __ptext350 036D              __ptext342 03AD              __ptext351 03EB  
            __ptext343 03BC              __ptext360 0000              __ptext352 0512              __ptext344 03B1  
            __ptext353 061F              __ptext345 03D9              __ptext354 05F5              __ptext346 0488  
            __ptext355 046F              __ptext347 04A3              __ptext356 0461              __ptext348 0407  
            __ptext357 03A7              __ptext349 055A              __ptext358 0352              __ptext359 03FC  
             ?___ftmul 0020               ?___lwdiv 0070               ?___lwmod 0077              _lcd_clear 03B1  
            __pstrings 0003              _lcd_write 03D9               ?_isdigit 0070       ___lwdiv@quotient 0074  
       __size_of_getch 0006               ?_sprintf 0020         __size_of_pause 0011         __size_of_putch 0008  
       ___wmul@product 0074             ?_lcd_clear 0070            _gets_Serial 036D            __stringbase 0012  
           ?_lcd_write 0070      ___wmul@multiplier 0070              lcd_puts@s 0075       __size_of___ftmul 006F  
     __size_of___lwdiv 002A       __size_of___lwmod 0024               ___awtoft 0488               ___ftpack 0512  
     __size_of_isdigit 000E        ___lwdiv@divisor 0070        ___lwdiv@counter 0076               _lcd_goto 03AD  
             _lcd_puts 03BC       __size_of_sprintf 009B          __size_of_atoi 005A          __size_of_main 01B7  
             _msecbase 03FC               clear_ram 035A               atoi@sign 007A            ??_lcd_clear 0075  
          ??_lcd_write 0074              putch@dato 0070               isdigit@c 0071              sprintf@ap 0023  
            sprintf@sp 002A       ___lwmod@dividend 0079              stringcode 000D             _OPTION_REG 0081  
             sprintf@c 002B               sprintf@f 0020        ___lwmod@divisor 0077        ___lwmod@counter 007B  
             stringdir 000D               stringtab 0003  
